<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that pages. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.6.1" created="2021-02-09 20:33" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Gaurav Jain</title>
	<link>https://www.pyscoop.com</link>
	<description>Software Engineer  &#124; ❤️Python &#124; Blogger &#124; Consultant </description>
	<pubDate>Tue, 09 Feb 2021 20:33:42 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://www.pyscoop.com</wp:base_site_url>
	<wp:base_blog_url>https://www.pyscoop.com</wp:base_blog_url>

		<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[gauravjain]]></wp:author_login><wp:author_email><![CDATA[gauravjain91011@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Gaurav Jain]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>26</wp:term_id>
		<wp:category_nicename><![CDATA[datastructure-algorithm]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[DataStructure &amp; Algorithm]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>54</wp:term_id>
		<wp:category_nicename><![CDATA[django]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Django]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>25</wp:term_id>
		<wp:category_nicename><![CDATA[tutorial]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Tutorial]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[algorithm]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Algorithm]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[amazon-web-services]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Amazon Web Services]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>63</wp:term_id>
		<wp:tag_slug><![CDATA[api]]></wp:tag_slug>
		<wp:tag_name><![CDATA[API]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[artificial-intelligence]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Artificial Intelligence]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[aws]]></wp:tag_slug>
		<wp:tag_name><![CDATA[AWS]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>4</wp:term_id>
		<wp:tag_slug><![CDATA[beginner]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Beginner]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>38</wp:term_id>
		<wp:tag_slug><![CDATA[binary-search]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Binary Search]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[bitcoin]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Bitcoin]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[blockchain]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Blockchain]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>30</wp:term_id>
		<wp:tag_slug><![CDATA[bubble-sort]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Bubble Sort]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>62</wp:term_id>
		<wp:tag_slug><![CDATA[class]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Class]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>44</wp:term_id>
		<wp:tag_slug><![CDATA[clickjacking-attack]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Clickjacking Attack]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>46</wp:term_id>
		<wp:tag_slug><![CDATA[crlf-injection]]></wp:tag_slug>
		<wp:tag_name><![CDATA[CRLF Injection]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>50</wp:term_id>
		<wp:tag_slug><![CDATA[cross-site-request-forgery]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Cross Site Request Forgery]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>48</wp:term_id>
		<wp:tag_slug><![CDATA[cross-site-scripting]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Cross Site Scripting]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[cryptocurrency]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Cryptocurrency]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>49</wp:term_id>
		<wp:tag_slug><![CDATA[csrf]]></wp:tag_slug>
		<wp:tag_name><![CDATA[CSRF]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>22</wp:term_id>
		<wp:tag_slug><![CDATA[data-science]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Data Science]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[datastructure]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Datastructure]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>58</wp:term_id>
		<wp:tag_slug><![CDATA[datatype]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Datatype]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>16</wp:term_id>
		<wp:tag_slug><![CDATA[deep-learning]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Deep Learning]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>61</wp:term_id>
		<wp:tag_slug><![CDATA[dict]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Dict]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>3</wp:term_id>
		<wp:tag_slug><![CDATA[django]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Django]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>64</wp:term_id>
		<wp:tag_slug><![CDATA[djangoadmin]]></wp:tag_slug>
		<wp:tag_name><![CDATA[DjangoAdmin]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>55</wp:term_id>
		<wp:tag_slug><![CDATA[djangoform]]></wp:tag_slug>
		<wp:tag_name><![CDATA[DjangoForm]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>13</wp:term_id>
		<wp:tag_slug><![CDATA[encoding]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Encoding]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>12</wp:term_id>
		<wp:tag_slug><![CDATA[ethereum]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Ethereum]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>57</wp:term_id>
		<wp:tag_slug><![CDATA[geopoint]]></wp:tag_slug>
		<wp:tag_name><![CDATA[GeoPoint]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>56</wp:term_id>
		<wp:tag_slug><![CDATA[gis]]></wp:tag_slug>
		<wp:tag_name><![CDATA[GIS]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>14</wp:term_id>
		<wp:tag_slug><![CDATA[hash]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Hash]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>35</wp:term_id>
		<wp:tag_slug><![CDATA[heap-sort]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Heap Sort]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>24</wp:term_id>
		<wp:tag_slug><![CDATA[hmac]]></wp:tag_slug>
		<wp:tag_name><![CDATA[HMAC]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>51</wp:term_id>
		<wp:tag_slug><![CDATA[hsts]]></wp:tag_slug>
		<wp:tag_name><![CDATA[HSTS]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>31</wp:term_id>
		<wp:tag_slug><![CDATA[insertion-sort]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Insertion Sort]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>37</wp:term_id>
		<wp:tag_slug><![CDATA[linear-search]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Linear Search]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>60</wp:term_id>
		<wp:tag_slug><![CDATA[list]]></wp:tag_slug>
		<wp:tag_name><![CDATA[List]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[machine-learning]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Machine Learning]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>33</wp:term_id>
		<wp:tag_slug><![CDATA[merge-sort]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Merge Sort]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>23</wp:term_id>
		<wp:tag_slug><![CDATA[notebook]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Notebook]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>2</wp:term_id>
		<wp:tag_slug><![CDATA[python]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Python]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>34</wp:term_id>
		<wp:tag_slug><![CDATA[quicksort]]></wp:tag_slug>
		<wp:tag_name><![CDATA[QuickSort]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[sagemaker]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SageMaker]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>36</wp:term_id>
		<wp:tag_slug><![CDATA[searching]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Searching]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>40</wp:term_id>
		<wp:tag_slug><![CDATA[security]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Security]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>32</wp:term_id>
		<wp:tag_slug><![CDATA[selection-sort]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Selection Sort]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>15</wp:term_id>
		<wp:tag_slug><![CDATA[sha256]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SHA256]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[sorting]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Sorting]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>45</wp:term_id>
		<wp:tag_slug><![CDATA[sql-injection]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SQL Injection]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>52</wp:term_id>
		<wp:tag_slug><![CDATA[ssl]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SSL]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>39</wp:term_id>
		<wp:tag_slug><![CDATA[stack]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Stack]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>59</wp:term_id>
		<wp:tag_slug><![CDATA[string]]></wp:tag_slug>
		<wp:tag_name><![CDATA[String]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>43</wp:term_id>
		<wp:tag_slug><![CDATA[timing-attack]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Timing Attack]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[virtualcurrency]]></wp:tag_slug>
		<wp:tag_name><![CDATA[VirtualCurrency]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>53</wp:term_id>
		<wp:tag_slug><![CDATA[web-security]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Web Security]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>47</wp:term_id>
		<wp:tag_slug><![CDATA[xss]]></wp:tag_slug>
		<wp:tag_name><![CDATA[XSS]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id>28</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[algorithm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Algorithm]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>20</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[amazon-web-services]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Amazon Web Services]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>63</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[api]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[API]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>19</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[artificial-intelligence]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Artificial Intelligence]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>21</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[aws]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[AWS]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>4</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[beginner]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Beginner]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>38</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[binary-search]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Binary Search]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>9</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bitcoin]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Bitcoin]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>8</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[blockchain]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Blockchain]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>30</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bubble-sort]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Bubble Sort]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>62</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[class]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Class]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>44</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[clickjacking-attack]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Clickjacking Attack]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>46</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[crlf-injection]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[CRLF Injection]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>50</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cross-site-request-forgery]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Cross Site Request Forgery]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>48</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cross-site-scripting]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Cross Site Scripting]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>10</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cryptocurrency]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Cryptocurrency]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>49</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[csrf]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[CSRF]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>22</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[data-science]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Data Science]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>27</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[datastructure]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Datastructure]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>26</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[datastructure-algorithm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DataStructure &amp; Algorithm]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>58</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[datatype]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Datatype]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>16</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[deep-learning]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Deep Learning]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>61</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dict]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Dict]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>3</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[django]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Django]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>54</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[django]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Django]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>64</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[djangoadmin]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DjangoAdmin]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>55</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[djangoform]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DjangoForm]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>13</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[encoding]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Encoding]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>12</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ethereum]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Ethereum]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>57</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[geopoint]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[GeoPoint]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>56</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[gis]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[GIS]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>14</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hash]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Hash]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>7</wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[header-menu]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Header menu]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>35</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[heap-sort]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Heap Sort]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>24</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hmac]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[HMAC]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>51</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hsts]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[HSTS]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>31</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[insertion-sort]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Insertion Sort]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>37</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linear-search]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Linear Search]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>60</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[list]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[List]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>18</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[machine-learning]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Machine Learning]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>33</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[merge-sort]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Merge Sort]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>23</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[notebook]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Notebook]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>2</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Python]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>34</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[quicksort]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[QuickSort]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>17</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sagemaker]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SageMaker]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>36</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[searching]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Searching]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>40</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[security]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Security]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>32</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[selection-sort]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Selection Sort]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>15</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sha256]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SHA256]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>29</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sorting]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Sorting]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>45</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sql-injection]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SQL Injection]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>52</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ssl]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SSL]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>39</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[stack]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Stack]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>59</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[string]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[String]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>43</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[timing-attack]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Timing Attack]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>25</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tutorial]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Tutorial]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>1</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>11</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[virtualcurrency]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[VirtualCurrency]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>53</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[web-security]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Web Security]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>47</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[xss]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[XSS]]></wp:term_name>
	</wp:term>
			<wp:term><wp:term_id>7</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[header-menu]]></wp:term_slug><wp:term_name><![CDATA[Header menu]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.6.1</generator>

<image>
	<url>https://www.pyscoop.com/wp-content/uploads/2020/05/cropped-icon-1-32x32.png</url>
	<title>Gaurav Jain</title>
	<link>https://www.pyscoop.com</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title>python</title>
		<link>https://www.pyscoop.com/learn-python-in-10-minutes/python/</link>
		<pubDate>Wed, 29 Apr 2020 06:02:11 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//wp-content/uploads/2020/04/python.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date><![CDATA[2020-04-29 06:02:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-29 06:02:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>23</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/04/python.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/python.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:694;s:6:"height";i:301;s:4:"file";s:18:"2020/04/python.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"python-300x130.png";s:5:"width";i:300;s:6:"height";i:130;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"python-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:21.9314079422382661732626729644834995269775390625;s:5:"bytes";i:1944;s:11:"size_before";i:8864;s:10:"size_after";i:6920;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:2:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:25.410000000000000142108547152020037174224853515625;s:5:"bytes";i:1670;s:11:"size_before";i:6573;s:10:"size_after";i:4903;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:11.96000000000000085265128291212022304534912109375;s:5:"bytes";i:274;s:11:"size_before";i:2291;s:10:"size_after";i:2017;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-pixil-frame-0-1-1-1.png</title>
		<link>https://www.pyscoop.com/cropped-pixil-frame-0-1-1-1-png/</link>
		<pubDate>Wed, 29 Apr 2020 17:41:00 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//wp-content/uploads/2020/04/cropped-pixil-frame-0-1-1-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[https://www.pyscoop.com//wp-content/uploads/2020/04/cropped-pixil-frame-0-1-1-1.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date><![CDATA[2020-04-29 17:41:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-29 17:41:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-pixil-frame-0-1-1-1-png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/04/cropped-pixil-frame-0-1-1-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_49e31b356c43f335d53342a171f02661]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/cropped-pixil-frame-0-1-1-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:235;s:6:"height";i:214;s:4:"file";s:39:"2020/04/cropped-pixil-frame-0-1-1-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:39:"cropped-pixil-frame-0-1-1-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:38:"cropped-pixil-frame-0-1-1-1-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_744f4846f0aae428526f53dcbf4fac78]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:20.09456264775413814049898064695298671722412109375;s:5:"bytes";i:425;s:11:"size_before";i:2115;s:10:"size_after";i:1690;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:2:{s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:17.60000000000000142108547152020037174224853515625;s:5:"bytes";i:205;s:11:"size_before";i:1165;s:10:"size_after";i:960;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:23.160000000000000142108547152020037174224853515625;s:5:"bytes";i:220;s:11:"size_before";i:950;s:10:"size_after";i:730;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>stack</title>
		<link>https://www.pyscoop.com/stack-in-python/beach-2178625_1920/</link>
		<pubDate>Sun, 03 May 2020 18:02:15 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2019/04/beach-2178625_1920.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[stack]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2020-05-03 18:02:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-03 18:02:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[beach-2178625_1920]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>114</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2019/04/beach-2178625_1920.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1280;s:4:"file";s:30:"2019/04/beach-2178625_1920.jpg";s:5:"sizes";a:10:{s:6:"medium";a:4:{s:4:"file";s:30:"beach-2178625_1920-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:31:"beach-2178625_1920-1024x683.jpg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:30:"beach-2178625_1920-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:30:"beach-2178625_1920-768x512.jpg";s:5:"width";i:768;s:6:"height";i:512;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:32:"beach-2178625_1920-1536x1024.jpg";s:5:"width";i:1536;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"beach-2178625_1920-850x550.jpg";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:30:"beach-2178625_1920-850x500.jpg";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:10:"image/jpeg";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:29:"beach-2178625_1920-120x80.jpg";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:10:"image/jpeg";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:30:"beach-2178625_1920-360x230.jpg";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:10:"image/jpeg";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:30:"beach-2178625_1920-600x380.jpg";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"1.8";s:6:"credit";s:0:"";s:6:"camera";s:13:"Canon EOS 60D";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"18";s:3:"iso";s:3:"100";s:13:"shutter_speed";s:6:"0.0004";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/beach-2178625_1920.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[stack]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:3.1814826656561709938841886469163000583648681640625;s:5:"bytes";i:16120;s:11:"size_before";i:506682;s:10:"size_after";i:490562;s:4:"time";d:0.25;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:10:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:2.859999999999999875655021241982467472553253173828125;s:5:"bytes";i:328;s:11:"size_before";i:11452;s:10:"size_after";i:11124;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:3.359999999999999875655021241982467472553253173828125;s:5:"bytes";i:3046;s:11:"size_before";i:90655;s:10:"size_after";i:87609;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:2.95000000000000017763568394002504646778106689453125;s:5:"bytes";i:160;s:11:"size_before";i:5420;s:10:"size_after";i:5260;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:3.149999999999999911182158029987476766109466552734375;s:5:"bytes";i:1700;s:11:"size_before";i:53887;s:10:"size_after";i:52187;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:3.390000000000000124344978758017532527446746826171875;s:5:"bytes";i:6094;s:11:"size_before";i:179506;s:10:"size_after";i:173412;s:4:"time";d:0.059999999999999997779553950749686919152736663818359375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:3.20999999999999996447286321199499070644378662109375;s:5:"bytes";i:1988;s:11:"size_before";i:62008;s:10:"size_after";i:60020;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:2.79000000000000003552713678800500929355621337890625;s:5:"bytes";i:1474;s:11:"size_before";i:52894;s:10:"size_after";i:51420;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:2.100000000000000088817841970012523233890533447265625;s:5:"bytes";i:59;s:11:"size_before";i:2813;s:10:"size_after";i:2754;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:2.359999999999999875655021241982467472553253173828125;s:5:"bytes";i:346;s:11:"size_before";i:14637;s:10:"size_after";i:14291;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:2.770000000000000017763568394002504646778106689453125;s:5:"bytes";i:925;s:11:"size_before";i:33410;s:10:"size_after";i:32485;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Encryption meme sha256</title>
		<link>https://www.pyscoop.com/generate-hmac-sha256-signature-in-python/sha256-2/</link>
		<pubDate>Sun, 03 May 2020 18:33:36 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2019/05/sha256-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Encryption meme]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2020-05-03 18:33:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-03 18:33:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sha256-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>69</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2019/05/sha256-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/sha256-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:20:"2019/05/sha256-2.png";s:5:"sizes";a:8:{s:6:"medium";a:4:{s:4:"file";s:20:"sha256-2-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"sha256-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"sha256-2-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"sha256-2-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:20:"sha256-2-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:19:"sha256-2-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:20:"sha256-2-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:20:"sha256-2-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Encryption meme]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:1673477;s:10:"size_after";i:1673477;s:4:"time";d:1.4800000000000002042810365310288034379482269287109375;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:8:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:85515;s:10:"size_after";i:85515;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:40114;s:10:"size_after";i:40114;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:352300;s:10:"size_after";i:352300;s:4:"time";d:0.38000000000000000444089209850062616169452667236328125;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:431699;s:10:"size_after";i:431699;s:4:"time";d:0.40000000000000002220446049250313080847263336181640625;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:384716;s:10:"size_after";i:384716;s:4:"time";d:0.309999999999999997779553950749686919152736663818359375;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:21074;s:10:"size_after";i:21074;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:113283;s:10:"size_after";i:113283;s:4:"time";d:0.070000000000000006661338147750939242541790008544921875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:244776;s:10:"size_after";i:244776;s:4:"time";d:0.2200000000000000011102230246251565404236316680908203125;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Sorting</title>
		<link>https://www.pyscoop.com/sorting-algorithms-implementation-in-python/r_660997_xfjvn/</link>
		<pubDate>Sun, 03 May 2020 18:45:40 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2019/02/r_660997_XfjvN.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Sorting]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date><![CDATA[2020-05-03 18:45:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-03 18:45:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[r_660997_xfjvn]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>106</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2019/02/r_660997_XfjvN.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Sorting]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/02/r_660997_XfjvN.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:26:"2019/02/r_660997_XfjvN.png";s:5:"sizes";a:8:{s:6:"medium";a:4:{s:4:"file";s:26:"r_660997_XfjvN-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:26:"r_660997_XfjvN-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:26:"r_660997_XfjvN-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"r_660997_XfjvN-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:26:"r_660997_XfjvN-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:25:"r_660997_XfjvN-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:26:"r_660997_XfjvN-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:26:"r_660997_XfjvN-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:1604024;s:10:"size_after";i:1604024;s:4:"time";d:1.75;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:8:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:79189;s:10:"size_after";i:79189;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:32447;s:10:"size_after";i:32447;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:335259;s:10:"size_after";i:335259;s:4:"time";d:0.59999999999999997779553950749686919152736663818359375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:411687;s:10:"size_after";i:411687;s:4:"time";d:0.419999999999999984456877655247808434069156646728515625;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:391655;s:10:"size_after";i:391655;s:4:"time";d:0.299999999999999988897769753748434595763683319091796875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:17773;s:10:"size_after";i:17773;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:105364;s:10:"size_after";i:105364;s:4:"time";d:0.070000000000000006661338147750939242541790008544921875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:230650;s:10:"size_after";i:230650;s:4:"time";d:0.2600000000000000088817841970012523233890533447265625;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://www.pyscoop.com/machine-learning-for-beginners-with-amazon-sagemaker-part-2/sagemakernb/</link>
		<pubDate>Mon, 04 May 2020 12:41:02 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/03/sagemakernb.png</guid>
		<description></description>
		<content:encoded><![CDATA[AWS Sagemaker Notebook]]></content:encoded>
		<excerpt:encoded><![CDATA[AWS Sagemaker Notebook]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 12:41:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 12:41:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sagemakernb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>86</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/03/sagemakernb.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[AWS Sagemaker Notebook]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/03/sagemakernb.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1916;s:6:"height";i:1508;s:4:"file";s:23:"2020/03/sagemakernb.png";s:5:"sizes";a:10:{s:6:"medium";a:4:{s:4:"file";s:23:"sagemakernb-300x236.png";s:5:"width";i:300;s:6:"height";i:236;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:24:"sagemakernb-1024x806.png";s:5:"width";i:1024;s:6:"height";i:806;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:23:"sagemakernb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:23:"sagemakernb-768x604.png";s:5:"width";i:768;s:6:"height";i:604;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:25:"sagemakernb-1536x1209.png";s:5:"width";i:1536;s:6:"height";i:1209;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"sagemakernb-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:23:"sagemakernb-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:22:"sagemakernb-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:23:"sagemakernb-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:23:"sagemakernb-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:22.650793606549910919056856073439121246337890625;s:5:"bytes";i:243788;s:11:"size_before";i:1076289;s:10:"size_after";i:832501;s:4:"time";d:3.239999999999999769073610877967439591884613037109375;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:10:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:24.260000000000001563194018672220408916473388671875;s:5:"bytes";i:8651;s:11:"size_before";i:35660;s:10:"size_after";i:27009;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:22.21000000000000085265128291212022304534912109375;s:5:"bytes";i:43933;s:11:"size_before";i:197830;s:10:"size_after";i:153897;s:4:"time";d:0.5500000000000000444089209850062616169452667236328125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:23.1700000000000017053025658242404460906982421875;s:5:"bytes";i:3065;s:11:"size_before";i:13228;s:10:"size_after";i:10163;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:21.559999999999998721023075631819665431976318359375;s:5:"bytes";i:29188;s:11:"size_before";i:135366;s:10:"size_after";i:106178;s:4:"time";d:0.419999999999999984456877655247808434069156646728515625;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:21.96000000000000085265128291212022304534912109375;s:5:"bytes";i:72368;s:11:"size_before";i:329549;s:10:"size_after";i:257181;s:4:"time";d:1.1699999999999999289457264239899814128875732421875;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:23.699999999999999289457264239899814128875732421875;s:5:"bytes";i:30568;s:11:"size_before";i:128957;s:10:"size_after";i:98389;s:4:"time";d:0.270000000000000017763568394002504646778106689453125;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:23.75;s:5:"bytes";i:26321;s:11:"size_before";i:110834;s:10:"size_after";i:84513;s:4:"time";d:0.429999999999999993338661852249060757458209991455078125;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:21.309999999999998721023075631819665431976318359375;s:5:"bytes";i:1679;s:11:"size_before";i:7880;s:10:"size_after";i:6201;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:26.019999999999999573674358543939888477325439453125;s:5:"bytes";i:10119;s:11:"size_before";i:38891;s:10:"size_after";i:28772;s:4:"time";d:0.1000000000000000055511151231257827021181583404541015625;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:22.9200000000000017053025658242404460906982421875;s:5:"bytes";i:17896;s:11:"size_before";i:78094;s:10:"size_after";i:60198;s:4:"time";d:0.13000000000000000444089209850062616169452667236328125;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>sagemaker_visual</title>
		<link>https://www.pyscoop.com/machine-learning-for-beginners-with-amazon-sagemaker-part-2/sagemaker_visual/</link>
		<pubDate>Mon, 04 May 2020 12:42:32 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/sagemaker_visual.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 12:42:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 12:42:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sagemaker_visual]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>86</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/sagemaker_visual.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/sagemaker_visual.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1846;s:6:"height";i:1034;s:4:"file";s:28:"2020/05/sagemaker_visual.png";s:5:"sizes";a:10:{s:6:"medium";a:4:{s:4:"file";s:28:"sagemaker_visual-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:29:"sagemaker_visual-1024x574.png";s:5:"width";i:1024;s:6:"height";i:574;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"sagemaker_visual-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:28:"sagemaker_visual-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:29:"sagemaker_visual-1536x860.png";s:5:"width";i:1536;s:6:"height";i:860;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"sagemaker_visual-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:28:"sagemaker_visual-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:27:"sagemaker_visual-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:28:"sagemaker_visual-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:28:"sagemaker_visual-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:34.8098207641514818533323705196380615234375;s:5:"bytes";i:413517;s:11:"size_before";i:1187932;s:10:"size_after";i:774415;s:4:"time";d:2.140000000000000124344978758017532527446746826171875;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:10:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:32.280000000000001136868377216160297393798828125;s:5:"bytes";i:9241;s:11:"size_before";i:28631;s:10:"size_after";i:19390;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:34.88000000000000255795384873636066913604736328125;s:5:"bytes";i:68359;s:11:"size_before";i:195969;s:10:"size_after";i:127610;s:4:"time";d:0.320000000000000006661338147750939242541790008544921875;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:31.3299999999999982946974341757595539093017578125;s:5:"bytes";i:4587;s:11:"size_before";i:14643;s:10:"size_after";i:10056;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:36.02000000000000312638803734444081783294677734375;s:5:"bytes";i:46061;s:11:"size_before";i:127862;s:10:"size_after";i:81801;s:4:"time";d:0.2300000000000000099920072216264088638126850128173828125;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:32.60000000000000142108547152020037174224853515625;s:5:"bytes";i:109326;s:11:"size_before";i:335377;s:10:"size_after";i:226051;s:4:"time";d:0.67000000000000003996802888650563545525074005126953125;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:36.4500000000000028421709430404007434844970703125;s:5:"bytes";i:63469;s:11:"size_before";i:174136;s:10:"size_after";i:110667;s:4:"time";d:0.2300000000000000099920072216264088638126850128173828125;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:36.3299999999999982946974341757595539093017578125;s:5:"bytes";i:57847;s:11:"size_before";i:159240;s:10:"size_after";i:101393;s:4:"time";d:0.320000000000000006661338147750939242541790008544921875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:26.199999999999999289457264239899814128875732421875;s:5:"bytes";i:1991;s:11:"size_before";i:7599;s:10:"size_after";i:5608;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:34.67999999999999971578290569595992565155029296875;s:5:"bytes";i:15375;s:11:"size_before";i:44328;s:10:"size_after";i:28953;s:4:"time";d:0.059999999999999997779553950749686919152736663818359375;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:37.21000000000000085265128291212022304534912109375;s:5:"bytes";i:37261;s:11:"size_before";i:100147;s:10:"size_after";i:62886;s:4:"time";d:0.2200000000000000011102230246251565404236316680908203125;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>converted</title>
		<link>https://www.pyscoop.com/machine-learning-for-beginners-with-amazon-sagemaker-part-2/converted/</link>
		<pubDate>Mon, 04 May 2020 12:43:51 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/converted.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 12:43:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 12:43:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[converted]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>86</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/converted.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/converted.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1856;s:6:"height";i:1644;s:4:"file";s:21:"2020/05/converted.png";s:5:"sizes";a:10:{s:6:"medium";a:4:{s:4:"file";s:21:"converted-300x266.png";s:5:"width";i:300;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"converted-1024x907.png";s:5:"width";i:1024;s:6:"height";i:907;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"converted-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"converted-768x680.png";s:5:"width";i:768;s:6:"height";i:680;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:23:"converted-1536x1361.png";s:5:"width";i:1536;s:6:"height";i:1361;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"converted-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:21:"converted-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:20:"converted-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:21:"converted-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:21:"converted-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:28.5969501443546647578841657377779483795166015625;s:5:"bytes";i:295172;s:11:"size_before";i:1032180;s:10:"size_after";i:737008;s:4:"time";d:3.5099999999999997868371792719699442386627197265625;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:10:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:38.219999999999998863131622783839702606201171875;s:5:"bytes";i:7892;s:11:"size_before";i:20649;s:10:"size_after";i:12757;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:30.78999999999999914734871708787977695465087890625;s:5:"bytes";i:79989;s:11:"size_before";i:259782;s:10:"size_after";i:179793;s:4:"time";d:0.85999999999999998667732370449812151491641998291015625;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:5.70000000000000017763568394002504646778106689453125;s:5:"bytes";i:383;s:11:"size_before";i:6715;s:10:"size_after";i:6332;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:34.840000000000003410605131648480892181396484375;s:5:"bytes";i:60025;s:11:"size_before";i:172265;s:10:"size_after";i:112240;s:4:"time";d:0.89000000000000001332267629550187848508358001708984375;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:30.699999999999999289457264239899814128875732421875;s:5:"bytes";i:139798;s:11:"size_before";i:455324;s:10:"size_after";i:315526;s:4:"time";d:1.189999999999999946709294817992486059665679931640625;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:5.36000000000000031974423109204508364200592041015625;s:5:"bytes";i:2695;s:11:"size_before";i:50302;s:10:"size_after";i:47607;s:4:"time";d:0.1600000000000000033306690738754696212708950042724609375;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:5.62999999999999989341858963598497211933135986328125;s:5:"bytes";i:2493;s:11:"size_before";i:44275;s:10:"size_after";i:41782;s:4:"time";d:0.13000000000000000444089209850062616169452667236328125;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:9.1899999999999995026200849679298698902130126953125;s:5:"bytes";i:247;s:11:"size_before";i:2687;s:10:"size_after";i:2440;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:6.660000000000000142108547152020037174224853515625;s:5:"bytes";i:580;s:11:"size_before";i:8703;s:10:"size_after";i:8123;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:9.32000000000000028421709430404007434844970703125;s:5:"bytes";i:1070;s:11:"size_before";i:11478;s:10:"size_after";i:10408;s:4:"time";d:0.1000000000000000055511151231257827021181583404541015625;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>blockchain</title>
		<link>https://www.pyscoop.com/building-a-simple-blockchain-in-python/screen-shot-2020-05-04-at-4-48-09-pm/</link>
		<pubDate>Mon, 04 May 2020 12:50:43 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/Screen-Shot-2020-05-04-at-4.48.09-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[blockchain]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 12:50:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 12:50:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-05-04-at-4-48-09-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>72</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/Screen-Shot-2020-05-04-at-4.48.09-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[blockchain]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/Screen-Shot-2020-05-04-at-4.48.09-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:48:"2020/05/Screen-Shot-2020-05-04-at-4.48.09-PM.png";s:5:"sizes";a:8:{s:6:"medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-4.48.09-PM-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-4.48.09-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-4.48.09-PM-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-4.48.09-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-4.48.09-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:47:"Screen-Shot-2020-05-04-at-4.48.09-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-4.48.09-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-4.48.09-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:2774898;s:10:"size_after";i:2774898;s:4:"time";d:1.3600000000000000976996261670137755572795867919921875;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:8:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:110593;s:10:"size_after";i:110593;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:44028;s:10:"size_after";i:44028;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:588220;s:10:"size_after";i:588220;s:4:"time";d:0.299999999999999988897769753748434595763683319091796875;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:803326;s:10:"size_after";i:803326;s:4:"time";d:0.35999999999999998667732370449812151491641998291015625;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:674830;s:10:"size_after";i:674830;s:4:"time";d:0.330000000000000015543122344752191565930843353271484375;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:18913;s:10:"size_after";i:18913;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:154138;s:10:"size_after";i:154138;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:380850;s:10:"size_after";i:380850;s:4:"time";d:0.190000000000000002220446049250313080847263336181640625;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Blockchain network</title>
		<link>https://www.pyscoop.com/building-a-simple-blockchain-in-python-part-2/1_rynmmrqrxjusjk1obyagka/</link>
		<pubDate>Mon, 04 May 2020 13:06:46 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2019/07/1_ryNmmrqrxjuSJK1OBYaGKA.png</guid>
		<description></description>
		<content:encoded><![CDATA[Blockchain network]]></content:encoded>
		<excerpt:encoded><![CDATA[Blockchain network]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 13:06:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 13:06:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1_rynmmrqrxjusjk1obyagka]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>75</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2019/07/1_ryNmmrqrxjuSJK1OBYaGKA.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Blockchain network]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/1_ryNmmrqrxjuSJK1OBYaGKA.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:36:"2019/07/1_ryNmmrqrxjuSJK1OBYaGKA.png";s:5:"sizes";a:8:{s:6:"medium";a:4:{s:4:"file";s:36:"1_ryNmmrqrxjuSJK1OBYaGKA-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:36:"1_ryNmmrqrxjuSJK1OBYaGKA-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:36:"1_ryNmmrqrxjuSJK1OBYaGKA-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"1_ryNmmrqrxjuSJK1OBYaGKA-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:36:"1_ryNmmrqrxjuSJK1OBYaGKA-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:35:"1_ryNmmrqrxjuSJK1OBYaGKA-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:36:"1_ryNmmrqrxjuSJK1OBYaGKA-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:36:"1_ryNmmrqrxjuSJK1OBYaGKA-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:7.73646073452294569250398126314394176006317138671875;s:5:"bytes";i:25272;s:11:"size_before";i:326661;s:10:"size_after";i:301389;s:4:"time";d:0.74000000000000010214051826551440171897411346435546875;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:8:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:2.45000000000000017763568394002504646778106689453125;s:5:"bytes";i:467;s:11:"size_before";i:19067;s:10:"size_after";i:18600;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:3.87000000000000010658141036401502788066864013671875;s:5:"bytes";i:308;s:11:"size_before";i:7958;s:10:"size_after";i:7650;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:2.7400000000000002131628207280300557613372802734375;s:5:"bytes";i:2002;s:11:"size_before";i:73013;s:10:"size_after";i:71011;s:4:"time";d:0.1499999999999999944488848768742172978818416595458984375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:20.67999999999999971578290569595992565155029296875;s:5:"bytes";i:16334;s:11:"size_before";i:78966;s:10:"size_after";i:62632;s:4:"time";d:0.179999999999999993338661852249060757458209991455078125;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:5.21999999999999975131004248396493494510650634765625;s:5:"bytes";i:3446;s:11:"size_before";i:66076;s:10:"size_after";i:62630;s:4:"time";d:0.179999999999999993338661852249060757458209991455078125;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:4.67999999999999971578290569595992565155029296875;s:5:"bytes";i:260;s:11:"size_before";i:5554;s:10:"size_after";i:5294;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:2.70999999999999996447286321199499070644378662109375;s:5:"bytes";i:669;s:11:"size_before";i:24664;s:10:"size_after";i:23995;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:3.479999999999999982236431605997495353221893310546875;s:5:"bytes";i:1786;s:11:"size_before";i:51363;s:10:"size_after";i:49577;s:4:"time";d:0.13000000000000000444089209850062616169452667236328125;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>AWS Sagemaker</title>
		<link>https://www.pyscoop.com/machine-learning-for-beginners-with-amazon-sagemaker-part-2/screen-shot-2020-05-04-at-5-52-32-pm/</link>
		<pubDate>Mon, 04 May 2020 13:55:18 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/03/Screen-Shot-2020-05-04-at-5.52.32-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[AWS Sagemaker Pyscoop.com]]></content:encoded>
		<excerpt:encoded><![CDATA[AWS Sagemaker]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 13:55:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 13:55:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-05-04-at-5-52-32-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>86</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/03/Screen-Shot-2020-05-04-at-5.52.32-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[AWS Sagemaker]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/03/Screen-Shot-2020-05-04-at-5.52.32-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:48:"2020/03/Screen-Shot-2020-05-04-at-5.52.32-PM.png";s:5:"sizes";a:8:{s:6:"medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-5.52.32-PM-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-5.52.32-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-5.52.32-PM-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-5.52.32-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-5.52.32-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:47:"Screen-Shot-2020-05-04-at-5.52.32-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-5.52.32-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-04-at-5.52.32-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:0.0820326747668848332839530712590203620493412017822265625;s:5:"bytes";i:605;s:11:"size_before";i:737511;s:10:"size_after";i:736906;s:4:"time";d:1.350000000000000088817841970012523233890533447265625;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:8:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:32876;s:10:"size_after";i:32876;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:20978;s:10:"size_after";i:20978;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:151124;s:10:"size_after";i:151124;s:4:"time";d:0.320000000000000006661338147750939242541790008544921875;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:197210;s:10:"size_after";i:197210;s:4:"time";d:0.289999999999999980015985556747182272374629974365234375;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:181190;s:10:"size_after";i:181190;s:4:"time";d:0.340000000000000024424906541753443889319896697998046875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:7.7400000000000002131628207280300557613372802734375;s:5:"bytes";i:605;s:11:"size_before";i:7813;s:10:"size_after";i:7208;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:44494;s:10:"size_after";i:44494;s:4:"time";d:0.1000000000000000055511151231257827021181583404541015625;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:101826;s:10:"size_after";i:101826;s:4:"time";d:0.190000000000000002220446049250313080847263336181640625;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>notebook</title>
		<link>https://www.pyscoop.com/machine-learning-for-beginners-with-amazon-sagemaker/notebook/</link>
		<pubDate>Mon, 04 May 2020 14:00:26 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/notebook.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 14:00:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 14:00:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[notebook]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>80</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/notebook.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/notebook.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1904;s:6:"height";i:1640;s:4:"file";s:20:"2020/05/notebook.png";s:5:"sizes";a:10:{s:6:"medium";a:4:{s:4:"file";s:20:"notebook-300x258.png";s:5:"width";i:300;s:6:"height";i:258;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"notebook-1024x882.png";s:5:"width";i:1024;s:6:"height";i:882;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"notebook-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"notebook-768x662.png";s:5:"width";i:768;s:6:"height";i:662;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:22:"notebook-1536x1323.png";s:5:"width";i:1536;s:6:"height";i:1323;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"notebook-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:20:"notebook-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:19:"notebook-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:20:"notebook-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:20:"notebook-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:24.9401421472165765180761809460818767547607421875;s:5:"bytes";i:184787;s:11:"size_before";i:740922;s:10:"size_after";i:556135;s:4:"time";d:2.359999999999999875655021241982467472553253173828125;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:10:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:22.28999999999999914734871708787977695465087890625;s:5:"bytes";i:5331;s:11:"size_before";i:23912;s:10:"size_after";i:18581;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:25.32000000000000028421709430404007434844970703125;s:5:"bytes";i:37652;s:11:"size_before";i:148706;s:10:"size_after";i:111054;s:4:"time";d:0.39000000000000001332267629550187848508358001708984375;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:17.82000000000000028421709430404007434844970703125;s:5:"bytes";i:1583;s:11:"size_before";i:8882;s:10:"size_after";i:7299;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:26.059999999999998721023075631819665431976318359375;s:5:"bytes";i:25844;s:11:"size_before";i:99166;s:10:"size_after";i:73322;s:4:"time";d:0.2099999999999999922284388276239042170345783233642578125;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:24.699999999999999289457264239899814128875732421875;s:5:"bytes";i:63709;s:11:"size_before";i:257893;s:10:"size_after";i:194184;s:4:"time";d:0.84999999999999997779553950749686919152736663818359375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:25.28999999999999914734871708787977695465087890625;s:5:"bytes";i:18155;s:11:"size_before";i:71796;s:10:"size_after";i:53641;s:4:"time";d:0.2399999999999999911182158029987476766109466552734375;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:24.57000000000000028421709430404007434844970703125;s:5:"bytes";i:15492;s:11:"size_before";i:63047;s:10:"size_after";i:47555;s:4:"time";d:0.299999999999999988897769753748434595763683319091796875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:17.879999999999999005240169935859739780426025390625;s:5:"bytes";i:774;s:11:"size_before";i:4330;s:10:"size_after";i:3556;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:25.940000000000001278976924368180334568023681640625;s:5:"bytes";i:5217;s:11:"size_before";i:20115;s:10:"size_after";i:14898;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:25.6099999999999994315658113919198513031005859375;s:5:"bytes";i:11030;s:11:"size_before";i:43075;s:10:"size_after";i:32045;s:4:"time";d:0.1700000000000000122124532708767219446599483489990234375;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ml-flow</title>
		<link>https://www.pyscoop.com/machine-learning-for-beginners-with-amazon-sagemaker/ml-flow/</link>
		<pubDate>Mon, 04 May 2020 14:06:24 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/02/ml-flow.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 14:06:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 14:06:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ml-flow]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>80</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/02/ml-flow.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/02/ml-flow.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1240;s:6:"height";i:816;s:4:"file";s:19:"2020/02/ml-flow.png";s:5:"sizes";a:9:{s:6:"medium";a:4:{s:4:"file";s:19:"ml-flow-300x197.png";s:5:"width";i:300;s:6:"height";i:197;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"ml-flow-1024x674.png";s:5:"width";i:1024;s:6:"height";i:674;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"ml-flow-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"ml-flow-768x505.png";s:5:"width";i:768;s:6:"height";i:505;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"ml-flow-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:19:"ml-flow-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:18:"ml-flow-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:19:"ml-flow-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:19:"ml-flow-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:5.47135419289217406202396887238137423992156982421875;s:5:"bytes";i:21732;s:11:"size_before";i:397196;s:10:"size_after";i:375464;s:4:"time";d:1.710000000000000408562073062057606875896453857421875;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:9:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:10.7200000000000006394884621840901672840118408203125;s:5:"bytes";i:1761;s:11:"size_before";i:16421;s:10:"size_after";i:14660;s:4:"time";d:0.1000000000000000055511151231257827021181583404541015625;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:2.100000000000000088817841970012523233890533447265625;s:5:"bytes";i:1974;s:11:"size_before";i:94204;s:10:"size_after";i:92230;s:4:"time";d:0.460000000000000019984014443252817727625370025634765625;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:7.12000000000000010658141036401502788066864013671875;s:5:"bytes";i:664;s:11:"size_before";i:9322;s:10:"size_after";i:8658;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:5.5999999999999996447286321199499070644378662109375;s:5:"bytes";i:3512;s:11:"size_before";i:62707;s:10:"size_after";i:59195;s:4:"time";d:0.2800000000000000266453525910037569701671600341796875;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:5.019999999999999573674358543939888477325439453125;s:5:"bytes";i:3628;s:11:"size_before";i:72302;s:10:"size_after";i:68674;s:4:"time";d:0.299999999999999988897769753748434595763683319091796875;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:5.62999999999999989341858963598497211933135986328125;s:5:"bytes";i:4054;s:11:"size_before";i:71975;s:10:"size_after";i:67921;s:4:"time";d:0.299999999999999988897769753748434595763683319091796875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:8.019999999999999573674358543939888477325439453125;s:5:"bytes";i:372;s:11:"size_before";i:4638;s:10:"size_after";i:4266;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:9.2400000000000002131628207280300557613372802734375;s:5:"bytes";i:1975;s:11:"size_before";i:21385;s:10:"size_after";i:19410;s:4:"time";d:0.08000000000000000166533453693773481063544750213623046875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:8.57000000000000028421709430404007434844970703125;s:5:"bytes";i:3792;s:11:"size_before";i:44242;s:10:"size_after";i:40450;s:4:"time";d:0.13000000000000000444089209850062616169452667236328125;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Screen Shot 2020-05-05 at 5.48.37 PM</title>
		<link>https://www.pyscoop.com/screen-shot-2020-05-05-at-5-48-37-pm/</link>
		<pubDate>Tue, 05 May 2020 13:50:23 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/Screen-Shot-2020-05-05-at-5.48.37-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date><![CDATA[2020-05-05 13:50:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-05 13:50:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-05-05-at-5-48-37-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/Screen-Shot-2020-05-05-at-5.48.37-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/Screen-Shot-2020-05-05-at-5.48.37-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1190;s:6:"height";i:1436;s:4:"file";s:48:"2020/05/Screen-Shot-2020-05-05-at-5.48.37-PM.png";s:5:"sizes";a:10:{s:6:"medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-05-at-5.48.37-PM-249x300.png";s:5:"width";i:249;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-05-at-5.48.37-PM-849x1024.png";s:5:"width";i:849;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-05-at-5.48.37-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-05-at-5.48.37-PM-768x927.png";s:5:"width";i:768;s:6:"height";i:927;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-05-at-5.48.37-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-05-at-5.48.37-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:47:"Screen-Shot-2020-05-05-at-5.48.37-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-05-at-5.48.37-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-05-at-5.48.37-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}s:29:"jetpack-portfolio-admin-thumb";a:4:{s:4:"file";s:46:"Screen-Shot-2020-05-05-at-5.48.37-PM-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:0.09129829657196454617551495402949512936174869537353515625;s:5:"bytes";i:1207;s:11:"size_before";i:1322040;s:10:"size_after";i:1320833;s:4:"time";d:4.31999999999999939603867460391484200954437255859375;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:10:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:57713;s:10:"size_after";i:57713;s:4:"time";d:0.1499999999999999944488848768742172978818416595458984375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:371435;s:10:"size_after";i:371435;s:4:"time";d:1.270000000000000017763568394002504646778106689453125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:3.609999999999999875655021241982467472553253173828125;s:5:"bytes";i:763;s:11:"size_before";i:21144;s:10:"size_after";i:20381;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:322385;s:10:"size_after";i:322385;s:4:"time";d:0.810000000000000053290705182007513940334320068359375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:190820;s:10:"size_after";i:190820;s:4:"time";d:0.75;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:174319;s:10:"size_after";i:174319;s:4:"time";d:0.460000000000000019984014443252817727625370025634765625;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:4.1500000000000003552713678800500929355621337890625;s:5:"bytes";i:444;s:11:"size_before";i:10706;s:10:"size_after";i:10262;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:55295;s:10:"size_after";i:55295;s:4:"time";d:0.320000000000000006661338147750939242541790008544921875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:114780;s:10:"size_after";i:114780;s:4:"time";d:0.4899999999999999911182158029987476766109466552734375;}s:29:"jetpack-portfolio-admin-thumb";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:3443;s:10:"size_after";i:3443;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>AWS Sagemaker pyscoop</title>
		<link>https://www.pyscoop.com/ml1/</link>
		<pubDate>Wed, 06 May 2020 19:04:48 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/ml1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[AWS Sagemaker pyscoop]]></content:encoded>
		<excerpt:encoded><![CDATA[AWS Sagemaker pyscoop]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date><![CDATA[2020-05-06 19:04:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-06 19:04:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ml1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/ml1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/ml1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:15:"2020/05/ml1.jpg";s:5:"sizes";a:9:{s:6:"medium";a:4:{s:4:"file";s:15:"ml1-300x194.jpg";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"ml1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:15:"ml1-768x497.jpg";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"ml1-850x550.jpg";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:15:"ml1-850x500.jpg";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:10:"image/jpeg";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:14:"ml1-120x80.jpg";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:10:"image/jpeg";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:15:"ml1-360x230.jpg";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:10:"image/jpeg";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:15:"ml1-600x380.jpg";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:10:"image/jpeg";}s:29:"jetpack-portfolio-admin-thumb";a:4:{s:4:"file";s:13:"ml1-50x50.jpg";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[AWS Sagemaker pyscoop]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:1.000275938189845614800788098364137113094329833984375;s:5:"bytes";i:2610;s:11:"size_before";i:260928;s:10:"size_after";i:258318;s:4:"time";d:0.2200000000000000011102230246251565404236316680908203125;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:9:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:2.29000000000000003552713678800500929355621337890625;s:5:"bytes";i:326;s:11:"size_before";i:14210;s:10:"size_after";i:13884;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:0.64000000000000001332267629550187848508358001708984375;s:5:"bytes";i:41;s:11:"size_before";i:6393;s:10:"size_after";i:6352;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:0.83999999999999996891375531049561686813831329345703125;s:5:"bytes";i:459;s:11:"size_before";i:54754;s:10:"size_after";i:54295;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:0.2200000000000000011102230246251565404236316680908203125;s:5:"bytes";i:139;s:11:"size_before";i:62814;s:10:"size_after";i:62675;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:1.0300000000000000266453525910037569701671600341796875;s:5:"bytes";i:633;s:11:"size_before";i:61641;s:10:"size_after";i:61008;s:4:"time";d:0.08000000000000000166533453693773481063544750213623046875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:3436;s:10:"size_after";i:3436;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:2.45000000000000017763568394002504646778106689453125;s:5:"bytes";i:448;s:11:"size_before";i:18310;s:10:"size_after";i:17862;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:1.479999999999999982236431605997495353221893310546875;s:5:"bytes";i:564;s:11:"size_before";i:38028;s:10:"size_after";i:37464;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:29:"jetpack-portfolio-admin-thumb";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:1342;s:10:"size_after";i:1342;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>AWS Sagemaker pyscoop</title>
		<link>https://www.pyscoop.com/ml2/</link>
		<pubDate>Wed, 06 May 2020 19:07:22 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/ml2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[AWS Sagemaker pyscoop]]></content:encoded>
		<excerpt:encoded><![CDATA[AWS Sagemaker pyscoop]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2020-05-06 19:07:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-06 19:07:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ml2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/ml2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/ml2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:15:"2020/05/ml2.jpg";s:5:"sizes";a:9:{s:6:"medium";a:4:{s:4:"file";s:15:"ml2-300x194.jpg";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"ml2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:15:"ml2-768x497.jpg";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"ml2-850x550.jpg";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:15:"ml2-850x500.jpg";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:10:"image/jpeg";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:14:"ml2-120x80.jpg";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:10:"image/jpeg";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:15:"ml2-360x230.jpg";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:10:"image/jpeg";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:15:"ml2-600x380.jpg";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:10:"image/jpeg";}s:29:"jetpack-portfolio-admin-thumb";a:4:{s:4:"file";s:13:"ml2-50x50.jpg";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[AWS Sagemaker pyscoop]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:0.055724930689239109138366501383643480949103832244873046875;s:5:"bytes";i:121;s:11:"size_before";i:217138;s:10:"size_after";i:217017;s:4:"time";d:0.1700000000000000122124532708767219446599483489990234375;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:9:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:10957;s:10:"size_after";i:10957;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:5630;s:10:"size_after";i:5630;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:0.01000000000000000020816681711721685132943093776702880859375;s:5:"bytes";i:6;s:11:"size_before";i:45359;s:10:"size_after";i:45353;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:54165;s:10:"size_after";i:54165;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:0.1499999999999999944488848768742172978818416595458984375;s:5:"bytes";i:81;s:11:"size_before";i:52280;s:10:"size_after";i:52199;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:2858;s:10:"size_after";i:2858;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:0.0899999999999999966693309261245303787291049957275390625;s:5:"bytes";i:13;s:11:"size_before";i:13971;s:10:"size_after";i:13958;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:0.070000000000000006661338147750939242541790008544921875;s:5:"bytes";i:21;s:11:"size_before";i:30576;s:10:"size_after";i:30555;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:29:"jetpack-portfolio-admin-thumb";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:1342;s:10:"size_after";i:1342;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Searching</title>
		<link>https://www.pyscoop.com/searching-algorithms-implementation-in-python/screen-shot-2020-05-06-at-11-27-18-pm/</link>
		<pubDate>Wed, 06 May 2020 19:30:26 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2019/03/Screen-Shot-2020-05-06-at-11.27.18-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[Searching]]></content:encoded>
		<excerpt:encoded><![CDATA[Searching]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date><![CDATA[2020-05-06 19:30:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-06 19:30:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-05-06-at-11-27-18-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>111</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2019/03/Screen-Shot-2020-05-06-at-11.27.18-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/Screen-Shot-2020-05-06-at-11.27.18-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:49:"2019/03/Screen-Shot-2020-05-06-at-11.27.18-PM.png";s:5:"sizes";a:9:{s:6:"medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-06-at-11.27.18-PM-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-06-at-11.27.18-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-06-at-11.27.18-PM-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-06-at-11.27.18-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-06-at-11.27.18-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-06-at-11.27.18-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-06-at-11.27.18-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-06-at-11.27.18-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}s:29:"jetpack-portfolio-admin-thumb";a:4:{s:4:"file";s:47:"Screen-Shot-2020-05-06-at-11.27.18-PM-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Searching]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:2112903;s:10:"size_after";i:2112903;s:4:"time";d:1.9900000000000002131628207280300557613372802734375;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:9:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:93222;s:10:"size_after";i:93222;s:4:"time";d:0.059999999999999997779553950749686919152736663818359375;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:39841;s:10:"size_after";i:39841;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:451952;s:10:"size_after";i:451952;s:4:"time";d:0.330000000000000015543122344752191565930843353271484375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:567838;s:10:"size_after";i:567838;s:4:"time";d:0.39000000000000001332267629550187848508358001708984375;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:512350;s:10:"size_after";i:512350;s:4:"time";d:0.520000000000000017763568394002504646778106689453125;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:19367;s:10:"size_after";i:19367;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:126199;s:10:"size_after";i:126199;s:4:"time";d:0.1000000000000000055511151231257827021181583404541015625;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:296227;s:10:"size_after";i:296227;s:4:"time";d:0.54000000000000003552713678800500929355621337890625;}s:29:"jetpack-portfolio-admin-thumb";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:5907;s:10:"size_after";i:5907;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>django security</title>
		<link>https://www.pyscoop.com/security-in-the-django-application/download/</link>
		<pubDate>Sun, 17 May 2020 18:58:18 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/download.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[django security]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date><![CDATA[2020-05-17 18:58:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-17 18:58:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[download]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>219</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/download.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[django security]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/download.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:20:"2020/05/download.png";s:5:"sizes";a:10:{s:6:"medium";a:4:{s:4:"file";s:20:"download-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"download-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"download-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:20:"download-640x414.png";s:5:"width";i:640;s:6:"height";i:414;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"download-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:20:"download-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:19:"download-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:20:"download-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:20:"download-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}s:29:"jetpack-portfolio-admin-thumb";a:4:{s:4:"file";s:18:"download-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:3113107;s:10:"size_after";i:3113107;s:4:"time";d:1.5000000000000002220446049250313080847263336181640625;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:10:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:115703;s:10:"size_after";i:115703;s:4:"time";d:0.059999999999999997779553950749686919152736663818359375;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:49115;s:10:"size_after";i:49115;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:573655;s:10:"size_after";i:573655;s:4:"time";d:0.2600000000000000088817841970012523233890533447265625;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:423136;s:10:"size_after";i:423136;s:4:"time";d:0.1700000000000000122124532708767219446599483489990234375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:718614;s:10:"size_after";i:718614;s:4:"time";d:0.429999999999999993338661852249060757458209991455078125;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:669732;s:10:"size_after";i:669732;s:4:"time";d:0.320000000000000006661338147750939242541790008544921875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:23685;s:10:"size_after";i:23685;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:157775;s:10:"size_after";i:157775;s:4:"time";d:0.08000000000000000166533453693773481063544750213623046875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:374786;s:10:"size_after";i:374786;s:4:"time";d:0.14000000000000001332267629550187848508358001708984375;}s:29:"jetpack-portfolio-admin-thumb";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:6906;s:10:"size_after";i:6906;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-icon-1.png</title>
		<link>https://www.pyscoop.com/cropped-icon-1-png/</link>
		<pubDate>Fri, 22 May 2020 15:01:46 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/cropped-icon-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/cropped-icon-1.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>352</wp:post_id>
		<wp:post_date><![CDATA[2020-05-22 15:01:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-22 15:01:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-icon-1-png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/cropped-icon-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/cropped-icon-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:26:"2020/05/cropped-icon-1.png";s:5:"sizes";a:11:{s:6:"medium";a:4:{s:4:"file";s:26:"cropped-icon-1-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:26:"cropped-icon-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:26:"cropped-icon-1-512x500.png";s:5:"width";i:512;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:25:"cropped-icon-1-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:26:"cropped-icon-1-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:26:"cropped-icon-1-512x380.png";s:5:"width";i:512;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}s:29:"jetpack-portfolio-admin-thumb";a:4:{s:4:"file";s:24:"cropped-icon-1-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-270";a:4:{s:4:"file";s:26:"cropped-icon-1-270x270.png";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-192";a:4:{s:4:"file";s:26:"cropped-icon-1-192x192.png";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-180";a:4:{s:4:"file";s:26:"cropped-icon-1-180x180.png";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:12:"site_icon-32";a:4:{s:4:"file";s:24:"cropped-icon-1-32x32.png";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:1.82367211223641589867838774807751178741455078125;s:5:"bytes";i:1075;s:11:"size_before";i:58947;s:10:"size_after";i:57872;s:4:"time";d:0.5500000000000000444089209850062616169452667236328125;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:11:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:2.109999999999999875655021241982467472553253173828125;s:5:"bytes";i:156;s:11:"size_before";i:7401;s:10:"size_after";i:7245;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:1.5800000000000000710542735760100185871124267578125;s:5:"bytes";i:35;s:11:"size_before";i:2221;s:10:"size_after";i:2186;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:12144;s:10:"size_after";i:12144;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:0.4899999999999999911182158029987476766109466552734375;s:5:"bytes";i:9;s:11:"size_before";i:1825;s:10:"size_after";i:1816;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:8577;s:10:"size_after";i:8577;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:11606;s:10:"size_after";i:11606;s:4:"time";d:0.13000000000000000444089209850062616169452667236328125;}s:29:"jetpack-portfolio-admin-thumb";O:8:"stdClass":5:{s:7:"percent";d:2.399999999999999911182158029987476766109466552734375;s:5:"bytes";i:23;s:11:"size_before";i:958;s:10:"size_after";i:935;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:13:"site_icon-270";O:8:"stdClass":5:{s:7:"percent";d:5.70000000000000017763568394002504646778106689453125;s:5:"bytes";i:375;s:11:"size_before";i:6580;s:10:"size_after";i:6205;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:13:"site_icon-192";O:8:"stdClass":5:{s:7:"percent";d:9.67999999999999971578290569595992565155029296875;s:5:"bytes";i:432;s:11:"size_before";i:4463;s:10:"size_after";i:4031;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:13:"site_icon-180";O:8:"stdClass":5:{s:7:"percent";d:1.310000000000000053290705182007513940334320068359375;s:5:"bytes";i:34;s:11:"size_before";i:2594;s:10:"size_after";i:2560;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"site_icon-32";O:8:"stdClass":5:{s:7:"percent";d:1.899999999999999911182158029987476766109466552734375;s:5:"bytes";i:11;s:11:"size_before";i:578;s:10:"size_after";i:567;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1.png</title>
		<link>https://www.pyscoop.com/cropped-screen-shot-2020-05-23-at-3-16-38-pm-1-png/</link>
		<pubDate>Sat, 23 May 2020 19:16:58 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com/wp-content/uploads/2020/05/cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[https://pyscoop.com/wp-content/uploads/2020/05/cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date><![CDATA[2020-05-23 19:16:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-23 19:16:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-screen-shot-2020-05-23-at-3-16-38-pm-1-png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:20.42495500338935698891873471438884735107421875;s:5:"bytes";i:8738;s:11:"size_before";i:42781;s:10:"size_after";i:34043;s:4:"time";d:0.5100000000000000088817841970012523233890533447265625;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:7:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:31.1700000000000017053025658242404460906982421875;s:5:"bytes";i:2416;s:11:"size_before";i:7751;s:10:"size_after";i:5335;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:6.92999999999999971578290569595992565155029296875;s:5:"bytes";i:154;s:11:"size_before";i:2222;s:10:"size_after";i:2068;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:25.4200000000000017053025658242404460906982421875;s:5:"bytes";i:4514;s:11:"size_before";i:17758;s:10:"size_after";i:13244;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:23.440000000000001278976924368180334568023681640625;s:5:"bytes";i:1019;s:11:"size_before";i:4348;s:10:"size_after";i:3329;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:6.37999999999999989341858963598497211933135986328125;s:5:"bytes";i:236;s:11:"size_before";i:3700;s:10:"size_after";i:3464;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:7.05999999999999960920149533194489777088165283203125;s:5:"bytes";i:399;s:11:"size_before";i:5652;s:10:"size_after";i:5253;s:4:"time";d:0.270000000000000017763568394002504646778106689453125;}s:29:"jetpack-portfolio-admin-thumb";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:1350;s:10:"size_after";i:1350;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:761;s:6:"height";i:113;s:4:"file";s:58:"2020/05/cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1.png";s:5:"sizes";a:7:{s:6:"medium";a:4:{s:4:"file";s:57:"cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1-300x45.png";s:5:"width";i:300;s:6:"height";i:45;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:58:"cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1-150x113.png";s:5:"width";i:150;s:6:"height";i:113;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:57:"cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1-640x95.png";s:5:"width";i:640;s:6:"height";i:95;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:57:"cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:58:"cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1-360x113.png";s:5:"width";i:360;s:6:"height";i:113;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:58:"cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1-600x113.png";s:5:"width";i:600;s:6:"height";i:113;s:9:"mime-type";s:9:"image/png";}s:29:"jetpack-portfolio-admin-thumb";a:4:{s:4:"file";s:56:"cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1-50x50.png";s:5:"width";i:50;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/cropped-Screen-Shot-2020-05-23-at-3.16.38-PM-1.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Python Developer Jobs</title>
		<link>https://www.pyscoop.com/python-jobs/</link>
		<pubDate>Tue, 28 Apr 2020 12:53:41 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">http:/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":5} -->
<h5 id="python-jobs-in-usa">Python Jobs in USA</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://www.dice.com/jobs?q=python&amp;location=United%20States" target="_blank" rel="noreferrer noopener">Dice</a></li><li><a href="https://www.glassdoor.com/Job/jobs.htm?typedKeyword=Python&amp;sc.keyword=Python&amp;locT=N&amp;locId=1" target="_blank" rel="noreferrer noopener">Glassdoor</a></li><li><a href="https://www.linkedin.com/jobs/search/?keywords=python&amp;location=United%20States" target="_blank" rel="noreferrer noopener">Linkedin</a></li><li><a href="https://relocate.me/search/python/united-states" target="_blank" rel="noreferrer noopener">Relocate.me</a></li><li><a href="https://stackoverflow.com/jobs?q=python&amp;l=USA&amp;d=100&amp;tl=python" target="_blank" rel="noreferrer noopener">Stackoverflow</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5} -->
<h5 id="python-jobs-in-europe">Python Jobs in Europe</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://www.totaljobs.com/jobs/python/in-europe" target="_blank" rel="noreferrer noopener">Totaljobs</a></li><li><a href="https://relocateme.eu/jobs/tech-python/" target="_blank" rel="noreferrer noopener">relocateme.eu</a></li><li><a href="https://www.eurotechjobs.com/job_search/keyword/python_developer" target="_blank" rel="noreferrer noopener">eurotechjobs</a></li><li>Germany<ul><li><a href="https://www.glassdoor.com/Job/jobs.htm?typedKeyword=Python&amp;sc.keyword=Python&amp;locT=N&amp;locId=96" target="_blank" rel="noreferrer noopener">Glassdoor</a></li><li><a href="https://www.linkedin.com/jobs/search/?keywords=python&amp;location=Germany" target="_blank" rel="noreferrer noopener">Linkedin</a></li><li><a href="https://stackoverflow.com/jobs?q=python&amp;l=Germany&amp;d=100&amp;tl=python" target="_blank" rel="noreferrer noopener">Stackoverflow</a></li></ul></li><li>Netherlands<ul><li><a href="https://www.glassdoor.com/Job/jobs.htm?typedKeyword=Python&amp;sc.keyword=Python&amp;locT=N&amp;locId=178" target="_blank" rel="noreferrer noopener">Glassdoor</a></li><li><a href="https://www.linkedin.com/jobs/search/?keywords=python&amp;location=Netherlands" target="_blank" rel="noreferrer noopener">Linkedin</a></li><li><a href="https://relocate.me/search/python/the-netherlands" target="_blank" rel="noreferrer noopener">Relocate.me</a></li><li><a href="https://stackoverflow.com/jobs?q=python&amp;l=Netherlands&amp;d=100&amp;tl=python" target="_blank" rel="noreferrer noopener">Stackoverflow</a></li></ul></li><li>UK<ul><li><a href="https://www.glassdoor.com/Job/jobs.htm?typedKeyword=Python&amp;sc.keyword=Python&amp;locT=N&amp;locId=2" target="_blank" rel="noreferrer noopener">Glassdoor</a></li><li><a href="https://www.linkedin.com/jobs/search/?keywords=python&amp;location=United%20Kingdom" target="_blank" rel="noreferrer noopener">Linkedin</a></li><li><a href="https://stackoverflow.com/jobs?q=python&amp;l=UK&amp;d=100&amp;tl=python" target="_blank" rel="noreferrer noopener">Stackoverflow</a></li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5} -->
<h5 id="python-jobs-in-uae">Python Jobs in UAE</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://www.glassdoor.com/Job/jobs.htm?typedKeyword=Python&amp;sc.keyword=Python&amp;locT=N&amp;locId=6" target="_blank" rel="noreferrer noopener">Glassdoor</a></li><li><a href="https://www.linkedin.com/jobs/search/?keywords=python&amp;location=United%20Arab%20Emirates" target="_blank" rel="noreferrer noopener">Linkedin</a></li><li><a href="https://stackoverflow.com/jobs?q=python&amp;l=United+Arab+Emirates&amp;tl=python" target="_blank" rel="noreferrer noopener">Stackoverflow</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5} -->
<h5 id="python-jobs-in-india">Python Jobs in India</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://www.dice.com/jobs?q=python&amp;location=India" target="_blank" rel="noreferrer noopener">Dice</a></li><li><a href="https://www.glassdoor.com/Job/jobs.htm?typedKeyword=Python&amp;sc.keyword=Python&amp;locT=N&amp;locId=115" target="_blank" rel="noreferrer noopener">Glassdoor</a></li><li><a href="https://www.linkedin.com/jobs/search/?keywords=python&amp;location=India" target="_blank" rel="noreferrer noopener">Linkedin</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5} -->
<h5 id="remote-python-jobs">Remote Python Jobs</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://findwork.dev/?search=category:python" target="_blank" rel="noreferrer noopener">Findwork.dev</a></li><li><a href="https://meerkad.com/remote-python-jobs" target="_blank" rel="noreferrer noopener">Meerkad</a></li><li><a href="https://www.remote.io/remote-jobs?s=python" target="_blank" rel="noreferrer noopener">Remote.io</a></li><li><a href="https://www.remotelyawesomejobs.com/remote-python-jobs" target="_blank" rel="noreferrer noopener">Remotelyawesomejobs</a></li><li><a href="https://www.remotepython.com/" target="_blank" rel="noreferrer noopener">RemotePython</a></li><li><a href="https://stackoverflow.com/jobs?q=python&amp;r=true&amp;tl=python" target="_blank" rel="noreferrer noopener">Stackoverflow</a></li><li><a href="https://weworkremotely.com/remote-jobs/search?term=python" target="_blank" rel="noreferrer noopener">Weworkremotely</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5} -->
<h5 id="other-python-job-portals">Other Python Job Portals</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://angel.co/jobs" target="_blank" rel="noreferrer noopener">angel.co</a></li><li><a href="https://www.python.org/jobs/" target="_blank" rel="noreferrer noopener">python.org</a></li><li><a href="https://www.djangoproject.com/community/jobs/" target="_blank" rel="noreferrer noopener">djangoproject.com/jobs</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Hope This helps you find a job that you are looking for :)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let me know in the comment how can I improve this list and if you want me to add any other location on this list.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 12:53:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 12:53:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python-jobs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"bfc62710165ed7b51223b165689d40a3";a:2:{s:7:"expires";i:1590302871;s:7:"payload";a:4:{i:0;a:1:{s:2:"id";i:95;}i:1;a:1:{s:2:"id";i:3;}i:2;a:1:{s:2:"id";i:93;}i:3;a:1:{s:2:"id";i:98;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Privacy Policy</title>
		<link>https://www.pyscoop.com/privacy-policy/</link>
		<pubDate>Tue, 28 Apr 2020 12:53:41 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">http:/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>What personal data we collect and why we collect it</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Comments</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor’s IP address and browser user agent string to help spam detection.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An anonymized string created from your email address (also called a hash) may be provided to the Gravatar service to see if you are using it. The Gravatar service privacy policy is available here: https://automattic.com/privacy/. After approval of your comment, your profile picture is visible to the public in the context of your comment.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Media</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you upload images to the website, you should avoid uploading images with embedded location data (EXIF GPS) included. Visitors to the website can download and extract any location data from images on the website.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Contact forms</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Cookies</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you leave a comment on our site you may opt-in to saving your name, email address and website in cookies. These are for your convenience so that you do not have to fill in your details again when you leave another comment. These cookies will last for one year.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you have an account and you log in to this site, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you log in, we will also set up several cookies to save your login information and your screen display choices. Login cookies last for two days, and screen options cookies last for a year. If you select "Remember Me", your login will persist for two weeks. If you log out of your account, the login cookies will be removed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you edit or publish an article, an additional cookie will be saved in your browser. This cookie includes no personal data and simply indicates the post ID of the article you just edited. It expires after 1 day.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Embedded content from other websites</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Analytics</h3>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2>Who we share your data with</h2>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2>How long we retain your data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you leave a comment, the comment and its metadata are retained indefinitely. This is so we can recognize and approve any follow-up comments automatically instead of holding them in a moderation queue.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For users that register on our website (if any), we also store the personal information they provide in their user profile. All users can see, edit, or delete their personal information at any time (except they cannot change their username). Website administrators can also see and edit that information.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What rights you have over your data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you have an account on this site, or have left comments, you can request to receive an exported file of the personal data we hold about you, including any data you have provided to us. You can also request that we erase any personal data we hold about you. This does not include any data we are obliged to keep for administrative, legal, or security purposes.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Where we send your data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Visitor comments may be checked through an automated spam detection service.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 12:53:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 12:53:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[privacy-policy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"bfc62710165ed7b51223b165689d40a3";a:2:{s:7:"expires";i:1590302871;s:7:"payload";a:4:{i:0;a:1:{s:2:"id";i:93;}i:1;a:1:{s:2:"id";i:2;}i:2;a:1:{s:2:"id";i:95;}i:3;a:1:{s:2:"id";i:98;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://www.pyscoop.com/63/</link>
		<pubDate>Wed, 29 Apr 2020 18:52:38 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//63/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2020-04-29 18:52:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-29 18:52:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[63]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="header-menu"><![CDATA[Header menu]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Home</title>
		<link>https://www.pyscoop.com/home/</link>
		<pubDate>Wed, 29 Apr 2020 18:52:38 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//home/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2020-04-29 18:52:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-29 18:52:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[home]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="header-menu"><![CDATA[Header menu]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://www.pyscoop.com/]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://www.pyscoop.com/100/</link>
		<pubDate>Fri, 01 May 2020 14:18:25 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2020-05-01 14:18:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-01 14:18:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[100]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="header-menu"><![CDATA[Header menu]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[98]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://www.pyscoop.com/101/</link>
		<pubDate>Fri, 01 May 2020 14:18:25 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date><![CDATA[2020-05-01 14:18:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-01 14:18:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[101]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="header-menu"><![CDATA[Header menu]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[95]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>maxwell</title>
		<link>https://www.pyscoop.com/maxwell/</link>
		<pubDate>Fri, 22 May 2020 15:22:13 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/maxwell/</guid>
		<description></description>
		<content:encoded><![CDATA[.site-branding .custom-logo {
    width: 300px;
}

.shareaholic-dis-ad-contains-2 {
	visibility:hidden
}

.shr-recommendations-attribution-container {
	visibility:hidden
}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>359</wp:post_id>
		<wp:post_date><![CDATA[2020-05-22 15:22:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-22 15:22:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[maxwell]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[custom_css]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Screen Shot 2020-05-26 at 11.51.05 AM</title>
		<link>https://www.pyscoop.com/saving-geopoints-using-django-form/screen-shot-2020-05-26-at-11-51-05-am/</link>
		<pubDate>Tue, 26 May 2020 07:52:03 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/Screen-Shot-2020-05-26-at-11.51.05-AM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>407</wp:post_id>
		<wp:post_date><![CDATA[2020-05-26 07:52:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-26 07:52:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-05-26-at-11-51-05-am]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>394</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/Screen-Shot-2020-05-26-at-11.51.05-AM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/Screen-Shot-2020-05-26-at-11.51.05-AM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1082;s:6:"height";i:630;s:4:"file";s:49:"2020/05/Screen-Shot-2020-05-26-at-11.51.05-AM.png";s:5:"sizes";a:10:{s:6:"medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-26-at-11.51.05-AM-300x175.png";s:5:"width";i:300;s:6:"height";i:175;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:50:"Screen-Shot-2020-05-26-at-11.51.05-AM-1024x596.png";s:5:"width";i:1024;s:6:"height";i:596;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-26-at-11.51.05-AM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-26-at-11.51.05-AM-768x447.png";s:5:"width";i:768;s:6:"height";i:447;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-26-at-11.51.05-AM-640x373.png";s:5:"width";i:640;s:6:"height";i:373;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-26-at-11.51.05-AM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-26-at-11.51.05-AM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-26-at-11.51.05-AM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-26-at-11.51.05-AM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-05-26-at-11.51.05-AM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:249811;s:10:"size_after";i:249811;s:4:"time";d:0.13000000000000000444089209850062616169452667236328125;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:10:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:6446;s:10:"size_after";i:6446;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:56060;s:10:"size_after";i:56060;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:4809;s:10:"size_after";i:4809;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:33271;s:10:"size_after";i:33271;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:24094;s:10:"size_after";i:24094;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:47881;s:10:"size_after";i:47881;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:40524;s:10:"size_after";i:40524;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:1710;s:10:"size_after";i:1710;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:10238;s:10:"size_after";i:10238;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:24778;s:10:"size_after";i:24778;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>location point on map</title>
		<link>https://www.pyscoop.com/saving-geopoints-using-django-form/screen-shot-2020-05-26-at-2-00-49-pm/</link>
		<pubDate>Tue, 26 May 2020 10:06:24 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/05/Screen-Shot-2020-05-26-at-2.00.49-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[location point on map]]></excerpt:encoded>
		<wp:post_id>414</wp:post_id>
		<wp:post_date><![CDATA[2020-05-26 10:06:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-26 10:06:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-05-26-at-2-00-49-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>394</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/05/Screen-Shot-2020-05-26-at-2.00.49-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/Screen-Shot-2020-05-26-at-2.00.49-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:48:"2020/05/Screen-Shot-2020-05-26-at-2.00.49-PM.png";s:5:"sizes";a:9:{s:6:"medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-26-at-2.00.49-PM-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-26-at-2.00.49-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-26-at-2.00.49-PM-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-26-at-2.00.49-PM-640x414.png";s:5:"width";i:640;s:6:"height";i:414;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-26-at-2.00.49-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-26-at-2.00.49-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:47:"Screen-Shot-2020-05-26-at-2.00.49-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-26-at-2.00.49-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-05-26-at-2.00.49-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:18.777845595783386301036443910561501979827880859375;s:5:"bytes";i:378103;s:11:"size_before";i:2013559;s:10:"size_after";i:1635456;s:4:"time";d:2.95999999999999996447286321199499070644378662109375;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:9:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:17.9200000000000017053025658242404460906982421875;s:5:"bytes";i:13747;s:11:"size_before";i:76700;s:10:"size_after";i:62953;s:4:"time";d:0.13000000000000000444089209850062616169452667236328125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:14.4000000000000003552713678800500929355621337890625;s:5:"bytes";i:4599;s:11:"size_before";i:31934;s:10:"size_after";i:27335;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:14.3699999999999992184029906638897955417633056640625;s:5:"bytes";i:55038;s:11:"size_before";i:383026;s:10:"size_after";i:327988;s:4:"time";d:0.460000000000000019984014443252817727625370025634765625;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:16.78999999999999914734871708787977695465087890625;s:5:"bytes";i:47694;s:11:"size_before";i:283985;s:10:"size_after";i:236291;s:4:"time";d:0.35999999999999998667732370449812151491641998291015625;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:22.530000000000001136868377216160297393798828125;s:5:"bytes";i:102724;s:11:"size_before";i:455859;s:10:"size_after";i:353135;s:4:"time";d:0.63000000000000000444089209850062616169452667236328125;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:21.71000000000000085265128291212022304534912109375;s:5:"bytes";i:89390;s:11:"size_before";i:411712;s:10:"size_after";i:322322;s:4:"time";d:0.85999999999999998667732370449812151491641998291015625;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:10.839999999999999857891452847979962825775146484375;s:5:"bytes";i:1689;s:11:"size_before";i:15583;s:10:"size_after";i:13894;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:18.719999999999998863131622783839702606201171875;s:5:"bytes";i:19608;s:11:"size_before";i:104722;s:10:"size_after";i:85114;s:4:"time";d:0.14000000000000001332267629550187848508358001708984375;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:17.440000000000001278976924368180334568023681640625;s:5:"bytes";i:43614;s:11:"size_before";i:250038;s:10:"size_after";i:206424;s:4:"time";d:0.309999999999999997779553950749686919152736663818359375;}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[location point on map]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Screen-Shot-2020-06-12-at-10.53.07-AM</title>
		<link>https://www.pyscoop.com/write-json-apis-in-pure-django-for-beginners/screen-shot-2020-06-12-at-10-53-07-am/</link>
		<pubDate>Fri, 12 Jun 2020 06:53:55 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-12-at-10.53.07-AM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>437</wp:post_id>
		<wp:post_date><![CDATA[2020-06-12 06:53:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-12 06:53:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-12-at-10-53-07-am]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>433</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-12-at-10.53.07-AM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:6.58610925992956897090380152803845703601837158203125;s:5:"bytes";i:19469;s:11:"size_before";i:295607;s:10:"size_after";i:276138;s:4:"time";d:1.660000000000000142108547152020037174224853515625;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:11:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:1.229999999999999982236431605997495353221893310546875;s:5:"bytes";i:95;s:11:"size_before";i:7716;s:10:"size_after";i:7621;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:6.589999999999999857891452847979962825775146484375;s:5:"bytes";i:3056;s:11:"size_before";i:46382;s:10:"size_after";i:43326;s:4:"time";d:0.35999999999999998667732370449812151491641998291015625;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:3.20999999999999996447286321199499070644378662109375;s:5:"bytes";i:69;s:11:"size_before";i:2147;s:10:"size_after";i:2078;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:5.28000000000000024868995751603506505489349365234375;s:5:"bytes";i:1641;s:11:"size_before";i:31090;s:10:"size_after";i:29449;s:4:"time";d:0.190000000000000002220446049250313080847263336181640625;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:9.82000000000000028421709430404007434844970703125;s:5:"bytes";i:7869;s:11:"size_before";i:80120;s:10:"size_after";i:72251;s:4:"time";d:0.340000000000000024424906541753443889319896697998046875;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:5.80999999999999960920149533194489777088165283203125;s:5:"bytes";i:1350;s:11:"size_before";i:23240;s:10:"size_after";i:21890;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:6.57000000000000028421709430404007434844970703125;s:5:"bytes";i:2207;s:11:"size_before";i:33572;s:10:"size_after";i:31365;s:4:"time";d:0.1499999999999999944488848768742172978818416595458984375;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:6.96999999999999975131004248396493494510650634765625;s:5:"bytes";i:2608;s:11:"size_before";i:37398;s:10:"size_after";i:34790;s:4:"time";d:0.2200000000000000011102230246251565404236316680908203125;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:1986;s:10:"size_after";i:1986;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:10375;s:10:"size_after";i:10375;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:2.660000000000000142108547152020037174224853515625;s:5:"bytes";i:574;s:11:"size_before";i:21581;s:10:"size_after";i:21007;s:4:"time";d:0.070000000000000006661338147750939242541790008544921875;}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1924;s:6:"height";i:666;s:4:"file";s:49:"2020/06/Screen-Shot-2020-06-12-at-10.53.07-AM.png";s:5:"sizes";a:11:{s:6:"medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-10.53.07-AM-300x104.png";s:5:"width";i:300;s:6:"height";i:104;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-12-at-10.53.07-AM-1024x354.png";s:5:"width";i:1024;s:6:"height";i:354;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-10.53.07-AM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-10.53.07-AM-768x266.png";s:5:"width";i:768;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-12-at-10.53.07-AM-1536x532.png";s:5:"width";i:1536;s:6:"height";i:532;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-10.53.07-AM-640x222.png";s:5:"width";i:640;s:6:"height";i:222;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-10.53.07-AM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-10.53.07-AM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-10.53.07-AM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-10.53.07-AM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-10.53.07-AM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-12-at-10.53.07-AM.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Screen-Shot-2020-06-12-at-2.57.22-PM</title>
		<link>https://www.pyscoop.com/write-json-apis-in-pure-django-for-beginners/screen-shot-2020-06-12-at-2-57-22-pm/</link>
		<pubDate>Fri, 12 Jun 2020 10:57:48 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-12-at-2.57.22-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date><![CDATA[2020-06-12 10:57:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-12 10:57:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-12-at-2-57-22-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>433</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-12-at-2.57.22-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-12-at-2.57.22-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2830;s:6:"height";i:834;s:4:"file";s:48:"2020/06/Screen-Shot-2020-06-12-at-2.57.22-PM.png";s:5:"sizes";a:12:{s:6:"medium";a:4:{s:4:"file";s:47:"Screen-Shot-2020-06-12-at-2.57.22-PM-300x88.png";s:5:"width";i:300;s:6:"height";i:88;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-2.57.22-PM-1024x302.png";s:5:"width";i:1024;s:6:"height";i:302;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-2.57.22-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-2.57.22-PM-768x226.png";s:5:"width";i:768;s:6:"height";i:226;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-2.57.22-PM-1536x453.png";s:5:"width";i:1536;s:6:"height";i:453;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-2.57.22-PM-2048x604.png";s:5:"width";i:2048;s:6:"height";i:604;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-2.57.22-PM-640x189.png";s:5:"width";i:640;s:6:"height";i:189;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-2.57.22-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-2.57.22-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:47:"Screen-Shot-2020-06-12-at-2.57.22-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-2.57.22-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-2.57.22-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:7.75396975510461405889373054378665983676910400390625;s:5:"bytes";i:17218;s:11:"size_before";i:222054;s:10:"size_after";i:204836;s:4:"time";d:1.420000000000000373034936274052597582340240478515625;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:12:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:4458;s:10:"size_after";i:4458;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:7.28000000000000024868995751603506505489349365234375;s:5:"bytes";i:2177;s:11:"size_before";i:29921;s:10:"size_after";i:27744;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:215;s:10:"size_after";i:215;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:4.910000000000000142108547152020037174224853515625;s:5:"bytes";i:939;s:11:"size_before";i:19123;s:10:"size_after";i:18184;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:9.5600000000000004973799150320701301097869873046875;s:5:"bytes";i:5058;s:11:"size_before";i:52935;s:10:"size_after";i:47877;s:4:"time";d:0.2800000000000000266453525910037569701671600341796875;}s:9:"2048x2048";O:8:"stdClass":5:{s:7:"percent";d:10.21000000000000085265128291212022304534912109375;s:5:"bytes";i:7999;s:11:"size_before";i:78314;s:10:"size_after";i:70315;s:4:"time";d:0.320000000000000006661338147750939242541790008544921875;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:6.62999999999999989341858963598497211933135986328125;s:5:"bytes";i:986;s:11:"size_before";i:14867;s:10:"size_after";i:13881;s:4:"time";d:0.070000000000000006661338147750939242541790008544921875;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:6787;s:10:"size_after";i:6787;s:4:"time";d:0.2600000000000000088817841970012523233890533447265625;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:0.70999999999999996447286321199499070644378662109375;s:5:"bytes";i:59;s:11:"size_before";i:8366;s:10:"size_after";i:8307;s:4:"time";d:0.1000000000000000055511151231257827021181583404541015625;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:462;s:10:"size_after";i:462;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:2178;s:10:"size_after";i:2178;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:4428;s:10:"size_after";i:4428;s:4:"time";d:0.08000000000000000166533453693773481063544750213623046875;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Screen-Shot-2020-06-12-at-6.50.43-PM</title>
		<link>https://www.pyscoop.com/screen-shot-2020-06-12-at-6-50-43-pm/</link>
		<pubDate>Fri, 12 Jun 2020 14:51:11 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-12-at-6.50.43-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date><![CDATA[2020-06-12 14:51:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-12 14:51:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-12-at-6-50-43-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-12-at-6.50.43-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-12-at-6.50.43-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2864;s:6:"height";i:1546;s:4:"file";s:48:"2020/06/Screen-Shot-2020-06-12-at-6.50.43-PM.png";s:5:"sizes";a:12:{s:6:"medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-6.50.43-PM-300x162.png";s:5:"width";i:300;s:6:"height";i:162;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-6.50.43-PM-1024x553.png";s:5:"width";i:1024;s:6:"height";i:553;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-6.50.43-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-6.50.43-PM-768x415.png";s:5:"width";i:768;s:6:"height";i:415;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-12-at-6.50.43-PM-1536x829.png";s:5:"width";i:1536;s:6:"height";i:829;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-12-at-6.50.43-PM-2048x1106.png";s:5:"width";i:2048;s:6:"height";i:1106;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-6.50.43-PM-640x345.png";s:5:"width";i:640;s:6:"height";i:345;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-6.50.43-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-6.50.43-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:47:"Screen-Shot-2020-06-12-at-6.50.43-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-6.50.43-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-12-at-6.50.43-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:18.8645054164305037147641996853053569793701171875;s:5:"bytes";i:165417;s:11:"size_before";i:876869;s:10:"size_after";i:711452;s:4:"time";d:3.609999999999999875655021241982467472553253173828125;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:12:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:13.089999999999999857891452847979962825775146484375;s:5:"bytes";i:1967;s:11:"size_before";i:15025;s:10:"size_after";i:13058;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:19.71000000000000085265128291212022304534912109375;s:5:"bytes";i:19326;s:11:"size_before";i:98065;s:10:"size_after";i:78739;s:4:"time";d:0.450000000000000011102230246251565404236316680908203125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:10.550000000000000710542735760100185871124267578125;s:5:"bytes";i:758;s:11:"size_before";i:7185;s:10:"size_after";i:6427;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:19.530000000000001136868377216160297393798828125;s:5:"bytes";i:12358;s:11:"size_before";i:63277;s:10:"size_after";i:50919;s:4:"time";d:0.1700000000000000122124532708767219446599483489990234375;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:19.9200000000000017053025658242404460906982421875;s:5:"bytes";i:34020;s:11:"size_before";i:170752;s:10:"size_after";i:136732;s:4:"time";d:0.70999999999999996447286321199499070644378662109375;}s:9:"2048x2048";O:8:"stdClass":5:{s:7:"percent";d:18.46000000000000085265128291212022304534912109375;s:5:"bytes";i:45528;s:11:"size_before";i:246614;s:10:"size_after";i:201086;s:4:"time";d:1.3400000000000000799360577730112709105014801025390625;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:19.309999999999998721023075631819665431976318359375;s:5:"bytes";i:9272;s:11:"size_before";i:48024;s:10:"size_after";i:38752;s:4:"time";d:0.1499999999999999944488848768742172978818416595458984375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:18.57000000000000028421709430404007434844970703125;s:5:"bytes";i:14857;s:11:"size_before";i:80003;s:10:"size_after";i:65146;s:4:"time";d:0.309999999999999997779553950749686919152736663818359375;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:19.980000000000000426325641456060111522674560546875;s:5:"bytes";i:15298;s:11:"size_before";i:76561;s:10:"size_after";i:61263;s:4:"time";d:0.179999999999999993338661852249060757458209991455078125;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:8.160000000000000142108547152020037174224853515625;s:5:"bytes";i:365;s:11:"size_before";i:4471;s:10:"size_after";i:4106;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:15.2799999999999993605115378159098327159881591796875;s:5:"bytes";i:3155;s:11:"size_before";i:20642;s:10:"size_after";i:17487;s:4:"time";d:0.070000000000000006661338147750939242541790008544921875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:18.410000000000000142108547152020037174224853515625;s:5:"bytes";i:8513;s:11:"size_before";i:46250;s:10:"size_after";i:37737;s:4:"time";d:0.13000000000000000444089209850062616169452667236328125;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Screen-Shot-2020-06-13-at-5.51.04-PM</title>
		<link>https://www.pyscoop.com/screen-shot-2020-06-13-at-5-51-04-pm/</link>
		<pubDate>Sat, 13 Jun 2020 13:51:34 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-13-at-5.51.04-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>485</wp:post_id>
		<wp:post_date><![CDATA[2020-06-13 13:51:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-13 13:51:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-13-at-5-51-04-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-13-at-5.51.04-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:20.91217700387395694860970252193510532379150390625;s:5:"bytes";i:157086;s:11:"size_before";i:751170;s:10:"size_after";i:594084;s:4:"time";d:2.5;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:12:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:11.6300000000000007815970093361102044582366943359375;s:5:"bytes";i:1357;s:11:"size_before";i:11665;s:10:"size_after";i:10308;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:21.96000000000000085265128291212022304534912109375;s:5:"bytes";i:17118;s:11:"size_before";i:77937;s:10:"size_after";i:60819;s:4:"time";d:0.2800000000000000266453525910037569701671600341796875;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:18.690000000000001278976924368180334568023681640625;s:5:"bytes";i:1169;s:11:"size_before";i:6256;s:10:"size_after";i:5087;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:20.9200000000000017053025658242404460906982421875;s:5:"bytes";i:10504;s:11:"size_before";i:50222;s:10:"size_after";i:39718;s:4:"time";d:0.179999999999999993338661852249060757458209991455078125;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:21.550000000000000710542735760100185871124267578125;s:5:"bytes";i:30456;s:11:"size_before";i:141317;s:10:"size_after";i:110861;s:4:"time";d:0.57999999999999996003197111349436454474925994873046875;}s:9:"2048x2048";O:8:"stdClass":5:{s:7:"percent";d:19.530000000000001136868377216160297393798828125;s:5:"bytes";i:43812;s:11:"size_before";i:224377;s:10:"size_after";i:180565;s:4:"time";d:0.5500000000000000444089209850062616169452667236328125;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:19.230000000000000426325641456060111522674560546875;s:5:"bytes";i:7139;s:11:"size_before";i:37121;s:10:"size_after";i:29982;s:4:"time";d:0.179999999999999993338661852249060757458209991455078125;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:23.4200000000000017053025658242404460906982421875;s:5:"bytes";i:16518;s:11:"size_before";i:70532;s:10:"size_after";i:54014;s:4:"time";d:0.190000000000000002220446049250313080847263336181640625;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:22.780000000000001136868377216160297393798828125;s:5:"bytes";i:15667;s:11:"size_before";i:68763;s:10:"size_after";i:53096;s:4:"time";d:0.25;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:7.0999999999999996447286321199499070644378662109375;s:5:"bytes";i:250;s:11:"size_before";i:3523;s:10:"size_after";i:3273;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:20.4200000000000017053025658242404460906982421875;s:5:"bytes";i:3823;s:11:"size_before";i:18724;s:10:"size_after";i:14901;s:4:"time";d:0.08000000000000000166533453693773481063544750213623046875;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:22.769999999999999573674358543939888477325439453125;s:5:"bytes";i:9273;s:11:"size_before";i:40733;s:10:"size_after";i:31460;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-13-at-5.51.04-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2702;s:6:"height";i:946;s:4:"file";s:48:"2020/06/Screen-Shot-2020-06-13-at-5.51.04-PM.png";s:5:"sizes";a:12:{s:6:"medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-5.51.04-PM-300x105.png";s:5:"width";i:300;s:6:"height";i:105;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-13-at-5.51.04-PM-1024x359.png";s:5:"width";i:1024;s:6:"height";i:359;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-5.51.04-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-5.51.04-PM-768x269.png";s:5:"width";i:768;s:6:"height";i:269;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-13-at-5.51.04-PM-1536x538.png";s:5:"width";i:1536;s:6:"height";i:538;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-13-at-5.51.04-PM-2048x717.png";s:5:"width";i:2048;s:6:"height";i:717;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-5.51.04-PM-640x224.png";s:5:"width";i:640;s:6:"height";i:224;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-5.51.04-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-5.51.04-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:47:"Screen-Shot-2020-06-13-at-5.51.04-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-5.51.04-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-5.51.04-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Screen-Shot-2020-06-13-at-8.25.10-PM</title>
		<link>https://www.pyscoop.com/screen-shot-2020-06-13-at-8-25-10-pm/</link>
		<pubDate>Sat, 13 Jun 2020 16:26:07 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-13-at-8.25.10-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>489</wp:post_id>
		<wp:post_date><![CDATA[2020-06-13 16:26:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-13 16:26:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-13-at-8-25-10-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-13-at-8.25.10-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:22.7690750213128723089539562352001667022705078125;s:5:"bytes";i:170932;s:11:"size_before";i:750720;s:10:"size_after";i:579788;s:4:"time";d:2.769999999999999573674358543939888477325439453125;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:12:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:14.5299999999999993605115378159098327159881591796875;s:5:"bytes";i:1869;s:11:"size_before";i:12863;s:10:"size_after";i:10994;s:4:"time";d:0.059999999999999997779553950749686919152736663818359375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:22.589999999999999857891452847979962825775146484375;s:5:"bytes";i:18649;s:11:"size_before";i:82545;s:10:"size_after";i:63896;s:4:"time";d:0.35999999999999998667732370449812151491641998291015625;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:10.6699999999999999289457264239899814128875732421875;s:5:"bytes";i:574;s:11:"size_before";i:5381;s:10:"size_after";i:4807;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:21.8599999999999994315658113919198513031005859375;s:5:"bytes";i:11680;s:11:"size_before";i:53436;s:10:"size_after";i:41756;s:4:"time";d:0.200000000000000011102230246251565404236316680908203125;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:24.3599999999999994315658113919198513031005859375;s:5:"bytes";i:35380;s:11:"size_before";i:145266;s:10:"size_after";i:109886;s:4:"time";d:0.58999999999999996891375531049561686813831329345703125;}s:9:"2048x2048";O:8:"stdClass":5:{s:7:"percent";d:24.03999999999999914734871708787977695465087890625;s:5:"bytes";i:51234;s:11:"size_before";i:213126;s:10:"size_after";i:161892;s:4:"time";d:0.67000000000000003996802888650563545525074005126953125;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:22.469999999999998863131622783839702606201171875;s:5:"bytes";i:9255;s:11:"size_before";i:41186;s:10:"size_after";i:31931;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:21.78999999999999914734871708787977695465087890625;s:5:"bytes";i:14777;s:11:"size_before";i:67820;s:10:"size_after";i:53043;s:4:"time";d:0.2300000000000000099920072216264088638126850128173828125;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:21.760000000000001563194018672220408916473388671875;s:5:"bytes";i:14368;s:11:"size_before";i:66038;s:10:"size_after";i:51670;s:4:"time";d:0.299999999999999988897769753748434595763683319091796875;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:8.5;s:5:"bytes";i:329;s:11:"size_before";i:3870;s:10:"size_after";i:3541;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:19.469999999999998863131622783839702606201171875;s:5:"bytes";i:3538;s:11:"size_before";i:18171;s:10:"size_after";i:14633;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:22.620000000000000994759830064140260219573974609375;s:5:"bytes";i:9279;s:11:"size_before";i:41018;s:10:"size_after";i:31739;s:4:"time";d:0.11999999999999999555910790149937383830547332763671875;}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-13-at-8.25.10-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2866;s:6:"height";i:1352;s:4:"file";s:48:"2020/06/Screen-Shot-2020-06-13-at-8.25.10-PM.png";s:5:"sizes";a:12:{s:6:"medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-8.25.10-PM-300x142.png";s:5:"width";i:300;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-13-at-8.25.10-PM-1024x483.png";s:5:"width";i:1024;s:6:"height";i:483;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-8.25.10-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-8.25.10-PM-768x362.png";s:5:"width";i:768;s:6:"height";i:362;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-13-at-8.25.10-PM-1536x725.png";s:5:"width";i:1536;s:6:"height";i:725;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-13-at-8.25.10-PM-2048x966.png";s:5:"width";i:2048;s:6:"height";i:966;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-8.25.10-PM-640x302.png";s:5:"width";i:640;s:6:"height";i:302;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-8.25.10-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-8.25.10-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:47:"Screen-Shot-2020-06-13-at-8.25.10-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-8.25.10-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-13-at-8.25.10-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Screen-Shot-2020-06-14-at-11.30.56-AM</title>
		<link>https://www.pyscoop.com/screen-shot-2020-06-14-at-11-30-56-am/</link>
		<pubDate>Sun, 14 Jun 2020 07:31:22 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-14-at-11.30.56-AM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>492</wp:post_id>
		<wp:post_date><![CDATA[2020-06-14 07:31:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-14 07:31:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-14-at-11-30-56-am]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-14-at-11.30.56-AM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2284;s:6:"height";i:1240;s:4:"file";s:49:"2020/06/Screen-Shot-2020-06-14-at-11.30.56-AM.png";s:5:"sizes";a:12:{s:6:"medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.30.56-AM-300x163.png";s:5:"width";i:300;s:6:"height";i:163;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-14-at-11.30.56-AM-1024x556.png";s:5:"width";i:1024;s:6:"height";i:556;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.30.56-AM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.30.56-AM-768x417.png";s:5:"width";i:768;s:6:"height";i:417;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-14-at-11.30.56-AM-1536x834.png";s:5:"width";i:1536;s:6:"height";i:834;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:51:"Screen-Shot-2020-06-14-at-11.30.56-AM-2048x1112.png";s:5:"width";i:2048;s:6:"height";i:1112;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.30.56-AM-640x347.png";s:5:"width";i:640;s:6:"height";i:347;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.30.56-AM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.30.56-AM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-14-at-11.30.56-AM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.30.56-AM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.30.56-AM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:21.6518214167166860306679154746234416961669921875;s:5:"bytes";i:125893;s:11:"size_before";i:581443;s:10:"size_after";i:455550;s:4:"time";d:2.04999999999999982236431605997495353221893310546875;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:12:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:11.519999999999999573674358543939888477325439453125;s:5:"bytes";i:1192;s:11:"size_before";i:10346;s:10:"size_after";i:9154;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:21.879999999999999005240169935859739780426025390625;s:5:"bytes";i:14385;s:11:"size_before";i:65755;s:10:"size_after";i:51370;s:4:"time";d:0.25;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:7.1699999999999999289457264239899814128875732421875;s:5:"bytes";i:229;s:11:"size_before";i:3195;s:10:"size_after";i:2966;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:21.82000000000000028421709430404007434844970703125;s:5:"bytes";i:9556;s:11:"size_before";i:43792;s:10:"size_after";i:34236;s:4:"time";d:0.1000000000000000055511151231257827021181583404541015625;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:22.690000000000001278976924368180334568023681640625;s:5:"bytes";i:26081;s:11:"size_before";i:114931;s:10:"size_after";i:88850;s:4:"time";d:0.34999999999999997779553950749686919152736663818359375;}s:9:"2048x2048";O:8:"stdClass":5:{s:7:"percent";d:22.489999999999998436805981327779591083526611328125;s:5:"bytes";i:37808;s:11:"size_before";i:168147;s:10:"size_after";i:130339;s:4:"time";d:0.65000000000000002220446049250313080847263336181640625;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:20.719999999999998863131622783839702606201171875;s:5:"bytes";i:6857;s:11:"size_before";i:33101;s:10:"size_after";i:26244;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:22.67999999999999971578290569595992565155029296875;s:5:"bytes";i:10939;s:11:"size_before";i:48232;s:10:"size_after";i:37293;s:4:"time";d:0.14000000000000001332267629550187848508358001708984375;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:21.8599999999999994315658113919198513031005859375;s:5:"bytes";i:10767;s:11:"size_before";i:49246;s:10:"size_after";i:38479;s:4:"time";d:0.200000000000000011102230246251565404236316680908203125;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:6.20000000000000017763568394002504646778106689453125;s:5:"bytes";i:162;s:11:"size_before";i:2612;s:10:"size_after";i:2450;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:14.9199999999999999289457264239899814128875732421875;s:5:"bytes";i:1918;s:11:"size_before";i:12851;s:10:"size_after";i:10933;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:20.519999999999999573674358543939888477325439453125;s:5:"bytes";i:5999;s:11:"size_before";i:29235;s:10:"size_after";i:23236;s:4:"time";d:0.14000000000000001332267629550187848508358001708984375;}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-14-at-11.30.56-AM.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Screen-Shot-2020-06-14-at-11.55.11-AM</title>
		<link>https://www.pyscoop.com/screen-shot-2020-06-14-at-11-55-11-am/</link>
		<pubDate>Sun, 14 Jun 2020 07:55:41 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-14-at-11.55.11-AM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>494</wp:post_id>
		<wp:post_date><![CDATA[2020-06-14 07:55:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-14 07:55:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-14-at-11-55-11-am]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-14-at-11.55.11-AM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:22.550386539066256119667741586454212665557861328125;s:5:"bytes";i:114024;s:11:"size_before";i:505641;s:10:"size_after";i:391617;s:4:"time";d:2.029999999999999804600747665972448885440826416015625;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:12:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:11.699999999999999289457264239899814128875732421875;s:5:"bytes";i:1047;s:11:"size_before";i:8950;s:10:"size_after";i:7903;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:23.03999999999999914734871708787977695465087890625;s:5:"bytes";i:13254;s:11:"size_before";i:57529;s:10:"size_after";i:44275;s:4:"time";d:0.270000000000000017763568394002504646778106689453125;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:7.589999999999999857891452847979962825775146484375;s:5:"bytes";i:230;s:11:"size_before";i:3031;s:10:"size_after";i:2801;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:22.35000000000000142108547152020037174224853515625;s:5:"bytes";i:8563;s:11:"size_before";i:38311;s:10:"size_after";i:29748;s:4:"time";d:0.11999999999999999555910790149937383830547332763671875;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:24.3599999999999994315658113919198513031005859375;s:5:"bytes";i:24530;s:11:"size_before";i:100695;s:10:"size_after";i:76165;s:4:"time";d:0.35999999999999998667732370449812151491641998291015625;}s:9:"2048x2048";O:8:"stdClass":5:{s:7:"percent";d:22.730000000000000426325641456060111522674560546875;s:5:"bytes";i:33134;s:11:"size_before";i:145747;s:10:"size_after";i:112613;s:4:"time";d:0.57999999999999996003197111349436454474925994873046875;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:20.760000000000001563194018672220408916473388671875;s:5:"bytes";i:5974;s:11:"size_before";i:28770;s:10:"size_after";i:22796;s:4:"time";d:0.1000000000000000055511151231257827021181583404541015625;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:24.699999999999999289457264239899814128875732421875;s:5:"bytes";i:10336;s:11:"size_before";i:41845;s:10:"size_after";i:31509;s:4:"time";d:0.200000000000000011102230246251565404236316680908203125;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:23.35000000000000142108547152020037174224853515625;s:5:"bytes";i:9938;s:11:"size_before";i:42561;s:10:"size_after";i:32623;s:4:"time";d:0.1700000000000000122124532708767219446599483489990234375;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:3.970000000000000195399252334027551114559173583984375;s:5:"bytes";i:90;s:11:"size_before";i:2265;s:10:"size_after";i:2175;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:15.949999999999999289457264239899814128875732421875;s:5:"bytes";i:1780;s:11:"size_before";i:11158;s:10:"size_after";i:9378;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:20.780000000000001136868377216160297393798828125;s:5:"bytes";i:5148;s:11:"size_before";i:24779;s:10:"size_after";i:19631;s:4:"time";d:0.08000000000000000166533453693773481063544750213623046875;}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-14-at-11.55.11-AM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2282;s:6:"height";i:1228;s:4:"file";s:49:"2020/06/Screen-Shot-2020-06-14-at-11.55.11-AM.png";s:5:"sizes";a:12:{s:6:"medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.55.11-AM-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-14-at-11.55.11-AM-1024x551.png";s:5:"width";i:1024;s:6:"height";i:551;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.55.11-AM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.55.11-AM-768x413.png";s:5:"width";i:768;s:6:"height";i:413;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-14-at-11.55.11-AM-1536x827.png";s:5:"width";i:1536;s:6:"height";i:827;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:51:"Screen-Shot-2020-06-14-at-11.55.11-AM-2048x1102.png";s:5:"width";i:2048;s:6:"height";i:1102;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.55.11-AM-640x344.png";s:5:"width";i:640;s:6:"height";i:344;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.55.11-AM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.55.11-AM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-14-at-11.55.11-AM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.55.11-AM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-11.55.11-AM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Screen-Shot-2020-06-14-at-12.06.00-PM</title>
		<link>https://www.pyscoop.com/screen-shot-2020-06-14-at-12-06-00-pm/</link>
		<pubDate>Sun, 14 Jun 2020 08:06:20 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-14-at-12.06.00-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>499</wp:post_id>
		<wp:post_date><![CDATA[2020-06-14 08:06:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-14 08:06:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-14-at-12-06-00-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-14-at-12.06.00-PM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-14-at-12.06.00-PM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2282;s:6:"height";i:1090;s:4:"file";s:49:"2020/06/Screen-Shot-2020-06-14-at-12.06.00-PM.png";s:5:"sizes";a:12:{s:6:"medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-12.06.00-PM-300x143.png";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-14-at-12.06.00-PM-1024x489.png";s:5:"width";i:1024;s:6:"height";i:489;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-12.06.00-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-12.06.00-PM-768x367.png";s:5:"width";i:768;s:6:"height";i:367;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-14-at-12.06.00-PM-1536x734.png";s:5:"width";i:1536;s:6:"height";i:734;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-14-at-12.06.00-PM-2048x978.png";s:5:"width";i:2048;s:6:"height";i:978;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-12.06.00-PM-640x306.png";s:5:"width";i:640;s:6:"height";i:306;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-12.06.00-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-12.06.00-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-14-at-12.06.00-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-12.06.00-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-14-at-12.06.00-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:23.619771446319116847689656424336135387420654296875;s:5:"bytes";i:129284;s:11:"size_before";i:547355;s:10:"size_after";i:418071;s:4:"time";d:2.300000000000000266453525910037569701671600341796875;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:12:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:12.1199999999999992184029906638897955417633056640625;s:5:"bytes";i:1126;s:11:"size_before";i:9292;s:10:"size_after";i:8166;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:23.629999999999999005240169935859739780426025390625;s:5:"bytes";i:14543;s:11:"size_before";i:61540;s:10:"size_after";i:46997;s:4:"time";d:0.1600000000000000033306690738754696212708950042724609375;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:12.5600000000000004973799150320701301097869873046875;s:5:"bytes";i:394;s:11:"size_before";i:3138;s:10:"size_after";i:2744;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:23.239999999999998436805981327779591083526611328125;s:5:"bytes";i:9664;s:11:"size_before";i:41583;s:10:"size_after";i:31919;s:4:"time";d:0.179999999999999993338661852249060757458209991455078125;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:25.519999999999999573674358543939888477325439453125;s:5:"bytes";i:27751;s:11:"size_before";i:108736;s:10:"size_after";i:80985;s:4:"time";d:0.35999999999999998667732370449812151491641998291015625;}s:9:"2048x2048";O:8:"stdClass":5:{s:7:"percent";d:24.269999999999999573674358543939888477325439453125;s:5:"bytes";i:38267;s:11:"size_before";i:157681;s:10:"size_after";i:119414;s:4:"time";d:0.89000000000000001332267629550187848508358001708984375;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:22.309999999999998721023075631819665431976318359375;s:5:"bytes";i:6928;s:11:"size_before";i:31057;s:10:"size_after";i:24129;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:23.39999999999999857891452847979962825775146484375;s:5:"bytes";i:10646;s:11:"size_before";i:45498;s:10:"size_after";i:34852;s:4:"time";d:0.2099999999999999922284388276239042170345783233642578125;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:24.969999999999998863131622783839702606201171875;s:5:"bytes";i:11374;s:11:"size_before";i:45542;s:10:"size_after";i:34168;s:4:"time";d:0.190000000000000002220446049250313080847263336181640625;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:7.57000000000000028421709430404007434844970703125;s:5:"bytes";i:192;s:11:"size_before";i:2537;s:10:"size_after";i:2345;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:18.190000000000001278976924368180334568023681640625;s:5:"bytes";i:2290;s:11:"size_before";i:12590;s:10:"size_after";i:10300;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:21.690000000000001278976924368180334568023681640625;s:5:"bytes";i:6109;s:11:"size_before";i:28161;s:10:"size_after";i:22052;s:4:"time";d:0.08000000000000000166533453693773481063544750213623046875;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>json-api</title>
		<link>https://www.pyscoop.com/write-json-apis-in-pure-django-for-beginners/json-api/</link>
		<pubDate>Sun, 14 Jun 2020 09:53:42 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/json-api.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>507</wp:post_id>
		<wp:post_date><![CDATA[2020-06-14 09:53:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-14 09:53:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[json-api]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>433</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/json-api.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/json-api.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:550;s:4:"file";s:20:"2020/06/json-api.png";s:5:"sizes";a:9:{s:6:"medium";a:4:{s:4:"file";s:20:"json-api-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"json-api-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"json-api-768x497.png";s:5:"width";i:768;s:6:"height";i:497;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:20:"json-api-640x414.png";s:5:"width";i:640;s:6:"height";i:414;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"json-api-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:20:"json-api-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:19:"json-api-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:20:"json-api-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:20:"json-api-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:23.831680211264284707795013673603534698486328125;s:5:"bytes";i:30322;s:11:"size_before";i:127234;s:10:"size_after";i:96912;s:4:"time";d:0.68000000000000004884981308350688777863979339599609375;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:9:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:24.739999999999998436805981327779591083526611328125;s:5:"bytes";i:1940;s:11:"size_before";i:7842;s:10:"size_after";i:5902;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:24.690000000000001278976924368180334568023681640625;s:5:"bytes";i:1388;s:11:"size_before";i:5621;s:10:"size_after";i:4233;s:4:"time";d:0.0200000000000000004163336342344337026588618755340576171875;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:22.0799999999999982946974341757595539093017578125;s:5:"bytes";i:5155;s:11:"size_before";i:23351;s:10:"size_after";i:18196;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:23.60000000000000142108547152020037174224853515625;s:5:"bytes";i:4418;s:11:"size_before";i:18720;s:10:"size_after";i:14302;s:4:"time";d:0.0899999999999999966693309261245303787291049957275390625;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:26.469999999999998863131622783839702606201171875;s:5:"bytes";i:5793;s:11:"size_before";i:21882;s:10:"size_after";i:16089;s:4:"time";d:0.14000000000000001332267629550187848508358001708984375;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:21.910000000000000142108547152020037174224853515625;s:5:"bytes";i:4458;s:11:"size_before";i:20348;s:10:"size_after";i:15890;s:4:"time";d:0.13000000000000000444089209850062616169452667236328125;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";d:18.989999999999998436805981327779591083526611328125;s:5:"bytes";i:483;s:11:"size_before";i:2543;s:10:"size_after";i:2060;s:4:"time";d:0.01000000000000000020816681711721685132943093776702880859375;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:24.489999999999998436805981327779591083526611328125;s:5:"bytes";i:2371;s:11:"size_before";i:9681;s:10:"size_after";i:7310;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:25.030000000000001136868377216160297393798828125;s:5:"bytes";i:4316;s:11:"size_before";i:17246;s:10:"size_after";i:12930;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>django admin</title>
		<link>https://www.pyscoop.com/django-jsonfield-attributes-in-admin-filter/screen-shot-2020-06-24-at-4-23-59-pm/</link>
		<pubDate>Wed, 24 Jun 2020 12:25:54 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-24-at-4.23.59-PM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>546</wp:post_id>
		<wp:post_date><![CDATA[2020-06-24 12:25:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-24 12:25:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-24-at-4-23-59-pm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>522</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-24-at-4.23.59-PM-e1593088399713.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1541;s:6:"height";i:550;s:4:"file";s:63:"2020/06/Screen-Shot-2020-06-24-at-4.23.59-PM-e1593088399713.png";s:5:"sizes";a:12:{s:6:"medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-24-at-4.23.59-PM-300x107.png";s:5:"width";i:300;s:6:"height";i:107;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-24-at-4.23.59-PM-1024x366.png";s:5:"width";i:1024;s:6:"height";i:366;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-24-at-4.23.59-PM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-24-at-4.23.59-PM-768x274.png";s:5:"width";i:768;s:6:"height";i:274;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-24-at-4.23.59-PM-1536x548.png";s:5:"width";i:1536;s:6:"height";i:548;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-24-at-4.23.59-PM-2048x731.png";s:5:"width";i:2048;s:6:"height";i:731;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-24-at-4.23.59-PM-640x228.png";s:5:"width";i:640;s:6:"height";i:228;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-24-at-4.23.59-PM-850x550.png";s:5:"width";i:850;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-24-at-4.23.59-PM-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:47:"Screen-Shot-2020-06-24-at-4.23.59-PM-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-24-at-4.23.59-PM-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:48:"Screen-Shot-2020-06-24-at-4.23.59-PM-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-24-at-4.23.59-PM-e1593088399713.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[django admin]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:6.10736444564337777052287492551840841770172119140625;s:5:"bytes";i:19244;s:11:"size_before";i:315095;s:10:"size_after";i:295851;s:4:"time";d:4.53999999999999914734871708787977695465087890625;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:12:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:3.2400000000000002131628207280300557613372802734375;s:5:"bytes";i:199;s:11:"size_before";i:6148;s:10:"size_after";i:5949;s:4:"time";d:0.1600000000000000033306690738754696212708950042724609375;}s:5:"large";O:8:"stdClass":5:{s:7:"percent";d:4.019999999999999573674358543939888477325439453125;s:5:"bytes";i:1545;s:11:"size_before";i:38411;s:10:"size_after";i:36866;s:4:"time";d:0.4899999999999999911182158029987476766109466552734375;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:1164;s:10:"size_after";i:1164;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:4.37999999999999989341858963598497211933135986328125;s:5:"bytes";i:1116;s:11:"size_before";i:25452;s:10:"size_after";i:24336;s:4:"time";d:0.08000000000000000166533453693773481063544750213623046875;}s:9:"1536x1536";O:8:"stdClass":5:{s:7:"percent";d:6.11000000000000031974423109204508364200592041015625;s:5:"bytes";i:4228;s:11:"size_before";i:69154;s:10:"size_after";i:64926;s:4:"time";d:0.75;}s:9:"2048x2048";O:8:"stdClass":5:{s:7:"percent";d:7.13999999999999968025576890795491635799407958984375;s:5:"bytes";i:7231;s:11:"size_before";i:101344;s:10:"size_after";i:94113;s:4:"time";d:1.020000000000000017763568394002504646778106689453125;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:4.92999999999999971578290569595992565155029296875;s:5:"bytes";i:947;s:11:"size_before";i:19201;s:10:"size_after";i:18254;s:4:"time";d:0.1499999999999999944488848768742172978818416595458984375;}s:14:"post-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:9.230000000000000426325641456060111522674560546875;s:5:"bytes";i:1673;s:11:"size_before";i:18129;s:10:"size_after";i:16456;s:4:"time";d:0.190000000000000002220446049250313080847263336181640625;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:7.769999999999999573674358543939888477325439453125;s:5:"bytes";i:1489;s:11:"size_before";i:19170;s:10:"size_after";i:17681;s:4:"time";d:0.81999999999999995115018691649311222136020660400390625;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:1005;s:10:"size_after";i:1005;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:4944;s:10:"size_after";i:4944;s:4:"time";d:0.040000000000000000832667268468867405317723751068115234375;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:7.44000000000000039079850466805510222911834716796875;s:5:"bytes";i:816;s:11:"size_before";i:10973;s:10:"size_after";i:10157;s:4:"time";d:0.7399999999999999911182158029987476766109466552734375;}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:9:"full-orig";a:3:{s:5:"width";i:2762;s:6:"height";i:986;s:4:"file";s:40:"Screen-Shot-2020-06-24-at-4.23.59-PM.png";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>django admin</title>
		<link>https://www.pyscoop.com/django-jsonfield-attributes-in-admin-filter/screen-shot-2020-06-24-at-4-23-59-pm-2/</link>
		<pubDate>Thu, 25 Jun 2020 12:37:18 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-24-at-4.23.59-PM-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[django admin]]></excerpt:encoded>
		<wp:post_id>564</wp:post_id>
		<wp:post_date><![CDATA[2020-06-25 12:37:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-25 12:37:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-shot-2020-06-24-at-4-23-59-pm-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>522</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-24-at-4.23.59-PM-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/Screen-Shot-2020-06-24-at-4.23.59-PM-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:851;s:6:"height";i:550;s:4:"file";s:50:"2020/06/Screen-Shot-2020-06-24-at-4.23.59-PM-1.png";s:5:"sizes";a:8:{s:6:"medium";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-24-at-4.23.59-PM-1-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-24-at-4.23.59-PM-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-24-at-4.23.59-PM-1-768x496.png";s:5:"width";i:768;s:6:"height";i:496;s:9:"mime-type";s:9:"image/png";}s:21:"shareaholic-thumbnail";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-24-at-4.23.59-PM-1-640x414.png";s:5:"width";i:640;s:6:"height";i:414;s:9:"mime-type";s:9:"image/png";}s:20:"maxwell-slider-image";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-24-at-4.23.59-PM-1-850x500.png";s:5:"width";i:850;s:6:"height";i:500;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-small";a:4:{s:4:"file";s:49:"Screen-Shot-2020-06-24-at-4.23.59-PM-1-120x80.png";s:5:"width";i:120;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:24:"maxwell-thumbnail-medium";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-24-at-4.23.59-PM-1-360x230.png";s:5:"width";i:360;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"maxwell-thumbnail-large";a:4:{s:4:"file";s:50:"Screen-Shot-2020-06-24-at-4.23.59-PM-1-600x380.png";s:5:"width";i:600;s:6:"height";i:380;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp-smpro-smush-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"stats";a:8:{s:7:"percent";d:5.65244316003656610547523087006993591785430908203125;s:5:"bytes";i:9584;s:11:"size_before";i:169555;s:10:"size_after";i:159971;s:4:"time";d:1.0100000000000000088817841970012523233890533447265625;s:11:"api_version";s:3:"1.0";s:5:"lossy";b:0;s:9:"keep_exif";i:0;}s:5:"sizes";a:8:{s:6:"medium";O:8:"stdClass":5:{s:7:"percent";d:4.5;s:5:"bytes";i:424;s:11:"size_before";i:9427;s:10:"size_after";i:9003;s:4:"time";d:0.11000000000000000055511151231257827021181583404541015625;}s:9:"thumbnail";O:8:"stdClass":5:{s:7:"percent";d:0.419999999999999984456877655247808434069156646728515625;s:5:"bytes";i:17;s:11:"size_before";i:4087;s:10:"size_after";i:4070;s:4:"time";d:0.05000000000000000277555756156289135105907917022705078125;}s:12:"medium_large";O:8:"stdClass":5:{s:7:"percent";d:6.30999999999999960920149533194489777088165283203125;s:5:"bytes";i:2487;s:11:"size_before";i:39424;s:10:"size_after";i:36937;s:4:"time";d:0.11999999999999999555910790149937383830547332763671875;}s:21:"shareaholic-thumbnail";O:8:"stdClass":5:{s:7:"percent";d:4.63999999999999968025576890795491635799407958984375;s:5:"bytes";i:1374;s:11:"size_before";i:29632;s:10:"size_after";i:28258;s:4:"time";d:0.2200000000000000011102230246251565404236316680908203125;}s:20:"maxwell-slider-image";O:8:"stdClass":5:{s:7:"percent";d:7.12999999999999989341858963598497211933135986328125;s:5:"bytes";i:3174;s:11:"size_before";i:44518;s:10:"size_after";i:41344;s:4:"time";d:0.179999999999999993338661852249060757458209991455078125;}s:23:"maxwell-thumbnail-small";O:8:"stdClass":5:{s:7:"percent";i:0;s:5:"bytes";i:0;s:11:"size_before";i:2264;s:10:"size_after";i:2264;s:4:"time";d:0.0299999999999999988897769753748434595763683319091796875;}s:24:"maxwell-thumbnail-medium";O:8:"stdClass":5:{s:7:"percent";d:3.6699999999999999289457264239899814128875732421875;s:5:"bytes";i:469;s:11:"size_before";i:12768;s:10:"size_after";i:12299;s:4:"time";d:0.1000000000000000055511151231257827021181583404541015625;}s:23:"maxwell-thumbnail-large";O:8:"stdClass":5:{s:7:"percent";d:5.96999999999999975131004248396493494510650634765625;s:5:"bytes";i:1639;s:11:"size_before";i:27435;s:10:"size_after";i:25796;s:4:"time";d:0.200000000000000011102230246251565404236316680908203125;}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Learn Python in 10 minutes</title>
		<link>https://www.pyscoop.com/learn-python-in-10-minutes/</link>
		<pubDate>Sun, 13 Jan 2019 15:42:19 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="abstract">Abstract</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We have plenty of online resources to learn Python language. Here, in this post, I am also trying to make a dent in the Python world.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This a very basic tutorial for beginners who are just starting with Python. As, with any language, you need to read and practice more to grasp concepts in depth.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Initially, most of the people get confused between Python2 and Python3 So lets clear this for once and all.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Development of Python has been stopped. Python 2.7 is the last version of the Python2 series.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://hg.python.org/peps/rev/76d43e52d978#l1.8">Here is the commit</a>&nbsp;from the creator of Python, Guido van Rossum.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>+Update<br>+======</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>+The End Of Life date (EOL, sunset date) for Python 2.7 has been moved<br>+five years into the future, to 2020. This decision was made to<br>+clarify the status of Python 2.7 and relieve worries for those users<br>+who cannot yet migrate to Python 3. See also PEP 466.</p><p>+This declaration does not guarantee that bugfix releases will be made<br>+on a regular basis, but it should enable volunteers who want to<br>+contribute bugfixes for Python 2.7 and it should satisfy vendors who<br>+still have to support Python 2 for years to come.</p><p>+There will be no Python 2.8.<br>+</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Python3 is now more mature and stable hence this tutorial is based on Python3, however, I shall mention Python2 difference wherever needed in this post.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="hello-world">Hello World</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The famous “Hello World” program in Python</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">print("hello World")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Yep! That’s all, One line of code. No need to include any library, declaring function or class.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Isn’t that cool?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="variables-and-data-types">Variables and Data Types</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In Python, to declare a variable, you don’t specify the datatype of the variable as we do in other languages e.g C, C++, Java, etc. You just declare and initialize it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="1-numbers">1) Numbers</h4>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = 3       # Integer  
a = 2.345   # float/double  
a = 1E3 # scientific notation,  equivalent to 10^3 = 1000.0  
a = 1e3 # scientific notation(with small letter)  equivalent to 10^3 = 1000.0</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Mathematical Operations can be done easily without having to worry about different datatype.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = 3  
b = 2.5  
c = a + b   # c = 5.5  
c = a * b   # c = 7.5  
c = a / b   # c = 1.2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><a href="https://docs.python.org/3/library/decimal.html#decimal-objects">You can read more about these here</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="2-strings">2) Strings</h4>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = "Hello World"   # enclosed in double quotes  
a = 'Hello World'   # enclosed in single quotes</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There is no difference between double quote string and single quote string. More details on Strings in upcoming section in this post.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="3-booleans">3) Booleans</h4>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = True  
a = False</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":4} -->
<h4 id="4-list-tuple--set">4) List, Tuple &amp; Set</h4>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = [1, 2, 3]          # List  
a = (1, 2, 3)          # Tuple, similar to List but immutable  
a = {"a", "b", "c"}    # Set of unique items/objects</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>List, Tuple and Set, all are iterable, that means we can loop over these to get a specific item.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>More details on iterables in upcoming section in this post.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="5-dictionary">5) Dictionary</h4>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = {"name": "Monty", "age": 100}   # Key: Value pair, JSON like object</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="strings-formatting-and-operations">Strings: Formatting and Operations</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Python uses C-style string formatting options, like “%s”, “%d”, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">"Hello %s" % ("World")  # "Hello World"  
"%s is %d feet tall" % ("Tom", 6)   # "Tom is 6 feet tall"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Recommended way is to use&nbsp;<code>string.format()</code></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">person = "Tom"
age = 6
"{} is {} feet tall".format(person, age)   # "Tom is 6 feet tall"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Further, you can pass placeholders i.e. keyword, number and other formatting options.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, Python3.6 introduced another way to format strings, called <strong>fstring</strong>.  Since then this is the most preferred way to format strings.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">f'{person} is {age} feet tall'  # "Tom is 6 feet tall"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, in fstring, you can directly pass the variables. this makes string formatting more concise and readable.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="iterables-lists-tuple--set">Iterables (Lists, Tuple &amp; Set)</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4 id="1-list">1) List</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Lists are similar to arrays. A list can contain any type of variable.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = [1, "Hello world", 2.34, False]     # List or mix datatype variables</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The number of items in a list defines the length of the list. Use&nbsp;<code>len(a_list)</code>&nbsp;To get the length of the List.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">len(a)  # length = 4</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To get a value from this List you need to use an index. What is index now?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An index is a number assigned to each value</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>e.g index of 1st value is 0, index of 2nd value is 1, … index of last value is:<code>length_of_list - 1</code>&nbsp;in above case, this is 3.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">print(a[0])   #  1  
print(a[1])   #  "Hello world"  
print(a[3])   #  False</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Use&nbsp;<code>append()</code>&nbsp;If you want to add an item at the end of a List.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = [1, "Hello world", 2.34, False]  
a.append("PYC")     # Now a = \[1, "Hello world", 2.34, False, "PYC"\]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you want to insert an item at arbitrary position in the List, Use&nbsp;<code>insert()</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first parameter is an index where you want to insert and the second parameter is the value. All other items will be shifted accordingly.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = [1, "Hello world", 2.34, False]  
a.insert(2, "PYC")  # Now a = \[1, "Hello world", "PYC", 2.34, False\]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><a href="https://docs.python.org/3/tutorial/datastructures.html">More methods of List</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="2-set">2) Set</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Set is an unordered collection of unique items</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = set('abracadabra')      # a = {'a', 'r', 'b', 'c', 'd'}   unique letters in a  
b = set('alacazam')         # b = {'z', 'l', 'c', 'a', 'm'}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Performing operations on sets</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="properties" class="language-properties">c = a - b       # c = {'r', 'd', 'b'}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Generating set from a list</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">c = set([1, "Hello world", 2.34, False])    #  c = {False, 1, 2.34, 'Hello world'}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="dictionaries">Dictionaries</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = {"name": "Monty", "age": 100}  
a["name"]   # "Monty"  
a["age"]    # 100</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Check if a key exists in the dictionary</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">"age" in a  # True</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="booleanlogical-operators">Boolean/Logical Operators</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Inbuilt logical operators are:<code>in,</code><code>is</code>,&nbsp;<code>not</code>,&nbsp;<code>not in</code>,&nbsp;<code>is not</code>,&nbsp;<code>and</code>,&nbsp;<code>or</code></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']  
'orange' in basket  # True  
'crabgrass' in basket   # False  
'crabgrass' not in basket   # True</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="control-flow-conditional-statements">Control Flow: Conditional Statements</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>if</code>,&nbsp;<code>elif</code>&nbsp;&amp;&nbsp;<code>else</code></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">a = 2  
if a > 1:  
    print('a is greater than 1')elif a == 1:  
    print('a is equal to 1')else:  
    print('a is less than 1')</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="loops">Loops</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">for i in range(1, 10):  # will print number from 1 to 9, in separate lines  
    print(i)

fruit_list = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']  
  
for fruit in fruit_list:   # will print each fruit name from the list, in separate lines  
    print(fruit)

while True:  
    print('infinite loop')

a = 1  
while a &lt; 5:    #  will print number from 1 to 4, each in separate line  
    print(a)
    a = a + 1    #  similar to a += 1</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="functions">Functions</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To define a function you need to use&nbsp;<code>def</code>&nbsp;keyword and then your function name(signature)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def hello_world():  
    print('Hello, World!')

def addition(a, b):  
    c = a + b
    print(c)

def factorial(n):  
    f = 1  
    for i in range(1, n+1):
        f = f * i
        return f</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="classes-and-objects">Classes and Objects</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class Fruit(object):        # 'object' is an inbuilt super class  
    def print_obj(self):    # first parameter, by convention, is 'self' this defines the instance method 
        print("this is a Fruit class's object")
        
apple = Fruit()     # here 'apple' is an object of Fruit class
print(apple.print_obj())    # Accessing object method, will print "this is a Fruit class's object"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now let’s see with constructor method. In python, this is a&nbsp;<code>__init__</code>&nbsp;method.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class Fruit(object):  
 def __init__(self, name):
    self.name = name    # setting fruit name to object level self.name represents \`object.name\` 
    def fruit_name(self):
        print("{}, An object of Fruit".format(self.name))   # Note the string formatting we mentinoed in above section

apple = Fruit('Green Apple')  
print(apple.fruit_name())   # will print "Green Apple, An object of Fruit"  
print(apple.name)           # will print "Green Apple"</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="modules-and-packages">Modules and Packages</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In layman language Module is a Python file and package is a collection of modules</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To create a module just place a&nbsp;<code>__init__.py</code>&nbsp;file(empty file) in the folder where all other python files are placed, then this folder will be interpreted as a package and can be imported into your project.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That’s all for this post!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Comment your views, if there is something wrong or something that can be improved. Also, share topics for the future post that you want me to write about.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[A concise tutorial for beginners who wants to learn Python quickly.]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2019-01-13 15:42:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-13 15:42:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[learn-python-in-10-minutes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="beginner"><![CDATA[Beginner]]></category>
		<category domain="post_tag" nicename="class"><![CDATA[Class]]></category>
		<category domain="post_tag" nicename="datatype"><![CDATA[Datatype]]></category>
		<category domain="post_tag" nicename="dict"><![CDATA[Dict]]></category>
		<category domain="post_tag" nicename="list"><![CDATA[List]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="string"><![CDATA[String]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590327039;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:75;}i:1;a:1:{s:2:"id";i:111;}i:2;a:1:{s:2:"id";i:69;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-04-28]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018-04-28]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[34]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Generate HMAC SHA256 signature in Python</title>
		<link>https://www.pyscoop.com/generate-hmac-sha256-signature-in-python/</link>
		<pubDate>Thu, 30 May 2019 06:21:13 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>SHA256 encoded strings can be used to secure payment gateway.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this problem, there is a popular function written in C#&nbsp;<code>CreateSHA256Signature()</code><br>which you can find here&nbsp;<a href="https://gist.github.com/Azadehkhojandi/50eaae4cf20b21faef186f2c8ee97873">Azadehkhojandi’s Gist</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Recently, In one of the project, I was asked to convert this function into Python. After minutes of searching on google, I had no success so decided to convert it by myself and after few minutes of hit and trial, I got this -</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import hmac
import hashlib 
import binascii

def create_sha256_signature(key, message):
    byte_key = binascii.unhexlify(key)
    message = message.encode()
    return hmac.new(byte_key, message, hashlib.sha256).hexdigest().upper()

create_sha256_signature("E49756B4C8FAB4E48222A3E7F3B97CC3", "TEST STRING")
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Also, hosted on Github:&nbsp;<a href="https://gist.github.com/gjain0/172a4a9933626bd507e00ae6245e33a1">Gaurav Jain’s GIST</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[SHA256 encoded strings can be used in securing the payment gateway. We'll use hashlib library to create...]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2019-05-30 06:21:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-30 06:21:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generate-hmac-sha256-signature-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="encoding"><![CDATA[Encoding]]></category>
		<category domain="post_tag" nicename="hash"><![CDATA[Hash]]></category>
		<category domain="post_tag" nicename="hmac"><![CDATA[HMAC]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[Security]]></category>
		<category domain="post_tag" nicename="sha256"><![CDATA[SHA256]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-04-30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[143]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590347809;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:75;}i:1;a:1:{s:2:"id";i:23;}i:2;a:1:{s:2:"id";i:86;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Building a Simple Blockchain in Python</title>
		<link>https://www.pyscoop.com/building-a-simple-blockchain-in-python/</link>
		<pubDate>Mon, 03 Jun 2019 09:10:03 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=72</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Since Bitcoin boom, Everybody is losing their mind, and as a result of that, we have another Cool Kid in the town,&nbsp;<strong>BLOCKCHAIN</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So What exactly Blockchain is?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As per Wikipedia,</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><em>A Blockchain is a continuously growing list of records, called blocks, which are linked and secured using cryptography. Each block typically contains a cryptographic hash pointer as a link to a previous block, a timestamp and transaction data.</em></p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>If you are familiar with the good old LinkedList then it should be comparatively easy to understand, Afterall Blockchain is also a chain of linked blocks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This post assumes that reader is familiar with Object-oriented programming in Python3.5, If not, I strongly recommend to check out&nbsp;<a href="https://www.pyscoop.com/learn-python-in-10-minutes/">the previous post</a>&nbsp;to get the basic idea of Classes and Objects in Python.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Alright! Let’s start.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You must know few terms/definitions before diving into code.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Block</strong>: A block is a unique record in the blockchain which contains transactions, timestamp, index, hash, etc. broadly 3 types of Block -<br>Genesis Block: First Block in the Blockchain known as Genesis block.<br>Current Block: Last Block in the Blockchain.<br>Orphan Block: Valid Block which is not part of the main chain(due to network constraints/Consensus logic, Will read more about this later)</li><li><strong>Mining</strong>: Method of creating new Block</li><li><strong>Proof Of Work</strong>: is a number(or data) which is&nbsp;<em>difficult to generate but easy to verify</em>. usually requires some work and processing time by a computer. Generated number/data will be used to create Block.</li><li><strong>Node</strong>: A server will be treated as a single node in a blockchain network. In layman terms, we can compare and map with the unique HTTP servers.</li><li><strong>Consensus:</strong>&nbsp;Consensus Algorithm comes into picture when we have more than one node in our blockchain network. To make sure every node in our network has the same blockchain, we make use of this algorithm.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Ok, Enough talk! Show me the code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s create a class of Blocks. All Blocks will have same attributes.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import time  
import hashlib  
  
  
class Block(object):  
      
    def __init__(self, index, proof, previous_hash, transactions):  
        self.index = index  
        self.proof = proof  
        self.previous_hash = previous_hash  
        self.transactions = transactions  
        self.timestamp = time.time()  
  
    @property  
    def get_block_hash(self):  
        block_string = "{}{}{}{}{}".format(self.index, self.proof, self.previous_hash, self.transactions, self.timestamp)  
        return hashlib.sha256(block_string.encode()).hexdigest()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Constructor method takes 4 parameters -<br>1)&nbsp;<strong>index</strong>: This is the index of the Block in Blockchain list<br>2)&nbsp;<strong>proof</strong>: this is a number which will be generated during mining and after successful mining, a Block will be created using this Proof.<br>3)&nbsp;<strong>previous_hash</strong>: This will hold the hash of the previous Block in the Blockchain.<br>4)&nbsp;<strong>transactions</strong>: A list which will store all transaction records.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second method in the class&nbsp;<strong>get_block_hash</strong>&nbsp;will calculate the hash based on above values. This is what makes blockchain really secure. since each block will have a hash and that hash is dependent on previous_block’s hash so if attacker try to modify any block, all subsequent blocks will have invalid hash and blockchain network will discard the chain which has invalid/incorrect hash.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, a Block should look like this</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">{  
    "index": 2,  
    "proof": 14,  
    "previous_hash": "8fb156e516b52afffb5860b5e3a076b0513c0d2d4489a9c4675c98e7e4a48a0d",  
    "transactions": [  
        {'sender': 'address_x', 'recipient': 'address_y', 'amount': 1}  
    ],  
    "timestamp": 1514822766.046704  
}  </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Cool!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s create a Blockchain Now.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below is the blueprint for the class</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class BlockChain(object):  
      
    def __init__(self):  
        self.chain = []  
        self.current_node_transactions = []  
        self.create_genesis_block()  
      
    def create_genesis_block(self):  
        pass  
  
    def create_new_block(self, proof, previous_hash):  
        pass  
  
    def create_new_transaction(self, sender, recipient, amount):  
        pass  
  
    @staticmethod  
    def create_proof_of_work(previous_proof):  
        pass  
     
    @property  
    def get_last_block(self):  
        return self.chain[-1]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Method names are self-explanatory. let’s dig each method one by one in details.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Constructor Method, I have 2 variables,&nbsp;<strong>self.chain</strong>&nbsp;will hold all Blocks and&nbsp;<strong>self.</strong><strong>current_node_transactions</strong>&nbsp;will store all transactions which will be inserted into the block.<br>In the third line, I will be creating genesis block(first block as mentioned initially in this post),&nbsp;<strong>create_genesis_block()</strong>&nbsp;Method will take care of this.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lets detail out&nbsp;<strong>create_new_block()</strong>&nbsp;method-</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def create_new_block(self, proof, previous_hash):  
    block = Block(  
        index=len(self.chain),  
        proof=proof,  
        previous_hash=previous_hash,  
        transactions=self.current_node_transactions  
    )  
    self.current_node_transactions = [] # Reset the transaction list  
  
    self.chain.append(block)  
    return block</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the first line, I am creating a block by using information provided in params. The&nbsp;<strong>index</strong>&nbsp;would be&nbsp;<code>last_index+1</code>&nbsp;which is essentially the length of the chain.&nbsp;<strong>proof</strong>&nbsp;and&nbsp;<strong>previous_hash</strong>&nbsp;should be passed by caller function/method.&nbsp;<strong>transactions</strong>&nbsp;will have all a list of transactions which are not part of any block on the node.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now next line is little tricky</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">self.current_node_transactions = []</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>what I am doing here is that once a block has been created and all transactions assigned to it, I reset the list&nbsp;<code>self.current_node_transactions</code>&nbsp;so that all future transactions can be inserted into this list and that again, list in future, will be assigned to a new block and so on. take some time and let it sink in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In next line, I am appending newly created block to the chain, (No rocket science here)<br>finally, I am returning created block object.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now let’s create genesis block. For that, I shall make use of&nbsp;<code>create_new_block()</code>&nbsp;method</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def create_genesis_block(self):  
    self.create_new_block(proof=0, previous_hash=0)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As mentioned earlier, Genesis block is a special block, to create that I pass some default values to the&nbsp;<code>create_new_block</code>&nbsp;method. I chose&nbsp;<strong>proof</strong>&nbsp;and&nbsp;<strong>previous_hash</strong>&nbsp;both zero, These value can be anything though.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next method in the class is&nbsp;<code>create_new_transaction</code></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def create_new_transaction(self, sender, recipient, amount):  
    self.current_node_transactions.append({  
        'sender': sender,  
        'recipient': recipient,  
        'amount': amount  
    })  
  
    return self.get_last_block.index + 1 # Returning new block's index where this transaction will be stored</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>It’s a very straightforward method, just accept three parameters (sender’s address, recipient’s address and amount) and append the transaction data to&nbsp;<code>self.current_node_transactions</code>list. Whenever the new block is mined, this list will be assigned to that block and reset again as described in&nbsp;<code>create_new_block</code>&nbsp;method.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>in the last line, I’m returning that future (to be mined) block’s index, which will be&nbsp;<strong>current block’s index + 1</strong>.<br>(Remember Current block is the last block in the chain).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Alright, Now let’s talk about another method called&nbsp;<code>create_proof_of_work</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This method is very important to keep blockchain safe from spamming. This method will use an algorithm to generate a number that will be used to create a new mined block.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">@staticmethod  
def create_proof_of_work(previous_proof):  
    """  
    Generate "Proof Of Work"  
    A very simple \`Proof of Work\` Algorithm -  
    -> Find a number such that, Sum of the number and previous POW number is divisible by 7  
    """  
    proof = previous_proof + 1  
    while (proof + previous_proof) % 7 != 0:  
        proof += 1  
  
    return proof</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>For this tutorial’s purpose, I used this simple algorithm. you can use your own algorithm and set a difficulty level so that people can’t mine block easily.<br>(Remember, To Mine a new block, one needs to generate&nbsp;<strong>Proof Of Work</strong>)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Bitcoin uses the&nbsp;<a href="https://en.bitcoin.it/wiki/Hashcash">Hashcash</a>&nbsp;proof of work system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Last method(<code>get_last_block</code>) is just a helper method to get the last(current block) in the chain.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Awesome! Now we have a fully functional Blockchain class which can be used to create actual mining and transactions HTTP APIs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s test our BlockChain class -</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">blockchain = BlockChain()  
  
print(">>>>> Before Mining...")  
print(blockchain.chain)  
  
last_block = blockchain.get_last_block  
last_proof = last_block.proof  
proof = blockchain.create_proof_of_work(last_proof)  

# Sender "0" means that this node has mined a new block  
# For mining the Block(or finding the proof), we must be awarded with some amount(in our case this is 1)  

blockchain.create_new_transaction(  
    sender="0",  
    recipient="address_x",  
    amount=1,  
)  

last_hash = last_block.get_block_hash  
block = blockchain.create_new_block(proof, last_hash)  
  
print(">>>>> After Mining...")  
print(blockchain.chain)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>OUTPUT:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">>>>>> Before Mining...  
0 - 0 - 0 - [] - 1514822766.046376  
  
>>>>> After Mining...  
0 - 0 - 0 - [] - 1514822766.046376  
1 - 7 - 96da8fdda8a8dea8a445ee220e27b961f64017f111c39145984eca146a048161 - [{'sender': '0', 'amount': 1, 'recipient': 'address_x'}] - 1514822766.046598</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>That’s all for this post. I hope you learned something.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Thank you for reading this :)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/gjain0/blockchain-python/blob/master/blockchain.py">You can find the complete source code here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I kept it very simple just for educational purpose. If you have any suggestions or questions or found any errors/bugs, let me know in the comments.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In part-2, We’ll be implementing fully decentralized blockchain network by exposing few APIs written in&nbsp;<a href="http://flask.pocoo.org/">Flask</a>. That will cover remaining concepts like&nbsp;<strong>Node</strong>,&nbsp;<strong>Consensus,</strong>&nbsp;etc<strong>.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="edit-part-2-is-here">EDIT:&nbsp;<a href="https://www.pyscoop.com/building-a-simple-blockchain-in-python-part-2/">Part-2 is here</a>!</h3>
<!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Learn basics of Blockchain and build a simple blockchain system using Python.]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2019-06-03 09:10:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-03 09:10:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[building-a-simple-blockchain-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="bitcoin"><![CDATA[Bitcoin]]></category>
		<category domain="post_tag" nicename="blockchain"><![CDATA[Blockchain]]></category>
		<category domain="post_tag" nicename="cryptocurrency"><![CDATA[Cryptocurrency]]></category>
		<category domain="post_tag" nicename="ethereum"><![CDATA[Ethereum]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<category domain="post_tag" nicename="virtualcurrency"><![CDATA[VirtualCurrency]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590326961;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:75;}i:1;a:1:{s:2:"id";i:23;}i:2;a:1:{s:2:"id";i:111;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[160]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-05-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Building a Simple Blockchain in Python - Part 2</title>
		<link>https://www.pyscoop.com/building-a-simple-blockchain-in-python-part-2/</link>
		<pubDate>Mon, 01 Jul 2019 09:13:35 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=75</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":4} -->
<h4 id="note-this-is-the-2nd-part-of-my-previous-post"><em>Note: This is&nbsp;<a href="https://www.pyscoop.com/building-a-simple-blockchain-in-python/">the 2nd part of my previous post</a>.</em></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the first part, we built a simple BlockChain Class. In this post, we’ll be writing HTTP APIs, using that class, to create a simple decentralized BlockChain Network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This post also assumes that you are familiar with&nbsp;<a href="http://flask.pocoo.org/">Flask(Web Framework for Python)</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Alright, Let’s start!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below is the current implementation of our code (<strong>blockchain.py</strong>&nbsp;file) -</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="blockchainpy">blockchain.py</h1>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import time  
import hashlib  
  
class Block(object):  
    ...  
  
class BlockChain(object):  
    ...</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>I’ll continue editing this file to add HTTP APIs. You can create a separate file and import BlockChain class in it, but for the sake of this tutorial, I’ll be using only this file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="1-setting-up-flask">1) Setting up Flask</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First, we need to install Flask. simply run&nbsp;<code>pip install flask</code>(in virtualenv) or&nbsp;<code>sudo pip install flask</code>&nbsp;(for system-wide installation)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now Import Flask and create an object of that class.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="blockchainpy-1">blockchain.py</h1>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import time  
import hashlib  
  
class Block(object):  
    ...  
  
class BlockChain(object):  
    ...  
  
from flask import Flask  
  
app = Flask(__name__)  
  
@app.route('/create-transaction', methods=['POST'])  
def create_transaction():  
    pass  
  
app.run(debug=True)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the line,<code>app = Flask(__name__)</code>&nbsp;we are creating an object of Flask class which will be a&nbsp;<a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">WSGI</a>&nbsp;application.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In next 2 lines, I’m binding a URL to a function, So whenever someone calls the URL, this function will be executed.<br>I’m using&nbsp;<code>route()</code>&nbsp;decorator to binding URL. This decorator takes a number of arguments. For now, we need to worry about only two arguments, URL and HTTP Verb(Method).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the last line, I’m calling&nbsp;<code>run()</code>&nbsp;method to run the application server.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At this point, you should be able to see below output after running the command (<code>python blockchain.py</code>)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">$ python blockchain.py  
 \* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)  
 \* Restarting with stat  
 \* Debugger is active!  
 \* Debugger PIN: 123-456-789</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><em>NOTE: default HOST is 127.0.0.1 and PORT is 5000. (If you wish to run on different host/port, you can do so by providing the information in&nbsp;<code>run()</code>&nbsp;method itself.&nbsp;<code>app.run(host=your_host, port=your_port, debug=True)</code></em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also provide host and port on the command line, for that I use&nbsp;<a href="https://docs.python.org/3/library/argparse.html">argparse</a>&nbsp;module.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Just add below code before app.run() statement</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from argparse import ArgumentParser  
  
parser = ArgumentParser()  
parser.add_argument('-H', '--host', default='127.0.0.1')  
parser.add_argument('-p', '--port', default=5000, type=int)  
args = parser.parse_args()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>and then use args variable to pass the information in the run() method</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">app.run(host=args.host, port=args.port, debug=True)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can test this by running the server as</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">$ python app.py -p 5001  
\* Running on http://127.0.0.1:5001/ (Press CTRL+C to quit)  
\* Restarting with stat  
\* Debugger is active!  
\* Debugger PIN: 123-456-789</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Awesome! you are all set to write APIs</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="2-writing-blockchain-network-apis">2) Writing BlockChain Network APIs</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let’s create a blueprint of basic required APIs.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="blockchainpy-2">blockchain.py</h1>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">...  

from uuid import uuid4  
from flask import Flask  
  
app = Flask(__name__)  
  
blockchain = BlockChain()  
  
node_address = uuid4().hex  # Unique address for current node  
  
@app.route('/create-transaction', methods=['POST'])  
def create_transaction():  
    pass  
  
@app.route('/mine', methods=['GET'])  
def mine():  
    pass  
  
@app.route('/chain', methods=['GET'])  
def get_full_chain():  
    pass  
  
  
from argparse import ArgumentParser  
parser = ArgumentParser()  
parser.add_argument('-H', '--host', default='127.0.0.1')  
parser.add_argument('-p', '--port', default=5000, type=int)  
args = parser.parse_args()  
  
app.run(host=args.host, port=args.port, debug=True)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>I’ve bound three URLs to 3 method -</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>The first method will be used to process the new transaction (will accept send, recipient and amount information in payload)</li><li>The second method will be used to mine a new block and some reward money will be awarded to current node/server.</li><li>The third method will be used to get the full chain on this node</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Also, you might be wondering what is the use of line&nbsp;<code>node_address = uuid4().hex</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This will give us a globally unique string and I’ll be using that to as a current node’s address. This address will be used when we have multiple nodes in blockchain network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Great!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s fill these functions with some logic.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Before that, we need to import<code>jsonify</code>. APIs will use this method to return the response in JSON format(JSON Content-Type).<br>Modify the line where you are importing Flask.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from flask import Flask, jsonify</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li><strong>Create Transaction</strong><code>@app.route('/create-transaction', methods=['POST']) def create_transaction(): transaction_data = request.get_json() # Accepting Payload from user in JSON content type index = blockchain.create_new_transaction(**transaction_data) response = { 'message': 'Transaction has been submitted successfully', 'block_index': index } return jsonify(response), 201 </code>Will accept transaction payload</li><li><strong>Mine</strong><code>@app.route('/mine', methods=['GET']) def mine(): block = blockchain.mine_block(node_address) response = { 'message': 'Successfully Mined the new Block', 'block_data': block } return jsonify(response) </code>Will Mine new block</li><li><strong>Get Full Chain</strong><code>@app.route('/chain', methods=['GET']) def get_full_chain(): response = { 'chain': blockchain.get_serialized_chain } return jsonify(response) </code>Will return full chain</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Let’s interact with these APIs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Start your Flask app server&nbsp;<code>$ python blockchain.py</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>let’s check what we have in our blockchain’s chain…</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">$ curl "http://127.0.0.1:5000/chain"  
{  
    "chain": [  
     {  
        "index": 0,  
        "previous_hash": 0,  
        "proof": 0,  
        "timestamp": 1515310711.279973,  
        "transactions": []  
     }  
    ]  
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>That was expected. I have one block in my chain which genesis block.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s create a transaction now -</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">$ curl -X POST -H "Content-Type: application/json" -d '{"sender": "addr1", "recipient": "addr2", "amount": 3}' "http://127.0.0.1:5000/create-transaction"  
{  
   "block_index": true,  
   "message": "Transaction has been submitted successfully"  
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But if I check the chain again(as shown above) you won’t see any change, that’s because you haven’t mined a new block that will hold this newly created transaction. Okay, In that case, we should mine a new block. Let’s do that.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">$ curl "http://127.0.0.1:5000/mine"  
{  
     "block_data": {  
         "index": 1,  
         "previous_hash": "d10ef66c6672fdd5552d8ffde95692bdce80cf65cc901f96659bb802657c3f52",  
         "proof": 7,  
         "timestamp": 1515311824.6986,  
         "transactions": [  
           {  
             "amount": 3,  
             "recipient": "addr2",  
             "sender": "addr1"  
           },  
           {  
             "amount": 1,  
             "recipient": "1e1b776c1ef1477883391a2bb3160c5b",  
             "sender": "0"  
           }  
         ]  
     },  
     "message": "Successfully Mined the new Block"  
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see I have two transactions in the transactions list. The first one is we created in previous API call and the second transaction is awarded to miner by system(If you are not sure what exactly is this, I would recommend checking the first part of this post&nbsp;<a href="https://www.pyscoop.com/building-a-simple-blockchain-in-python/">here</a>)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now let’s see what our chain looks like now…</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">$ curl "http://127.0.0.1:5000/chain"  
{  
 "chain": [  
  {  
    "index": 0,  
    "previous_hash": 0,  
    "proof": 0,  
    "timestamp": 1515311789.924022,  
    "transactions": []  
  },  
  {  
    "index": 1,  
    "previous_hash": "d10ef66c6672fdd5552d8ffde95692bdce80cf65cc901f96659bb802657c3f52",  
    "proof": 7,  
    "timestamp": 1515311824.6986,  
    "transactions": [  
      {  
       "amount": 3,  
       "recipient": "addr2",  
       "sender": "addr1"  
      },  
      {  
       "amount": 1,  
       "recipient": "1e1b776c1ef1477883391a2bb3160c5b",  
       "sender": "0"  
      }  
    ]  
  }  
 ]  
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Great! we can see two blocks. This is a very simple Blockchain service, but this is not decentralized yet.<br>Let’s make it decentralized. We need two more services for that.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1) Register a node<br>2) Sync/Resolve Chain</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">@app.route('/register-node', methods=['POST'])  
def register_node():  
    node_data = request.get_json()  
    blockchain.create_node(node_data.get('address'))  
    response = {  
        'message': 'New node has been added',  
        'node_count': len(blockchain.nodes),  
        'nodes': list(blockchain.nodes),  
    }  
    return jsonify(response), 201</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This API will accept an address in the payload, after that, I’m calling&nbsp;<strong>create_node</strong>&nbsp;method which I created in the previous article. This method will register a node to our blockchain node set/list.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Getting confused?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In a decentralized network, all nodes/servers have the copy of all transactions/chain etc. If someone made any changes in any node(i.e. new transaction or mine a new block), we have to somehow inform other nodes and make them sync their chain with the updated data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So whenever we create a new node in Blockchain network we have to send our node’s address to all other nodes available in the network so that they can register our node and in future, all node can sync with each other.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Still not clear? take some time to let that sink in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>let’s register one node to our server. hit the blow curl command -</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">$ curl -X POST -H "Content-Type: application/json" -d '{"address": "http://127.0.0.1:5001"}' "http://127.0.0.1:5000/register-node"  
{  
   "message": "New node has been added",  
   "node_count": 1,  
   "nodes": [  
     "http://127.0.0.1:5001"  
   ]  
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Did you notice? I’m running the server on 5000 port but in the payload, I pass&nbsp;<strong>5001.</strong>&nbsp;That’s another server’s port number which we are going to run parallelly. Because I’m running on the same machine, I had to provide a different port number. if you have two machines you can pass the address of that machine.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can add as many as nodes you want.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s start another node in a new tab -</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are following this post line by line you should have a blockchain.py file.<br><strong>$ python blockchain.py -p 5000</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Cool, Now we have two nodes/servers running on the same machine.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now comes the most interesting and important part of Blockchain Network called&nbsp;<strong>Consensus</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, we need a helper function to get all chain from all nodes in blockchain network so that we can sync with the correct chain</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def get_neighbour_chains():  
    neighbour_chains = []  
  
    for node_address in blockchain.nodes:  
        resp = requests.get(node_address + url_for('get_full_chain')).json()  
        chain = resp['chain']  
        neighbour_chains.append(chain)  
  
    return neighbour_chains</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Above function will return a list of chains of all nodes in the Network. I’m calling each and every node’s chain API to get the chain.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>url_for('get_full_chain')</code> will give us the relative URL, bound to the method <strong>get_full_chain()</strong>, that is <strong>/chain</strong>. It’s similar to <strong>reverse()</strong> in Django.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">node_address + url_for('get_full_chain') # equals to 'http://127.0.0.1:5000 + '/chain'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>and the popular&nbsp;<a href="http://docs.python-requests.org/en/master/user/quickstart/">python-requests</a>&nbsp;library to call HTTP API. A really Simple function!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Alright! Let’s write the final API for our BlockChain Network. This API will sync all nodes with the correct chain.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You must be wondering how do I know which chain is correct if I have 1000 nodes in the network? so for the sake of this tutorial, I’ll be assuming that the longest chain is a valid chain and if there is more than one chain of the same length I would consider calling node’s chain is correct.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ofcourse, this is not the fully logically correct algorithm and may vary business to business, but you get the point!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s code the API, shall we?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">@app.route('/sync-chain', methods=['GET'])
def consensus():
    neighbour_chains = get_neighbour_chains()
    if not neighbour_chains:
       return jsonify({'message': 'No neighbour chain is available'})
    
    longest_chain = max(neighbour_chains, key=len) # Get the longest chain

    if len(blockchain.chain) >= len(longest_chain):  # If our chain is longest, then do nothing
        response = {
            'message': 'Chain is already up to date',
            'chain': blockchain.get_serialized_chain
        }
    else:  # If our chain isn't longest, then we store the longest chain
        blockchain.chain = [blockchain.get_block_object_from_block_data(block) for block in longest_chain]
        response = {
           'message': 'Chain was replaced',
           'chain': blockchain.get_serialized_chain
        }

    return jsonify(response)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Above Code is self-explanatory but still, you might be lost in&nbsp;<code>else</code>&nbsp;block.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">blockchain.chain = [blockchain.get_block_object_from_block_data(block) for block in longest_chain]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We know that&nbsp;<strong>blockchain.</strong><strong>chain</strong>&nbsp;attribute is a list of&nbsp;<strong>Block</strong>&nbsp;objects but longest chain we got from the neighbour_chain function is a list of python native Dict type. So we need to convert those Dicts into Block Object and insert into a list then we assign that list to&nbsp;<strong>blockchain.chain</strong>&nbsp;attribute.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And finally, we return the response if the chain has been replaced or not.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s test these API. (Make sure you are running both nodes/servers as described above)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="few-api-calling-helper-functions">Few API calling helper functions</h1>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def register_node(node_addr, parent_server):  
    requests.post(parent_server + '/register-node', json={'address': node_addr})  
    print("\\nOn Server {}: Node-{} has been registered successfully!\\n".format(parent_server, node_addr))  
  
def create_transaction(server, data):  
    requests.post(server + '/create-transaction', json=data).json()  
    print("On Server {}: Transaction has been processed!\\n".format(server))  
  
def mine_block(server):  
    requests.get(server + '/mine').json()  
    print("On Server {}: Block has been mined successfully!\\n".format(server))  
  
def get_server_chain(server):  
    resp = requests.get(server + '/chain').json()  
    print("On Server {}: Chain is-\\n{}\\n".format(server, resp))  
    return resp  
  
def sync_chain(server):  
    print("On Server {}: Started Syncing Chain . . .".format(server))  
    resp = requests.get(server + '/sync-chain')  
    print("On Server {}: Chain synced!\\n".format(server))  
  
  
# two servers are running on 5000 and 5001 port  
  
server1 = 'http://127.0.0.1:5000'  
server2 = 'http://127.0.0.1:5001'  
  
register_node(server2, server1) # server2 node will be register inside server1  
  
create_transaction(server2, {'sender': 'I', 'recipient': 'you', 'amount': 3})  
  
mine_block(server2) # Mined a new block on server2  
  
get_server_chain(server1) # server1's chain  
get_server_chain(server2) # server2's chain  
  
sync_chain(server1) # updating server1's chain with neighbour node's chain  
  
get_server_chain(server1) # server1's chain after syncing</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>After running above code you will see the difference between server1’s chain before and after syncing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That’s all for this post. I hope you enjoyed and learned something.<br>You can find the complete source code&nbsp;<a href="https://github.com/gjain0/blockchain-python">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you have any suggestions or questions or found any errors/bugs, let me know in the comments.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy Mining :)</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[In this post, we’ll be writing HTTP APIs to create a simple decentralized BlockChain Network.]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date><![CDATA[2019-07-01 09:13:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-01 09:13:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[building-a-simple-blockchain-in-python-part-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="bitcoin"><![CDATA[Bitcoin]]></category>
		<category domain="post_tag" nicename="blockchain"><![CDATA[Blockchain]]></category>
		<category domain="post_tag" nicename="cryptocurrency"><![CDATA[Cryptocurrency]]></category>
		<category domain="post_tag" nicename="encoding"><![CDATA[Encoding]]></category>
		<category domain="post_tag" nicename="ethereum"><![CDATA[Ethereum]]></category>
		<category domain="post_tag" nicename="hash"><![CDATA[Hash]]></category>
		<category domain="post_tag" nicename="sha256"><![CDATA[SHA256]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<category domain="post_tag" nicename="virtualcurrency"><![CDATA[VirtualCurrency]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[163]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019-06-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-05-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590320185;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:72;}i:1;a:1:{s:2:"id";i:90;}i:2;a:1:{s:2:"id";i:86;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Machine Learning for beginners with Amazon SageMaker</title>
		<link>https://www.pyscoop.com/machine-learning-for-beginners-with-amazon-sagemaker/</link>
		<pubDate>Fri, 07 Feb 2020 09:21:18 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3 id="introduction">Introduction</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Artificial Intelligence(AI) is one of the fastest-growing areas in technology and Machine Learning is one of the most sought domains in AI. Currently, there are a lot of Machine Learning jobs available in the market but not enough Machine Learning Engineers. And no so surprisingly, Machine Learning jobs are one of the highest paying jobs in the market.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Luckily, Nowadays, Leading cloud service providers to give us services that ease the development of Machine learning tools. So, to start with Machine Learning you don’t need to know complex mathematical models and algorithms or experience of any high-level libraries and frameworks such as TensorFlow, PyTorch, Pandas, Scikit-learn, Scipy, Numpy, Keras, etc. However, as you make progress with machine learning skills and asked to build a more complex system, you would need to learn these libraries/frameworks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this tutorial, you won’t need to worry about these complex libraries and frameworks. Only basic Python programming knowledge and an&nbsp;<a href="https://aws.amazon.com/">AWS</a>&nbsp;account is prerequisite for this tutorial.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Whole tutorial will be posted in three parts.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker/">Part 1 - Basics of Machine Learning and AWS Sagemaker</a></li><li><a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker-part-2/">Part 2 - Hands on: Building and training a machine learning model for a real world problem</a></li><li><a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker-part-3/">Part 3 - Further improvements on previously build model and exposing to end user</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>If you have basic knowledge of common terminologies used in Machine Learning world, you can skip the first part and directly jump to&nbsp;<a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker-part-2/">2nd part</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So without a further ado and all the AI/ML bullshit, let’s start with the tutorial. but before that lets quickly revisit the common terminologies used in standard ML application development flow.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="terminology">Terminology</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Machine Learning development usually consists of the below steps.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Data collection / Preparation / Processing (Creating training, validation and testing set)</li><li>Choosing the model/Algorithm</li><li>Train the model with training and validation set</li><li>Verify the trained model with the testing set.</li><li>Deploy the model</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Advance steps:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Model Hyperparameters Tuning</li><li>Model Versioning</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 id="jupyteripython-notebook">Jupyter(IPython) Notebook</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jupyter Notebook is an open-source interactive web app that allows you to create and share web pages that contain live code, equations, visualizations, and text. It’s quite convenient for data scientists and AI/ML developers to explore and visualize data in the Jupyter Notebook.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":174,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://i0.wp.com/www.pyscoop.com/wp-content/uploads/2020/05/notebook.png?fit=810%2C698&amp;ssl=1" alt="" class="wp-image-174"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see in the above image, you can use Notebook to run a piece of code, plot charts or anything that you can do in standard Ipython shell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Amazon SageMaker provides fully managed&nbsp;<a href="https://jupyter.org/">Jupyter Notebook</a>&nbsp;instances that help in analyzing and processing the data easily.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>More details can be found on&nbsp;<a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi.html">AWS SageMaker Notebook page</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="1-data-processing--preparing">1. Data Processing &amp; Preparing</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As we know the only goal of machine learning is to predict results by feeding the data. So preparing the data to train models and input data is really important.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the first step, We work on a dataset that needs to be processed and converted in a format that can be fed to the Machine Learning model.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Datasets usually gathered by our application but there are other platforms available as well. for example, Apache provides a very good dataset for&nbsp;<a href="https://spamassassin.apache.org/old/publiccorpus/">legit and spam emails</a>, IMDB provides a large dataset for&nbsp;<a href="http://ai.stanford.edu/~amaas/data/sentiment/">movie reviews that tells us whether a movie is good or bad</a>.&nbsp;<a href="https://www.kaggle.com/">Kaggle</a>&nbsp;is one of the best place to explore different datasets and solutions proposed by developers across the globe.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once we have processed the data, we split it into three subsets Training, Validation and Testing set.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Training set is used to train the model, the validation set is used to validate the model and the testing set is used to test the trained model.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="2-choosing-a-model">2. Choosing a Model</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another important and difficult step is to choose a proper algorithm/model for your problem. Multiple models can be used for a single problem and all of them could perform differently. So most of the time we play with different models to find the best suitable model for our problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some of the popular ones are -</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Linear Regression</li><li>Decision Tree</li><li>Random Forest</li><li>Logistic Regression</li><li>Naive Bayes</li><li>Neural Network (multi-layered model)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>To get an idea of what model is best for your problem, you can refer to&nbsp;<a href="https://scikit-learn.org/stable/tutorial/machine_learning_map/index.html">Scikit-Learn Machine Learning Map</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Amazon SageMaker provides several built-in machine learning algorithms that fit most of the solutions. Below is the example of using the XGBoost algorithm using SageMaker</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import sagemaker
from sagemaker.amazon.amazon_estimator import get_image_uri 

session = sagemaker.Session()

# Get the container for XGBoost
container = get_image_uri(session.boto_region_name, 'xgboost', repo_version='0.90-2')  # Get the URI for new container
xgb_estimator = sagemaker.estimator.Estimator(
    container, # The location of the container we wish to use
    role,                                    # What is our current IAM Role
    train_instance_count=1,                  # How many compute instances
    train_instance_type='ml.m4.xlarge',      # What kind of compute instances
    output_path='s3://{}/{}/output'.format(session.default_bucket(), prefix),
    sagemaker_session=session
)
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you want to use XGBoost as a framework, use it directly -</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import sagemaker.xgboost

xgb_estimator = XGBoost(
     entry_point='myscript.py', 
     source_dir,
     model_dir, 
     train_instance_type,                    
     train_instance_count, 
     hyperparameters, 
     role, 
     base_job_name, 
     framework_version='0.90-2', 
     py_version
)
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":4} -->
<h4 id="3-train-the-model">3. Train the Model</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this step, we feed the chosen algorithm with the training dataset and then algorithm learns from it to predict the result for future input data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once we have the estimator object ready, we can feed the estimator with the training dataset and validation dataset to avoid overfitting. We provide the path to datasets to estimator object. Another benefit of using SageMaker is that we can conveniently provide the path of S3 files.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb_estimator.fit({'train': training_data_set_path, 'validation': validation_data_set_path})</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":4} -->
<h4 id="3-test-the-model">3. Test the Model</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once we trained the model, we test the model with the testing dataset and assert the returned result accuracy. To do this we will make use of SageMaker’s Batch Transform functionality. To start with, we need to build a transformer object from our trained(fit) model. We, then, ask SageMaker to begin a batch transform job using our trained model and applying it to the test data.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb_transformer = xgb_estimator.transformer(instance_count=1, instance_type='ml.m4.xlarge')
xgb_transformer.transform(test_data_set_path, content_type='text/csv', split_type='Line')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>It will be executed in the background. To see what is the job doing, we can use the&nbsp;<code>wait()</code>&nbsp;method. This will give us detailed output that we can use to trace the errors in case something goes wrong.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb_transformer.wait()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We use this transformer object to find out the accuracy of the trained model with the test data that we provided to the transformer class.&nbsp;<code>xgb_transformer.output_path</code>&nbsp;is the path of predictions of the test dataset. we provide this prediction and the original/expected result to a function that sklearn provide (i.e&nbsp;<code>accuracy_score</code>)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from sklearn.metrics import accuracy_score
accuracy_score(expected, actual_predicted, normalize=True)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This will give us the accuracy score between 0 to 1, Where 1 means the best performance/prediction.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="4-deploy-the-model">4. Deploy the Model</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once we train and test the model, we need to deploy so that we can feed the trained model with real/live data and predict the result. With SageMaker, This can be done in one line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb_predictor = xgb_estimator.deploy(initial_instance_count=1, instance_type='ml.m4.xlarge')</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":4} -->
<h4 id="5-model-hyperparameters-tuning">5. Model Hyperparameters Tuning</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If we further want to improve the accuracy of the trained model, we play with hyperparameters(AKA meta-parameters) and try to make them as optimized as we can to increase the accuracy. Every Model itself has a lot of parameters that are crucial and important. However, few extra parameters are not directly related to the model but can influence the training. such as no of iterations, batch size, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb_estimator.set_hyperparameters(
    max_depth=5, eta=0.2, gamma=4, min_child_weight=6, subsample=0.8, silent=0,
    objective='binary:logistic', early_stopping_rounds=10, num_round=500
)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Hyperparameters Tuning should be done before training the model. If we manipulate Hyperparameters after training, we need to train the model again.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb_estimator.fit({'train': training_data_set_path, 'validation': validation_data_set_path})
 
# And then deploy again
 
xgb_predictor = xgb_estimator.deploy(initial_instance_count=1, instance_type='ml.m4.xlarge')</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":5} -->
<h5 id="in-summary-all-the-above-steps-can-be-visualized-in-the-below-image-starting-from-fetching-the-data--">In summary, all the above steps can be visualized in the below image starting from fetching the data -</h5>
<!-- /wp:heading -->

<!-- wp:image {"id":175,"width":664,"height":436,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://www.pyscoop.com/wp-content/uploads/2020/02/ml-flow-1024x674.png" alt="" class="wp-image-175" width="664" height="436"/><figcaption><em>image source: aws.amazon.com</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the next(2nd) part, We’ll implement a full end-to-end solution using apache’s dataset to detect whether an email is spam or not. We’ll also be exploring different models/algorithms and compare their performance in the most easiest way possible.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="edit-part-2-is-here">EDIT:&nbsp;<a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker-part-2/">Part-2 is here</a>!</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[In this post we'll see how can we use AWS Sagemaker to build, train and deploy Machine Learning models. ]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2020-02-07 09:21:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-07 09:21:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[machine-learning-for-beginners-with-amazon-sagemaker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="amazon-web-services"><![CDATA[Amazon Web Services]]></category>
		<category domain="post_tag" nicename="artificial-intelligence"><![CDATA[Artificial Intelligence]]></category>
		<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="beginner"><![CDATA[Beginner]]></category>
		<category domain="post_tag" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="deep-learning"><![CDATA[Deep Learning]]></category>
		<category domain="post_tag" nicename="machine-learning"><![CDATA[Machine Learning]]></category>
		<category domain="post_tag" nicename="notebook"><![CDATA[Notebook]]></category>
		<category domain="post_tag" nicename="sagemaker"><![CDATA[SageMaker]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[169]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-05-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-07-07]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-03-07]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590306798;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:90;}i:1;a:1:{s:2:"id";i:86;}i:2;a:1:{s:2:"id";i:75;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Machine Learning for beginners with Amazon SageMaker - Part 2</title>
		<link>https://www.pyscoop.com/machine-learning-for-beginners-with-amazon-sagemaker-part-2/</link>
		<pubDate>Wed, 04 Mar 2020 10:32:31 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":4} -->
<h4 id="note-this-is-the-2nd-part-of-my-previous-post"><em>Note: This is&nbsp;<a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker/">the 2nd part of my previous post</a>.</em></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the previous post we learned the basics of Machine Learning and how can we leverage the AWS SageMaker to train and deploy Machine Learning models.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post, we are going to use the&nbsp;<a href="https://spamassassin.apache.org/old/publiccorpus/">Apache dataset for emails</a>&nbsp;to classify them into two groups, spam and genuine emails. To keep this tutorial simple, we’ll consider <strong>20030228_easy_ham.tar.bz2</strong> and <strong>20030228_spam.tar.bz2</strong> collections. They contain genuine and spam emails respectively. Each email is stored in a raw format in a separate file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The First thing We need to do is initiate a new instance of the Jupyter Notebook as we’ll be writing all the code in the Notebook itself. To do this, click on Notebook instances from the left panel as you can see in the below image.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":155,"width":552,"height":434,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://www.pyscoop.com/wp-content/uploads/2020/03/sagemakernb-1024x806.png" alt="AWS Sagemaker Notebook" class="wp-image-155" width="552" height="434"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Go through all the settings and options and launch the Notebook. For this tutorial, all the default configuration would be sufficient.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you face any issue or having trouble with SageMaker, you can follow the official document on&nbsp;<a href="https://docs.aws.amazon.com/sagemaker/latest/dg/gs-setup-working-env.html">how to setup a Notebook instance</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Alright! Time to write some code now.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="1-data-processing--preparing">1. Data Processing &amp; Preparing</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you have already gone through the&nbsp;<a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker/">first part of this post</a>, you’d be able to recall the first step that is, Data Processing &amp; Preparing. So in this step, we are going to explore the data and convert the data into the desired format.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, we need to download the data. Go ahead and execute below 3 lines in the Notebook. These lines will download the data and save it into a newly created directory called data.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> %mkdir data  # create a data folder inside current directory
 !wget -O data/ham.tar.bz2 https://spamassassin.apache.org/old/publiccorpus/20030228_easy_ham.tar.bz2
 !wget -O data/spam.tar.bz2 https://spamassassin.apache.org/old/publiccorpus/20030228_spam.tar.bz2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Then we’ll extract the downloaded tar.bz2 files.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> !tar xjvf data/ham.tar.bz2 -C data
 !tar xjvf data/spam.tar.bz2 -C data</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Two new folders&nbsp;<code>easy_ham</code>&nbsp;&amp;&nbsp;<code>spam</code>&nbsp;will be created. Each folder will contain email files.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can see each email is stored in a separate file. so we need to iterate over each file, extract the text and store in a list/array.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An important thing to note here is that these emails have different&nbsp;<code>content_type</code>&nbsp;header such as&nbsp;<code>text/plain</code>,&nbsp;<code>text/html</code>, etc. So we also need to convert non-text/plain type emails to text/plain so that all the emails are in a common format.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from bs4 import BeautifulSoup

def def convert_html_to_plain_email(email):
    """
    There are few emails which are in HTML format so we need to parse the HTML 
    and get the releavant content/message.
    """
    try:
        soup = BeautifulSoup(email, 'html.parser')
        return soup.text.replace('\n', '').encode('utf-8')
    except:
        return ''</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import os
import email
import email.policy

def get_parsed_email(data_dir):
    """
    A simple utility function that will hep us to get the parsed email data from the original dataset.
    """
    data = []

    for filename in os.listdir(data_dir):

        with open(os.path.join(data_dir, filename), 'rb') as f:
            email_obj = email.parser.BytesParser(policy=email.policy.default).parse(f)

        content_type = email_obj.get_content_type()

        if content_type == 'text/plain':
            data.append(email_obj.get_payload().replace('\n', '').encode('utf-8'))
        elif content_type == 'text/html':
            data.append(convert_html_to_plain_email(email_obj.get_payload()))
        else:
            continue

    return data</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the above function, you can see we are considering only&nbsp;<code>text/plain</code>&nbsp;&amp;&nbsp;<code>text/html</code>&nbsp;content_type, ignoring all other emails, just to keep it simple. Next, we’ll call this function for both spam and ham emails.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> ham_data = get_parsed_email('data/easy_ham')
 spam_data = get_parsed_email('data/spam')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>It’s always a good idea to take pause during data cleaning &amp; preparation step and try to visualize the data. Let’s see how our data looks like at this point.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":156,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://i1.wp.com/www.pyscoop.com/wp-content/uploads/2020/05/sagemaker_visual.png?fit=810%2C454&amp;ssl=1" alt="machine learning matplotlib" class="wp-image-156"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As we can see from the above image, after filtering out other content types, we have approx 85% ham and ~15% spam emails in our dataset. Let’s divide these datasets into training, validation and testing datasets.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To divide the data, we’ll use&nbsp;<a href="https://scikit-learn.org/">scikit’s</a>&nbsp;inbuilt helper function&nbsp;<code>train_test_split</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We need to typecast both dataset with NumPy Array(<code>np.array</code>) as the&nbsp;<code>train_test_split</code>&nbsp;will accept that datatype.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import numpy as np
X = np.array(ham_data + spam_data)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>we also need to create another NumPy Array of 0 and 1. That is an array of labels. 0 represent the ham email and 1 represent the spam email.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">y = np.array([0] * len(ham_data) + [1] * len(spam_data))</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Once we typecast both lists, we’ll call&nbsp;<code>train_test_split</code>&nbsp;and split into a ratio of 70-30. 70% training data and 30% testing data. There is no standard rule for this ratio. This can vary based on the problem in hand and available dataset.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from sklearn.model_selection import train_test_split
 
train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.3)

# split the training set further into training and validation set
train_X, val_X, train_y, val_y = train_test_split(train_X, train_y, test_size=0.3)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now convert these emails into words(tokenize).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import re

import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import *

def email_to_words(email):
    nltk.download("stopwords", quiet=True)
    email = email.decode('utf-8')
    email = re.sub(r"http\S+", "", email)  # replace all urls with empty string
    email = re.sub("\d+", "", email)  # replace numbers with empty string
    email = re.sub("[^a-zA-Z0-9]", " ", email.lower())  # convert all characters into lowercase letters and replace all non-alphanumerics with a space
    email = re.sub(r"\b[a-z]\b", "", email)  # replace single characters with empty string

    words = email.split()  # split into words
    words = [w for w in words if w not in stopwords.words("english")]  # remove all 'bad' words
    words = [PorterStemmer().stem(w) for w in words]

    return words</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Tokenizing training, validation and testing dataset.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">train_X = [email_to_words(email) for email in train_X]
val_X = [email_to_words(email) for email in val_X]
test_X = [email_to_words(email) for email in test_X]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Again, let’s take a pause and see how our data looks like at this point.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">train_X[0]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We get the below list of words, as expected.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">['fri','feb','pm','harri','haataja','wrote','local','one','main','upgrad','somewher','plu','orkplac','olen','ajatellut','pystytt','itselleni','lokaalin','apt','varaston','kun','suomesta','ei','tunnu','ytyv','julkista','peili','osaisitko','avittaa','hiukan','asiassa','eli','kuinka','hte','liikkeel','ensin','kannattane','peilata','varsinainen','rh','rpm','jostain','vaan','mill','softalla','rsync','ja','mist','funet','tuo','kannattaa','tehd','ajatuksia','peter','rpm','list','mail','list','rpm','list','freshrpm','net']</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>After splitting into words, we’ll sort the words according to their frequency of appearing across the datasets.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from collections import Counter

word_count = Counter(np.concatenate(train_X, axis=0))  # Count the frequency of words as they appear.
# Sort words based on frequency, Most frequent words appear at the first position.
sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now take only the top 10000 most frequent appearing words. Why only 10000? It’s because those are the most frequent words and would have more impact on deciding the result for future input data. Again, there is no hardcore rule for this number. You can play around with 5000 or 15000 words and compare the performance.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Assign a unique number to those 10000 words.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"># Limit the words vocabulary to 10000 words only.
sorted_words = list(zip(*sorted_words))[0]  # get a list of words from the dictionary
word_dict = {}
vocab_size = 10000
for idx, word in enumerate(sorted_words[:vocab_size], start=1):
    word_dict[word] = idx</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The last part of the data processing step is to convert the emails(list of words) into numeric representation based on the above mapping. We also need to make sure that all emails(after tokenization) are of equal length. To do that we need to decide a number that will be the length of the list of email words(i.e&nbsp;<code>train_X</code>). We decide to use 500 as the length. There would be emails that are of less than 500 words, for those, we’ll fill the list with ZEROs.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def convert_and_pad(word_dict, email, pad):
    NOWORD = 0  # We will use 0 to represent the 'no word' category

    working_sentence = [NOWORD] * pad
    for word_index, word in enumerate(email[:pad]):
        if word in word_dict:
            working_sentence[word_index] = word_dict[word]

    return working_sentence, min(len(email), pad)

def convert_and_pad_data(word_dict, data, pad):
    result = []
    lengths = []

    for email in data:
        converted, length = convert_and_pad(word_dict, email, pad)
        result.append(converted)
        lengths.append(length)

    return np.array(result), np.array(lengths)</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"># We need to convert all training, validation and testing dataset for future operations
train_X, train_X_len = convert_and_pad_data(word_dict, train_X, 500)

val_X, val_X_len = convert_and_pad_data(word_dict, val_X, 500)

test_X, test_X_len = convert_and_pad_data(word_dict, test_X, 500)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>At this stage, you should have a list of integers for each element in the above lists.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":157,"width":590,"height":523,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://i2.wp.com/www.pyscoop.com/wp-content/uploads/2020/05/converted.png?fit=810%2C717&amp;ssl=1" alt="machine learning pyscoop" class="wp-image-157" width="590" height="523"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Finally, We are done with the data processing step. You might want to grab a cup of coffee!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="2-choosing-the-modelalgorithm">2. Choosing the Model/Algorithm</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this tutorial, we’ll explore 3 different algorithms, Starting with simplest one&nbsp;<a href="https://en.wikipedia.org/wiki/Naive_Bayes_classifier#Gaussian_naive_Bayes">Gaussian Naive Bayes</a></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from sklearn.naive_bayes import GaussianNB

gnb = GaussianNB()  # Create the object of GaussianNB class

gnb.fit(train_X, train_y)  # Feed the object with training data to train the model.
 
# Once the training is complete, we can use the testing dataset to verify and test the model.
pred_y = gnb.predict(test_X)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Check the accuracy of our model.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from sklearn.metrics import accuracy_score
accuracy_score(test_y, pred_y)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We got an accuracy score of 0.8068, which is ~80% and can be considered as a good accuracy for the dataset we have.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Notice that we didn’t use the validation set (val_X) in this model. That is required by the Last model that we’ll be exploring.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s explore another Model that is Regression</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from sklearn.linear_model import LogisticRegression

# Create the object of LogisticRegression class with liblinear solver
logreg = LogisticRegression(solver='liblinear', random_state=23, max_iter=2000)
 
# Feed the object with training data to train the model.
logreg.fit(train_X, train_y)
 
# Once the training is complete, we can use the testing dataset to verify and test the model.
pred_y = logreg.predict(test_X)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Again, check the accuracy of our model.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">accuracy_score(test_y, pred_y)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Well, This didn’t perform better than GaussianNB. We got the accuracy score of 0.7831.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now let’s explore the 3rd and last Algorithm, XGBoost and compare the performance with previously explored 2 models. You might have noticed that we haven’t used Sagemaker significantly so far. We’ll be doing that now.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import sagemaker
from sagemaker import get_execution_role
from sagemaker.amazon.amazon_estimator import get_image_uri

session = sagemaker.Session()
role = get_execution_role()  # AWS IAM role
container = get_image_uri(session.boto_region_name, 'xgboost')  # Get the latest image</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Before creating the XGBoost estimator(object), we need to convert data set into CSV files and upload these files on S3 so that it can be used by Sagemaker easily.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We first need to typecast our dataset with&nbsp;<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html">Panda’s DataFrame data structure</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import pandas as pd

pd.concat([pd.DataFrame(train_y), pd.DataFrame(train_X_len), pd.DataFrame(train_X)], axis=1).to_csv(os.path.join('data', 'train.csv'), header=False, index=False)

pd.concat([pd.DataFrame(val_y), pd.DataFrame(val_X_len), pd.DataFrame(val_X)], axis=1).to_csv(os.path.join('data', 'val.csv'), header=False, index=False)

pd.concat([pd.DataFrame(test_X_len), pd.DataFrame(test_X)], axis=1).to_csv(os.path.join('data', 'test.csv'), header=False, index=False)
# Notice that we are not using `test_y` value in the above statement as we did for the training and validation set. that's because
# we'll use the testing data set to verify the model and match the reutrned result against the `test_y`.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Then upload these CSV files to S3.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">prefix = 'email_detection'  # Prefix for S3 bucket where training, validation and testing dataset will be uploaded
data_dir = 'data'  # Local directory(created in the very first step in the tutorial)
train_location = session.upload_data(os.path.join(data_dir, 'train.csv'), key_prefix=prefix)
val_location = session.upload_data(os.path.join(data_dir, 'val.csv'), key_prefix=prefix)
test_location = session.upload_data(os.path.join(data_dir, 'test.csv'), key_prefix=prefix)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Create the Estimator object for the XGBoost container we obtained in the previous step.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb = sagemaker.estimator.Estimator(
     container, # The location of the container we wish to use, created in the past step
     role,                                    # What is our current IAM Role
     train_instance_count=1,                  # How many compute instances
     train_instance_type='ml.m4.xlarge',      # What kind of compute instances
     output_path='s3://{}/{}/output'.format(session.default_bucket(), prefix),
     sagemaker_session=session
)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Set the hyperparameter values. We’ll learn more about these in the next part of this series.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb.set_hyperparameters(
    max_depth=5, eta=0.2, gamma=4, min_child_weight=6, subsample=0.8, silent=0,
    objective='binary:logistic', early_stopping_rounds=10, num_round=500
)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Remember, in the previous step we uploaded CSV files on S3. Time to get those files back so that we can feed them into XGBoost Estimator/Model.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">s3_input_train = sagemaker.s3_input(s3_data=train_location, content_type='csv')
s3_input_val = sagemaker.s3_input(s3_data=val_location, content_type='csv')

# feed the data to train the model.
xgb.fit({'train': s3_input_train, 'validation': s3_input_val})</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Notice that, here we used the validation set along with the training set.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let’s see how our trained model behaves with the testing dataset.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb_transformer = xgb.transformer(instance_count=1, instance_type='ml.m4.xlarge')
xgb_transformer.transform(test_location, content_type='text/csv', split_type='Line')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Since it’s a background process and might take a while, we’ll use&nbsp;<code>.wait()</code>&nbsp;method to see what’s happening behind the scene. This help us in debugging as well if something goes wrong during this transformation.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb_transformer.wait()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Once our model is done with consuming the testing dataset, it’ll upload the result file on S3. We need to download that file on the local instance(EC2). We can use some Notebook magic to do so.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"># Copy the stored output of emails to local from S3 so that we can work on that file.
!aws s3 cp --recursive $xgb_transformer.output_path $data_dir</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Finally, Convert the downloaded data into a more readable and usable format.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">predictions = pd.read_csv(os.path.join(data_dir, 'test.csv.out'), header=None)
pred_y = [round(num) for num in predictions.squeeze().values]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Check the accuracy of our model.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">accuracy_score(test_y, pred_y)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We got an accuracy score of 0.8697. That’s quite a good improvement over previously explored two models.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well, That’s all for this post. In the 3rd and last part of this series, we’ll try to improve the performance of above XGBoost model. We’ll also explore how can we tweak the hyperparameters to improve the performance. We’ll also quickly learn how to deploy the model using Sageamker.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="edit-part-3-is-here">EDIT:&nbsp;<a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker-part-3/">Part-3 is here</a>!</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Learn to train a Machine Learning model for a real world problem and deploy on production. ]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2020-03-04 10:32:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-04 10:32:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[machine-learning-for-beginners-with-amazon-sagemaker-part-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="amazon-web-services"><![CDATA[Amazon Web Services]]></category>
		<category domain="post_tag" nicename="artificial-intelligence"><![CDATA[Artificial Intelligence]]></category>
		<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="beginner"><![CDATA[Beginner]]></category>
		<category domain="post_tag" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="deep-learning"><![CDATA[Deep Learning]]></category>
		<category domain="post_tag" nicename="machine-learning"><![CDATA[Machine Learning]]></category>
		<category domain="post_tag" nicename="notebook"><![CDATA[Notebook]]></category>
		<category domain="post_tag" nicename="sagemaker"><![CDATA[SageMaker]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[201]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[auto-draft]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-05-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590333639;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:80;}i:1;a:1:{s:2:"id";i:90;}i:2;a:1:{s:2:"id";i:75;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[machine-learning-for-beginners-with-aws-sagemaker-part-2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Machine Learning for beginners with Amazon SageMaker - Part 3</title>
		<link>https://www.pyscoop.com/machine-learning-for-beginners-with-amazon-sagemaker-part-3/</link>
		<pubDate>Tue, 07 Apr 2020 10:55:56 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":4} -->
<h4 id="note-this-is-the-3rd-part-of-machine-learning-for-beginners-with-amazon-sagemaker-series"><em>Note: This is&nbsp;<a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker/">the 3rd part of “Machine Learning for beginners with Amazon SageMaker” series</a>.</em></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the previous post, we learned how can we leverage the AWS SageMaker to train and test Machine Learning models. In this post, we’ll try to improve the XGBoost model that we created in the last post by tuning the Hyperparameters. For beginners, it can be quite difficult to play with Hyperparameters without fully understanding them. Again, Sagemaker comes with a handy utility that can tell us the best Hyperparameters configuration to obtain the best Model.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We’ll also try to create a web application using the deployed model.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="model-hyperparameters-tuning">Model Hyperparameters Tuning</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We use HyperparameterTuner class and provide the range of values for different Hyperparameters. Then, HyperparameterTuner will run the model for all the values in the range and compare the performance of each run. In the end, it will return the best model with the Hyperparameter that were used for that particular model.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can get more details by looking at the below code.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from sagemaker.tuner import IntegerParameter, ContinuousParameter, HyperparameterTuner


xgb_hyperparameter_tuner = HyperparameterTuner(
    estimator=xgb, # The estimator object to use as the basis for the training jobs.
    objective_metric_name='validation:rmse', # The metric Root Mean Square Error used to compare trained models.
    objective_type='Minimize', # We wish to minimize the Root Mean Square Error.
    max_jobs=20, # The total number of models to train
    max_parallel_jobs=3, # The number of models to train in parallel
    hyperparameter_ranges={
        'max_depth': IntegerParameter(1, 10),
        'eta': ContinuousParameter(0.05, 0.5),
        'min_child_weight': IntegerParameter(1, 10),
        'subsample': ContinuousParameter(0.5, 0.9),
        'gamma': ContinuousParameter(0, 10),
        'alpha': ContinuousParameter(0, 2)
    }
)   </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now, if you can recall from the&nbsp;<a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker/">first post</a>, if we change the hyperparameters, we need to train the model again.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We have created a Hyperparameter Tuner object. We’ll use this to train the model again by feeding the training and validation dataset as we did in the&nbsp;<a href="https://www.pyscoop.com/machine-learning-for-beginners-with-aws-sagemaker-part-2/">previous post</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> xgb_hyperparameter_tuner.fit({'train': s3_input_train, 'validation': s3_input_val})</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We’ll call the&nbsp;<code>wait()</code>&nbsp;method to print the logs of the training job</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> xgb_hyperparameter_tuner.wait()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Once the job is done, we can get the best model by simply calling the&nbsp;<code>best_training_job()</code>&nbsp;method.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> best_training_job = xgb_hyperparameter_tuner.best_training_job()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The value of&nbsp;<code>best_training_job</code>&nbsp;would be like ‘sagemaker-xgboost-200307-1407-018-bd442cf0’. We need to attach this job to the estimator and feed with testing data to see the performance.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> xgb_attached = sagemaker.estimator.Estimator.attach(best_training_job)
 xgb_transformer = xgb_attached.transformer(instance_count=1, instance_type='ml.m4.xlarge')
 xgb_transformer.transform(test_location, content_type='text/csv', split_type='Line')
 xgb_transformer.wait()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Once this is done with transformation, it’ll upload the result file on S3. We need to download that file on the local instance(EC2). We can use some Notebook magic to do so(as we did in the previous post).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> !aws s3 cp --recursive $xgb_transformer.output_path $data_dir</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Finally, Convert the downloaded data into a more readable and usable format.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> predictions = pd.read_csv(os.path.join(data_dir, 'test.csv.out'), header=None)
 pred_y = [round(num) for num in predictions.squeeze().values]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Check the accuracy of our model.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> accuracy_score(test_y, pred_y)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Awesome, We got an accuracy score of 0.8839 which is almost 10% more than the very first score(0.80) we got with GaussianNB.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="deploy-the-model">Deploy the Model</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now the last thing we want to do is deploy our trained model so that it can be used by any user.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> xgb_deployed_predictor = xgb_hyperparameter_tuner.deploy(initial_instance_count=1, instance_type='ml.m4.xlarge')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Or if you are not using Hyperparameter Tuner, you can simply use the&nbsp;<code>xgb</code>&nbsp;estimator object</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> xgb_deployed_predictor = xgb.deploy(initial_instance_count=1, instance_type='ml.m4.xlarge')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When deploying a model you are asking SageMaker to launch a compute instance that will wait for data to be sent to it. This is important to know since the cost of a deployed endpoint depends on how long it has been running for. We can get this endpoint by using&nbsp;<code>.endpoint</code>&nbsp;attribute.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> xgb_deployed_predictor.endpoint</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We need to tell the endpoint what format the data we are sending in</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> from sagemaker.predictor import csv_serializer

 xgb_deployed_predictor.content_type = 'text/csv'
 xgb_deployed_predictor.serializer = csv_serializer</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We can use this endpoint to predict and check the performance of our model by feeding test data</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> Y_pred = xgb_deployed_predictor.predict(X_test.values).decode('utf-8')

 # predictions is currently a comma delimited string and so we would like to break it up as a numpy array.
 Y_pred = np.fromstring(Y_pred, sep=',')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>WARNING:&nbsp;<strong>if you are no longer using a deployed endpoint you should shut it down!</strong>&nbsp;you can do that by simply executing&nbsp;<code>delete_endpoint</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">xgb_deployed_predictor.delete_endpoint()</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":4} -->
<h4 id="creating-a-webapp-for-the-deployed-model">Creating a WebApp for the deployed model</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once you deploy the trained model, you get an endpoint as described above. To make use of that endpoint, we can set up a simple web app using the below piece of code.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"> import boto3

 runtime = boto3.Session().client('sagemaker-runtime')
 # Use the SageMaker runtime to invoke the endpoint and send email to that endpoint
 response = runtime.invoke_endpoint(
     EndpointName=xgb_deployed_predictor.endpoint,     # The name of the endpoint we created
     ContentType='text/csv',                         # The data format that is expected
     Body=email                              # email body that we want to classify
 )

result = response['Body'].read().decode('utf-8')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>One simple way would be to create a&nbsp;<a href="https://aws.amazon.com/lambda/">Lambda function</a>, using the above code, that will call our endpoint. Once the Lambda function is set up, you can create a new API using&nbsp;<a href="https://aws.amazon.com/api-gateway/">AWS API Gateway</a>&nbsp;that will trigger the Lambda function. After setting up the API you’ll get another endpoint which will look like&nbsp;<code>https://xxxxxxxx.execute-api.eu-west-1.amazonaws.com/prod</code>. You can use this API in your web app directly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another way would be to create a simple web application using Flask/Django or any other web framework you use. Place the above code in the application. Hard code the endpoint(<code>xgb_deployed_predictor.endpoint</code>) name or create an environment variable. Take the input from the user in a normal text format and split the data using the strategy described in the previous post because our code expects data in&nbsp;<code>text/csv</code>&nbsp;format.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That’s all for this series. I hope you learned something new.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Thank you for reading this :)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I kept it very simple and easy to understand. If you have any suggestions or questions, let me know in the comments.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PS: Most of the code can be found&nbsp;<a href="https://github.com/gjain0/ML-ND-Capstone-Project/blob/master/Capstone%20Project.ipynb">here</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Learn how can we tune Hyperparameters using Sagemaker and create a simple WebApp.]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date><![CDATA[2020-04-07 10:55:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-07 10:55:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[machine-learning-for-beginners-with-amazon-sagemaker-part-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="amazon-web-services"><![CDATA[Amazon Web Services]]></category>
		<category domain="post_tag" nicename="artificial-intelligence"><![CDATA[Artificial Intelligence]]></category>
		<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="beginner"><![CDATA[Beginner]]></category>
		<category domain="post_tag" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="deep-learning"><![CDATA[Deep Learning]]></category>
		<category domain="post_tag" nicename="machine-learning"><![CDATA[Machine Learning]]></category>
		<category domain="post_tag" nicename="notebook"><![CDATA[Notebook]]></category>
		<category domain="post_tag" nicename="sagemaker"><![CDATA[SageMaker]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1590171705;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:80;}i:1;a:1:{s:2:"id";i:86;}i:2;a:1:{s:2:"id";i:75;}i:3;a:1:{s:2:"id";i:219;}i:4;a:1:{s:2:"id";i:23;}i:5;a:1:{s:2:"id";i:106;}}}s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590214130;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:80;}i:1;a:1:{s:2:"id";i:86;}i:2;a:1:{s:2:"id";i:75;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[200]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-05-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Terms and Conditions</title>
		<link>https://www.pyscoop.com/terms/</link>
		<pubDate>Fri, 01 May 2020 11:13:22 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?page_id=93</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Welcome to Pyscoop.com!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These terms and conditions outline the rules and regulations for the use of Company Name’s Website, located at Pyscoop.com.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By accessing this website we assume you accept these terms and conditions. Do not continue to use Website Name if you do not agree to take all of the terms and conditions stated on this page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The following terminology applies to these Terms and Conditions, Privacy Statement and Disclaimer Notice and all Agreements: “Client”, “You” and “Your” refers to you. “The Company”, “Ourselves”, “We”, “Our” and “Us”, refers to our Company. “Party”, “Parties”, or “Us”, refers to both the Client and ourselves. All terms refer to the offer, acceptance and consideration of payment necessary to undertake the process of our assistance to the Client in the most appropriate manner for the express purpose of meeting the Client’s needs in respect of provision of the Company’s stated services, in accordance with and subject to, prevailing law of Netherlands. Any use of the above terminology or other words in the singular, plural, capitalization and/or he/she or they, are taken as interchangeable and therefore as referring to same.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5 id="cookies">Cookies</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We employ the use of cookies. By accessing Website Name, you agreed to use cookies in agreement with the Company Name’s Privacy Policy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most interactive websites use cookies to let us retrieve the user’s details for each visit. Cookies are used by our website to enable the functionality of certain areas to make it easier for people visiting our website. Some of our affiliate/advertising partners may also use cookies.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5 id="license">License</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Unless otherwise stated, Company Name and/or its licensors own the intellectual property rights for all material on Pyscoop.com. All intellectual property rights are reserved. You may access this from Website Name for your own personal use subjected to restrictions set in these terms and conditions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You must not:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Republish material from Pyscoop.com Sell, rent or sub-license material from Pyscoop.com Reproduce, duplicate or copy material from Pyscoop.com Redistribute content from Pyscoop.com This Agreement shall begin on the date hereof.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Parts of this website offer an opportunity for users to post and exchange opinions and information in certain areas of the website. Company Name reserves the right to monitor all Comments and to remove any Comments which can be considered inappropriate, offensive or causes breach of these Terms and Conditions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You warrant and represent that:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You are entitled to post the Comments on our website and have all necessary licenses and consents to do so; The Comments do not invade any intellectual property right, including without limitation copyright, patent or trademark of any third party; The Comments do not contain any defamatory, libelous, offensive, indecent or otherwise unlawful material which is an invasion of privacy The Comments will not be used to solicit or promote business or custom or present commercial activities or unlawful activity. You hereby grant Company Name a non-exclusive license to use, reproduce, edit and authorize others to use, reproduce and edit any of your Comments in any and all forms, formats or media.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5 id="iframes">iFrames</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Without prior approval and written permission, you may not create frames around our Webpages that alter in any way the visual presentation or appearance of our Website.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5 id="content-liability">Content Liability</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We shall not be hold responsible for any content that appears on your Website. You agree to protect and defend us against all claims that is rising on your Website. No link(s) should appear on any Website that may be interpreted as libelous, obscene or criminal, or which infringes, otherwise violates, or advocates the infringement or other violation of, any third party rights.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5 id="reservation-of-rights">Reservation of Rights</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We reserve the right to request that you remove all links or any particular link to our Website. You approve to immediately remove all links to our Website upon request. We also reserve the right to amen these terms and conditions and it’s linking policy at any time. By continuously linking to our Website, you agree to be bound to and follow these linking terms and conditions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5 id="removal-of-links-from-our-website">Removal of links from our website</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you find any link on our Website that is offensive for any reason, you are free to contact and inform us any moment. We will consider requests to remove links but we are not obligated to or so or to respond to you directly.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5 id="disclaimer">Disclaimer</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As long as the website and the information and services on the website are provided free of charge, we will not be liable for any loss or damage of any nature.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date><![CDATA[2020-05-01 11:13:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-01 11:13:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[terms]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"bfc62710165ed7b51223b165689d40a3";a:2:{s:7:"expires";i:1590302872;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3;}i:1;a:1:{s:2:"id";i:2;}i:2;a:1:{s:2:"id";i:95;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>About Me</title>
		<link>https://www.pyscoop.com/about/</link>
		<pubDate>Fri, 01 May 2020 11:18:09 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?page_id=95</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>My name is Gaurav Jain. I’m from India, currently reside in Germany. I’m the creator and author of this Blog.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’m a Software Engineer who loves to read and write about Programming, Software development practices, and latest trends in internet industries.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Speciality: Backend Software Engineering (Python/Django)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can connect with me on -</p>
<!-- /wp:paragraph -->

<!-- wp:social-links -->
<ul class="wp-block-social-links"><!-- wp:social-link {"service":"facebook"} /-->

<!-- wp:social-link {"url":"","service":"wordpress"} /-->

<!-- wp:social-link {"service":"twitter"} /-->

<!-- wp:social-link {"service":"instagram"} /-->

<!-- wp:social-link {"service":"linkedin"} /-->

<!-- wp:social-link {"service":"youtube"} /-->

<!-- wp:social-link {"url":"https://www.linkedin.com/in/gjain0/","service":"linkedin"} /-->

<!-- wp:social-link {"url":"https://github.com/gjain0","service":"github"} /-->

<!-- wp:social-link {"url":"https://twitter.com/gjain0","service":"twitter"} /-->

<!-- wp:social-link {"url":"https://www.facebook.com/pyscoop","service":"facebook"} /--></ul>
<!-- /wp:social-links -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date><![CDATA[2020-05-01 11:18:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-01 11:18:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"bfc62710165ed7b51223b165689d40a3";a:2:{s:7:"expires";i:1590302872;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:98;}i:1;a:1:{s:2:"id";i:2;}i:2;a:1:{s:2:"id";i:3;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Contact Me</title>
		<link>https://www.pyscoop.com/contact/</link>
		<pubDate>Fri, 01 May 2020 11:28:47 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?page_id=98</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>To contact the author, Please fill up the below form.</p>
<!-- /wp:paragraph -->

<!-- wp:wpforms/form-selector {"formId":"387"} /-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date><![CDATA[2020-05-01 11:28:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-01 11:28:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[contact]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_e4e12ab8ea85c2a8bfc439a4cf8c65fdd0fc6dad]]></wp:meta_key>
		<wp:meta_value><![CDATA[
[contact-field required="1" type="name" label="Name"/]

[contact-field required="1" type="email" label="Email"/]

[contact-field type="url" label="Website"/]

[contact-field required="1" type="textarea" label="Message"/]
]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_atts_e4e12ab8ea85c2a8bfc439a4cf8c65fdd0fc6dad]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:9:{s:2:"to";s:25:"gauravjain91011@gmail.com";s:7:"subject";s:20:"[PyScoop] Contact Me";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:2:"id";i:98;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_ec4c92e23da189f1d2b7eb714c0027b43d762b79]]></wp:meta_key>
		<wp:meta_value><![CDATA[
[contact-field required="1" type="name" label="Name"/]

[contact-field required="1" type="email" label="Email"/]

[contact-field type="url" label="Website"/]

[contact-field required="1" type="textarea" label="Message"/]
]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_atts_ec4c92e23da189f1d2b7eb714c0027b43d762b79]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:9:{s:2:"to";s:25:"gauravjain91011@gmail.com";s:7:"subject";s:24:"[Gaurav Jain] Contact Me";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:2:"id";i:98;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"bfc62710165ed7b51223b165689d40a3";a:2:{s:7:"expires";i:1590302865;s:7:"payload";a:4:{i:0;a:1:{s:2:"id";i:3;}i:1;a:1:{s:2:"id";i:95;}i:2;a:1:{s:2:"id";i:93;}i:3;a:1:{s:2:"id";i:2;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Sorting Algorithms implementation in Python</title>
		<link>https://www.pyscoop.com/sorting-algorithms-implementation-in-python/</link>
		<pubDate>Tue, 05 Feb 2019 11:46:54 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this post we'll try to implement most popular sorting algorithms using Python. Some of them are -</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Bubble Sort</li><li>Insertion Sort</li><li>Selection Sort</li><li>Merge Sort</li><li>Quick Sort</li><li>Heap Sort</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Lets begin with the most popular and simplest one, <strong>Bubble Sort</strong>!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Bubble Sort</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def bubble_sort(alist):
    n = len(alist)  # Number of items in the list
    for i in range(n):
        for j in range(0, n - i - 1):
            if alist[j] > alist[j + 1]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> mylist = [17, 87, 62, 55, 42, 42, 5, 37, 50, 88]
>>> bubble_sort(mylist)
>>> mylist
[5, 17, 37, 42, 42, 50, 55, 62, 87, 88]
>>></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Above implementation comes with some limitation. It sort the array/list in ascending order only. We can slightly tweak the logic and have a support for descending sort based on the parameter.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def bubble_sort(alist, reverse=False):
    """
    Sort the array in desired order using bubble sort algorithm
    `reverse` parameter controls the order of elements, if `reverse=True`, this will sort the array in descending order
    """
    n = len(alist)  # Number of items in the list

    for i in range(n):
        for j in range(0, n - i - 1):
            if reverse and alist[j] &lt; alist[j + 1]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
            elif not reverse and alist[j] > alist[j + 1]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> mylist = [17, 87, 62, 55, 42, 42, 5, 37, 50, 88]
>>> bubble_sort(mylist, reverse=True)
>>> mylist
[88, 87, 62, 55, 50, 42, 42, 37, 17, 5]
>>></code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Insertion Sort</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def insertion_sort(alist):

    for i in range(1, len(alist)):
        curr_num = alist[i]
        # Next while loop will traverse all previous elements to figure out the correct location of this number and put there
        j = i - 1  # Will start from this index and traverse the list till 0 index

        while j >= 0 and alist[j] > curr_num:
            alist[j + 1] = alist[j]
            j -= 1

        alist[j + 1] = curr_num</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> mylist = [17, 87, 62, 55, 42, 42, 5, 37, 50, 88]
>>> insertion_sort(mylist)
>>> mylist
[5, 17, 37, 42, 42, 50, 55, 62, 87, 88]
>>></code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Selection Sort</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def selection_sort(alist):

    n = len(alist)

    for i in range(n):
        # Find the minimum element from index i+1 till last element in the list
        min_index = i
        for j in range(i + 1, n):
            if alist[j] &lt; alist[min_index]:
                min_index = j

        # Swap the minimum element with the first element
        alist[i], alist[min_index] = alist[min_index], alist[i]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> mylist = [17, 87, 62, 55, 42, 42, 5, 37, 50, 88]
>>> selection_sort(mylist)
>>> mylist
[5, 17, 37, 42, 42, 50, 55, 62, 87, 88]
>>></code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Merge Sort</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Merge sort is an O(n log n) divide-and-conquer sorting algorithm.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The idea is to split the the input list/array into two halves, repeating the process on those halves, and merge the two sorted halves together again.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can visualize the process below -</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code class="">             [17, 87, 62, 55, 42, 42, 5, 37, 50, 88]

      [17, 87, 62, 55, 42]                 [42, 5, 37, 50, 88]

   [17, 87]       [62, 55, 42]          [42, 5]      [37, 50, 88]

 [17]    [87]   [62]    [55, 42]      [42]    [5]   [37]    [50, 88]

 [17]    [87]   [62]   [55]  [42]     [42]    [5]   [37]   [50]  [88]

 [17]    [87]   [62]    [42, 55]      [42]    [5]   [37]    [50, 88]

   [17, 87]       [42, 55, 62]          [5, 42]       [37, 50, 88]

      [17, 42, 55, 62, 87]                 [5, 37, 42, 50, 88]

             [5, 17, 37, 42, 42, 50, 55, 62, 87, 88]
</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def merge_sort(alist):

    if len(alist) > 1:
        mid = len(alist) // 2  # Mid of the array
        left_list = alist[:mid]  # Creating another list for first half
        right_list = alist[mid:]  # Creating another list for second half

        merge_sort(left_list)  # Sorting the left list recursively
        merge_sort(right_list)  # Sorting the right list recursively

        i = j = k = 0

        while i &lt; len(left_list) and j &lt; len(right_list):
            if left_list[i] &lt; right_list[j]:
                alist[k] = left_list[i]
                i += 1
            else:
                alist[k] = right_list[j]
                j += 1
            k += 1

        # Remaining elements
        while i &lt; len(left_list):
            alist[k] = left_list[i]
            i += 1
            k += 1

        while j &lt; len(right_list):
            alist[k] = right_list[j]
            j += 1
            k += 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> mylist = [17, 87, 62, 55, 42, 42, 5, 37, 50, 88]
>>> merge_sort(mylist)
>>> mylist
[5, 17, 37, 42, 42, 50, 55, 62, 87, 88]
>>></code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Quick Sort</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Quicksort is an O(n log n) in-place sorting algorithm. It works by dividing the list into two partitions as we did in Merge Sort. The only difference here is, we don't divide the list in two equal half. instead, we pick a random element(pivot) from the list and based on that pivot we create two partitions. All the numbers less than the pivot would be moved in the left side of the list and numbers greater than pivot would be in the right of the pivot. This way the pivot element will be at the correct position. It's common practice to pick the first or last element as a pivot if we want to avoid any other complexities in choosing pivot.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def partition(alist, start, end):
    """
    This function assumes the last element as pivot
    """
    pivot = alist[start]
    i = start
    j = end

    while True:
        while (i &lt;= j and alist[i] &lt;= pivot):
            i = i + 1
        while (i &lt;= j and alist[j] >= pivot):
            j = j - 1

        if i &lt;= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def quick_sort_helper(alist, start, end):
    if start &lt; end:
        # p is partitioning index, the element alist[p] is now at right position
        p = partition(alist, start, end)

        # Individually sort elements before and after partition, recursively!
        quick_sort_helper(alist, start, p - 1)
        quick_sort_helper(alist, p + 1, end)</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def quick_sort(alist):
    quick_sort_helper(alist, 0, len(alist) - 1)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> mylist = [17, 87, 62, 55, 42, 42, 5, 37, 50, 88]
>>> quick_sort(mylist)
>>> mylist
[5, 17, 37, 42, 42, 50, 55, 62, 87, 88]
>>></code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Heap Sort</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Heap sort is a comparison-based sorting algorithm.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since, Heapsort in based on Complete Binary Tree, we’ll try to represent our list in the form of a binary tree.</p>
<!-- /wp:paragraph -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:preformatted -->
<pre class="wp-block-preformatted">mylist = [17, 87, 62, 55, 42, 42, 5, 37, 50, 88]</pre>
<!-- /wp:preformatted --></div></div>
<!-- /wp:group -->

<!-- wp:code -->
<pre class="wp-block-code"><code class="">                 17(0)
              /        \
         87(1)           62(2)           # Numbers in bracket represent the index of the corresponding element
      /        \        /      \
    55(3)      42(4) 42(5)     5(6)
    /   \      /
37(7)  50(8) 88(9)
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Steps are -</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Convert Array/List into a heap in O(n) operations. Thats called buildMaxHeap() or heapify().</li><li>After first step we’ll have max value at the root (0th index). Swap this value with last element and freez the last element. Now reduce the considered range of the list by 1.</li><li>Call the siftDown() function on the list to sift the new first element to its appropriate index in the heap.</li><li>Go to step2 and repeat untill considered range of the list is 1.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><a href="https://www.cs.usfca.edu/~galles/visualization/HeapSort.html" target="_blank" rel="noreferrer noopener">Visualization can be seen here</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is the implementation-</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def swap(a, b):
    a, b = b, a

def heap_sort(alist):
    n = len(alist)

    # Build a maxheap.
    for i in range(n, -1, -1):
        heapify(alist, n, i)

    # One by one extract elements
    for i in range(n - 1, 0, -1):
        swap(alist[i], alist[0])
        heapify(alist, i, 0)

    return alist</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Above heap_sort() function is structured based on aforementioned rules. Now, Let’s look at the implementation of heapify function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def heapify(alist, n, i):
    largest = i       # Initialize largest as root
    l = 2 * i + 1     # left = 2 * i + 1
    r = 2 * i + 2     # right = 2 * i + 2

    # See if left child of the node `i` exists and is greater than root
    if l &lt; n and alist[l] > alist[largest]:
        largest = l

    # See if right child of the node `i` exists and is greater than previously found largest number
    if r &lt; n and alist[r] > alist[largest]:
        largest = r

    # If current number is not the largest, we swap it.
    if largest != i:
        swap(alist[i], alist[largest])
        heapify(alist, n, largest)  # Recursively heapify</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> mylist = [17, 87, 62, 55, 42, 42, 5, 37, 50, 88]
>>> heap_sort(mylist)
>>> mylist
[5, 17, 37, 42, 42, 50, 55, 62, 87, 88]
>>></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>That's all for this post. Let me know in the comment if you want me to write about any other sorting Algorithm.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All code can be found <a rel="noreferrer noopener" href="https://github.com/gjain0/Python-DSA/tree/master/sort" target="_blank">here</a>!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Popular Sorting Algorithms implementation in Python]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date><![CDATA[2019-02-05 11:46:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-05 11:46:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sorting-algorithms-implementation-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="algorithm"><![CDATA[Algorithm]]></category>
		<category domain="post_tag" nicename="bubble-sort"><![CDATA[Bubble Sort]]></category>
		<category domain="post_tag" nicename="datastructure"><![CDATA[Datastructure]]></category>
		<category domain="category" nicename="datastructure-algorithm"><![CDATA[DataStructure &amp; Algorithm]]></category>
		<category domain="post_tag" nicename="heap-sort"><![CDATA[Heap Sort]]></category>
		<category domain="post_tag" nicename="insertion-sort"><![CDATA[Insertion Sort]]></category>
		<category domain="post_tag" nicename="merge-sort"><![CDATA[Merge Sort]]></category>
		<category domain="post_tag" nicename="quicksort"><![CDATA[QuickSort]]></category>
		<category domain="post_tag" nicename="selection-sort"><![CDATA[Selection Sort]]></category>
		<category domain="post_tag" nicename="sorting"><![CDATA[Sorting]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[147]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-05-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590337846;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:111;}i:1;a:1:{s:2:"id";i:23;}i:2;a:1:{s:2:"id";i:75;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Searching Algorithms implementation in Python</title>
		<link>https://www.pyscoop.com/searching-algorithms-implementation-in-python/</link>
		<pubDate>Fri, 01 Mar 2019 16:06:48 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=111</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this post we’ll try to implement most popular searching algorithms using Python. Some of them are –</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Linear Search</li><li>Binary Search</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>All these algorithms returns the index of a number to be searched in the given list/array.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Linear Search</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def linear_search(alist, num):
    for i, elem in enumerate(alist):
        if elem == num: 
            return i 

    return None  # If the number doesn't exist in the list</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> mylist = [1, 2, 3, 4, 5, 6, 7]
>>> num = 3  # number to be searched
>>> linear_search(mylist, num)
2
>>></code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Binary Search</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def binary_search(alist, num):
    l, r = 0, len(alist) - 1

    while l &lt;= r:
        mid = (l + r) // 2
        if alist[mid] &lt; num:
            l = mid + 1
        elif alist[mid] > num:
            r = mid - 1
        else:
            return mid

    return None  # If the number doesn't exist in the list</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> mylist = [1, 2, 3, 4, 5, 6, 7]
>>> num = 3  # number to be searched
>>> binary_search(mylist, num)
2
>>></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>That's all for this post. Let me know in the comment if you want me to write about any other searching Algorithm.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All code can be found&nbsp;<a rel="noreferrer noopener" href="https://github.com/gjain0/Python-DSA/tree/master/sort" target="_blank">here</a>!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Popular Searching Algorithms implementation in Python]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date><![CDATA[2019-03-01 16:06:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-01 16:06:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[searching-algorithms-implementation-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="algorithm"><![CDATA[Algorithm]]></category>
		<category domain="post_tag" nicename="binary-search"><![CDATA[Binary Search]]></category>
		<category domain="post_tag" nicename="datastructure"><![CDATA[Datastructure]]></category>
		<category domain="category" nicename="datastructure-algorithm"><![CDATA[DataStructure &amp; Algorithm]]></category>
		<category domain="post_tag" nicename="linear-search"><![CDATA[Linear Search]]></category>
		<category domain="post_tag" nicename="searching"><![CDATA[Searching]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[205]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590308994;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:106;}i:1;a:1:{s:2:"id";i:23;}i:2;a:1:{s:2:"id";i:72;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-05-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Stack Implementation in Python</title>
		<link>https://www.pyscoop.com/stack-in-python/</link>
		<pubDate>Wed, 24 Apr 2019 16:14:24 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com//?p=114</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A stack is a datastructure with two basic operations, those are&nbsp;<code>push</code>&nbsp;and&nbsp;<code>pop</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Push: Add items in the stack from top e.g putting books on top of other books</li><li>Pop: Remove items from the top in the stack and return the removed item e.g removing top book to get the second top book</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Apart from these two necessary operations, There are few other useful actions as well.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Peek: It’s similar to Pop operations but it doesnt remove the item, it just return the value</li><li>is_empty: to check if stack is empty or has at least 1 item in it. return True if empty, False otherwise</li><li>size: to get the current size(how many items are in the stack at the moment)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Based on above features, there are multiple ways you can design your stack datastructure</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="1-unlimited-capacitylengthsize-of-the-stack">1. Unlimited capacity/length/size of the stack</h4>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class Stack:

    def __init__(self):
        self.stack = []

    def push(self, item):
        self.stack.append(item)

    def pop(self):
        if self.is_empty():
            return "Stack Is Empty"
        return self.stack.pop()

    def peek(self):
        return self.stack[len(self.stack) - 1]

    def is_empty(self):
        return len(self.stack) == 0

    def size(self):
        return len(self.stack)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This will create a stack of unlimited size/capacity (i.e we can store as many items as we want). In real world scenarios, we do have limited size. Im going to discuss most common ones in this post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> s = Stack()
>>> s.is_empty()
True
>>> s.size()
0
>>> s.push('cat')
>>> s.push('dog')
>>> s.push('cow')
>>> s.is_empty()
False
>>> s.size()
3
>>> s.peek()
'cow'
>>> s.pop()
'cow'
>>> s.pop()
'dog'
>>> s.size()
1
>>> s.peek()
'cat'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To have a stack of limited size, we have to maintain another variable which will keep track of the length has been covered so far.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="2-limited-capacity-without-maintaining-a-pointer-to-lasttopmost-recent-element">2. Limited capacity, without maintaining a pointer to last(top/most recent) element</h4>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class Stack:

    def __init__(self, capacity):
        self.stack = []
        self.capacity = capacity   # This will maintain the size/length of the Stack

    def push(self, item):
        if self.size() >= self.capacity:
            return "Stack Is Full"
        self.stack.append(item)

    def pop(self):
        if self.is_empty():
            return "Stack Is Empty"
        return self.stack.pop()

    def peek(self):
        return self.stack[len(self.stack) - 1]

    def is_empty(self):
        return len(self.stack) == 0

    def size(self):
        return len(self.stack)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> s = Stack(capacity=10)  # Create a stack of length 10
...</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":4} -->
<h4 id="3-limited-capacity-with-maintaining-a-pointer-to-lasttop-element">3. Limited capacity, with maintaining a pointer to last(top) element</h4>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class Stack:

    def __init__(self, capacity):
        self.stack = []
        self.capacity = capacity
        self.top = -1  # This will have a pointer to the last/most_recent element.

    def push(self,data):
        if self.size() >= self.capacity:
            return "Stack Is Full"
        self.stack.append(data)
        self.top += 1

    def pop(self):
        if self.is_empty():
            return "Stack Is Empty"
        self.top -= 1
        return self.stack.pop()

    def peek(self):
        return self.stack[self.top]

    def is_empty(self):
        return self.top &lt; 0

    def size(self):
        return self.top + 1

    def top_element(self):
        return self.stack[self.top]  # self.stack[-1]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Usage:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> s = Stack(capacity=10)  # Create a stack of length 10
>>> s.top   # will give you index of top/most_recent element
>>> s.top_element()  # will give you top/most_recent element</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Source Code can be found <a rel="noreferrer noopener" href="https://github.com/gjain0/Python-DSA/blob/master/stack/stack.py" target="_blank">here</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Build a Stack datastructure using Python.]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date><![CDATA[2019-04-24 16:14:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-24 16:14:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stack-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="algorithm"><![CDATA[Algorithm]]></category>
		<category domain="post_tag" nicename="datastructure"><![CDATA[Datastructure]]></category>
		<category domain="category" nicename="datastructure-algorithm"><![CDATA[DataStructure &amp; Algorithm]]></category>
		<category domain="post_tag" nicename="stack"><![CDATA[Stack]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590261834;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:23;}i:1;a:1:{s:2:"id";i:75;}i:2;a:1:{s:2:"id";i:219;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[stack-implementation-in-python]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-05-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[136]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Security in the Django Application</title>
		<link>https://www.pyscoop.com/security-in-the-django-application/</link>
		<pubDate>Thu, 28 May 2020 14:20:00 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Security is the one the most common and critical aspect of an application yet we don't give due importance to this. In this post we'll go through most common web security vulnerabilities and practices and how can we prevent/mitigate them in a Django app elegantly. </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="#sql-injection">SQL Injection</a></li><li><a href="#crlf-injection">CRLF Injection</a></li><li><a href="#timing-attack">Timing Attack</a></li><li><a href="#clickjacking-attack">Clickjacking Attack</a></li><li><a href="#cross-site-scripting">Cross-Site Scripting (XSS)</a></li><li><a href="#csrf">Cross-Site Request Forgery (CSRF)</a></li><li><a href="#hsts">HTTP Strict Transport Security (SSL)</a></li></ul>
<!-- /wp:list -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:heading {"level":4} -->
<h4 id="sql-injection">1. SQL Injection</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>SQL injection is a type of attack where a malicious user is able to execute arbitrary SQL code on a database. This can result in records being deleted/updated or data leakage.<br>Django provides a way to write raw or custom SQL queries along with the ORM. But using raw SQL queries can make your web application vulnerable to SQL injection. Consider below example -</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.db import connection
cursor = connection.cursor()

username = request.GET['username']
sql_query = "SELECT * FROM users WHERE username = '%s';" % username
cursor.execute(sql_query)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>At first glance, it seems it's going to retrieve the user object from the table but what if an attacker pass below string in the username parameter.</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:group -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="sql" class="language-sql">''; DROP TABLE users;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>OR</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="sql" class="language-sql">''; UPDATE users SET is_superuser = true WHERE username = 'hacker';</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Yes, you are correct, it's going give the superuser permission to user 'hacker' and with the superuser permission an attacker can do anything with the database.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To prevent this, always use Django's inbuilt ORM for DB querying. If, for some reason, you can't do that, always make sure you validate/sanitize user-controlled data and pass it as a param instead of by doing string formatting.  Above example can be re-written as -</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">sql_query = "SELECT * FROM users WHERE username = %s;"
cursor.execute(sql_query, username)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Similarly, you can make <code>.<strong>extra()</strong></code> and <strong><code>RawSQL()</code></strong> more secure in Django by using parameterized queries.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="crlf-injection">2. CRLF Injection</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Web servers return a response containing both the HTTP response headers and the response body. Headers and main content are separated by a combination of <strong>carriage return</strong> and a <strong>line feed</strong>(CR-LF) characters.  In a CRLF injection attack, the attacker inserts CRLF characters into user input form or an HTTP request to trick the web server or web application into thinking that header ends here and main content begins.&nbsp;<br><br>There are 2 most common uses of CRLF injection attacks: <br><strong>a) Log poisoning</strong>. In this attack, the attacker modifies the log file entries by inserting '\n' and an extra line of text. This can be used to hide other attacks or to confuse system administrators by damaging the structure or formatting of the log file.<br>Take the example of a log file which has a pattern IPAddress - time - URL.<br><code><span class="has-inline-color has-dark-gray-color">106.217.24.193 - 07:26 - /author/book/?sort_by=rating<br></span></code>and an attacker managed to inserts CLRF characters in the URL, above log file would look like below<br><code><span class="has-inline-color has-dark-gray-color">106.217.24.193 - 07:26 - /author/book/?sort_by=rating&amp;%0d%0a87.200.169.16 - 13:45 - /author/profile</span></code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>b)</strong> <strong>HTTP response splitting</strong> (AKA <strong>header injection</strong>)<br>Web application frameworks and servers might also allow attackers to inject newline characters in headers to create a malformed HTTP response. In this case, the application would be vulnerable to attacks like HTTP Response Splitting/Smuggling.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Consider below examples-</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.http import HttpResponse

def my_view(request):
    content_type = request.META.get("CONTENT_TYPE")
    response = HttpResponse()
    response['Content-Type'] = content_type  #
    return response</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here <code>content_type</code>  hasn't been validated and an attacker can pass any malicious header that includes '\n' in it. As a best practice, applications that use user-provided data to construct the response header should always validate the data first. So instead of the above implementation, we'd use below approach. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.http import HttpResponse

def my_view(request):
    content_type = request.META.get("CONTENT_TYPE")
    response = HttpResponse()
    if content_type in ALLOWED_CONTENT_TYPES:
        response['Content-Type'] = content_type
    else: # default content type
        response['Content-Type'] = "application/json"
    return response</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>By exploiting a CRLF injection an attacker can also insert HTTP headers which could be used to defeat security mechanisms such as a browser's XSS filter or the same-origin-policy.<br>Django handles header injection out of the box If any &nbsp;<code>subject</code>,&nbsp;<code>from_email</code>&nbsp;or&nbsp;<code>recipient_list</code>&nbsp; contains a newline, the email function  (e.g.&nbsp;<a href="https://docs.djangoproject.com/en/3.0/topics/email/#django.core.mail.send_mail"><code>send_mail()</code></a>) will raise&nbsp;<code>BadHeaderError</code>  </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.core.mail import BadHeaderError, send_mail
try:
    send_mail(subject, message, from_email, to_emails)
except BadHeaderError:
    return HttpResponse('Invalid header found.')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Alternatively you can explicitly check for these characters. <a rel="noreferrer noopener" href="https://github.com/django/django/blob/ccb1cfb64e919e163c51995ed99bff3c92d7d006/django/core/mail/message.py#L55" target="_blank">This is what Django does under the hood</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">if '\n' in input_text or '\r' in input_text:
    raise BadHeaderError('Header cannot contain CLRF characters')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>CRLF injection vulnerabilities are usually mitigated by Django automatically. Even if the vulnerability is not mitigated, it is easy to fix by following below steps.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Update the code so that content provided by the user is never used directly in the HTTP stream.</li><li>Remove any CR-LF characters before passing content into the HTTP headers.</li><li>Encode the data that you pass into HTTP headers. This will encode the CR &amp; LF if the attacker attempts to inject them.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 id="timing-attack">3. Timing Attack</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As per Wikipedia, <em>a timing attack is an attack in which the attacker attempts to compromise a cryptosystem by analyzing the time taken to execute cryptographic algorithms</em>. What does that mean? Basically an attacker would supply different inputs to the system and observe the precise time taken by the system to respond for each input. Let's understand this by a simple example.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Suppose you have a function that check the API key or token provided by user.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def is_valid_key(api_key):
    return api_key == SECURELY_STORED_API_KEY</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here problem is in <strong>==</strong> operator. The way python compare string under the hood is byte by byte(or character by character) and it gets terminated as soon as it finds a non-matching byte before iterating over the whole string. If the first character(or byte) of the input <strong>api_key</strong> string is different than the first character of <strong>STORED_API_KEY</strong> string, it will return the result comparatively faster than the case where both strings are equal. <br>In layman terms, the comparison between '<strong>abcdefgh</strong>' and '<strong><strong>xbcdefgh</strong></strong>' would return result faster than comparison between '<strong><strong>abcdefgh</strong></strong>' and '<strong><strong>abcdefgh</strong></strong>'.<br>Attackers can use this to determine the bytes one by one and eventually a valid string. How can you make sure that your function always takes constant time no matter what input user provides?  Again, Django to the rescue! Django provides a nice utility function for that <a href="https://github.com/django/django/blob/stable/3.0.x/django/utils/crypto.py#L49" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">constant_time_compare</a>. Django internally uses this function to compare the password for authentication.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.utils.crypto import constant_time_compare
constant_time_compare(string1, string2)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you want to, for some reason, implement it by yourself in Python, you can do - </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def compare(string1, string2):
    if len(string1) != len(string2):
        return False
    result = 0
    for a, b in zip(string1, string2):
        result |= ord(a) ^ ord(b)  # XOR of Ascii value of characters
        # We are doing an OR operation between the `result` and XOR result.
        # If both strings are equal, XOR will be 0 for all characters and thus result would be 0

    return not result   # Equivalent to: return result == 0</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This loop will keep running even if it finds the non-matching character and hence will always take the same time to compute and return the result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Read also: <a href="https://docs.python.org/3/library/hmac.html#hmac.compare_digest" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">https://docs.python.org/3/library/hmac.html#hmac.compare_digest</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="clickjacking-attack">4. Clickjacking Attack</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Clickjacking (click + hijacking), AKA <strong>User Interface redress attack</strong>, <strong>UI redress attack</strong>, <strong>UI redressing</strong>, is a type of attack where a malicious site wraps another site in an invisible frame. This attack can trick the user into clicking a webpage element which is invisible or disguised as another element for malicious purpose.<br>Modern browsers use the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">X-Frame-Options</a> HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Django provides a middleware to guard against it. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">MIDDLEWARE = (
    ...
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ...
)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In Django 3.0 or above, by default, it will set the <strong>X-Frame-Options</strong> header to <strong>DENY</strong>. On the other hand, in Django &lt; 3.0, the default value for this header is  <strong>SAMEORIGIN</strong>. <br><strong>DENY</strong> means, your site cannot be used in any frame/iframe on any site.<br><strong>SAMEORIGIN</strong> means, only your site is allowed to use itself in a frame.<br>Nevertheless, if you want to change the value, you can use X_FRAME_OPTIONS setting to set the desired value. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">X_FRAME_OPTIONS = 'DENY'  # in settings.py</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Django also provides some decorators to do it per view basis. This is extremely useful when you want custom behaviour per view. These decorators will override the middleware setting.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.views.decorators.clickjacking import (
    xframe_options_deny,
    xframe_options_exempt,
    xframe_options_sameorigin
)

@xframe_options_exempt
def view1(request):
    return HttpResponse("This page is safe to load in a frame on any site.")

@xframe_options_deny
def view2(request):
    return HttpResponse("Don't display in any frame, anywhere!")

@xframe_options_sameorigin
def view3(request):
    return HttpResponse("Display in a frame if it's from the same origin as me.")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph {"textColor":"black"} -->
<p class="has-text-color has-black-color">As a best security practice always set this value to DENY.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="cross-site-scripting">5. Cross-Site Scripting (XSS)</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>XSS attacks allow an attacker to inject scripts into the browsers of other users. This is usually achieved by storing the malicious scripts in the database and then serve to other users when they make a request to the database. We'll see different approaches Django provides to prevent these attacks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>a) Validating user input / HTML escaping<br></strong>By default, Django templates protect you against the majority of XSS attacks by applying HTML escaping to the output of all template variables but that's not enough and you should always explicitly sanitize user-provided data. Consider the below example -</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">name = request.GET.get('name')
html = '&lt;p>Hello, My name is %s&lt;/p>' % name</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If the user provides below JS code in the <strong>name</strong> param, this will be executed on the page where we are rendering this HTML.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="javascript" class="language-javascript">&lt;script type="text/javascript">alert("Error")&lt;/script></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>b) Enable browser detector</strong><br>If your application still supports old browsers, you should consider having <a href="https://docs.djangoproject.com/en/3.0/ref/settings/#secure-browser-xss-filter" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">SECURE_BROWSER_XSS_FILTER</a> setting turn on. This header basically tells the browser to enable the auto XSS attack detector feature. This is redundant in modern browsers because they don't consider <strong>X-XSS-Protection</strong> HTTP header anymore. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>c) Protect Cookies</strong><br>Another small step you can take is by enabling <a href="https://docs.djangoproject.com/en/3.0/ref/settings/#session-cookie-httponly" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">SESSION_COOKIE_HTTPONLY</a> settings. By default, it's True so no need to do anything here but if in the past, you have disabled it for some reason it's a good time to revisit it. Having this setting enables allow cookies to be accessible on only HTTP(S) requests, Javascript can't access cookies. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But wouldn't it be great if there was a way that allows us to execute only our site's(verified) JavaScripts?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>d) Content-Security-Policy</strong><br>You can do that by setting the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">Content-Security-Policy (CSP)</a> HTTP header. Browsers will not load any JS, CSS, Images that are not permitted by CSP header, including inline JS. How can we do that using Django?<br>Django doesn't have any inbuilt support for this but you can use a very popular 3rd party package called <a href="https://github.com/mozilla/django-csp" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">django-csp</a>, maintained by Mozilla. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Add CSP middleware provided by this library</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">MIDDLEWARE = (
    # ...
    'csp.middleware.CSPMiddleware',
    # ...
)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And add below configuration to your site's setting. Note that this can vary based on your site's requirements.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">CSP_DEFAULT_SRC = ("'self'", 'cdn.example.net')
CSP_STYLE_SRC = ("'self'", 'fonts.googleapis.com')
CSP_SCRIPT_SRC = ("'self'",)
CSP_IMG_SRC = ("'self'",)
CSP_FONT_SRC = ("'self'",)
# More CSP settings go here ... https://django-csp.readthedocs.io/en/latest/configuration.html#policy-settings</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the end, I'd say preventing XSS attack is tricky and no single approach will fully protect you instead use a combination of multiple approaches mentioned above.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="csrf">6. Cross-Site Request Forgery (CSRF)</h4>
<!-- /wp:heading --></div></div>
<!-- /wp:group --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<p>AKA <strong>one-click attack</strong>&nbsp;or&nbsp;<strong>session riding</strong> or <strong>XSRF</strong>, sometimes pronounced  "sea-surf",  is an attack where a user is tricked by an attacker into submitting a web request that they did not intend. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Consider a simple example where you can send money from your bank account to another by simply filling a form that takes two fields, receiver's account number and the amount you want to send. In this case, an attacker can send you a hidden form through an email or a web link and If you click on that link while you are logged in your bank account, you un-intentionally sent money to the attacker's account.  Similarly, The attacker can trick you to send your active cookies and later attacker can use them to gain access to the vulnerable site. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using CSRF token is a robust safeguard against this attack. A CSRF token is a unique token generated by the application for each session, request or ID. Django provides a very easy way to Include CSRF token in your forms. There is middleware for this in Django that by default will be added to your MIDDLEWARE setting. <strong>"django.middleware.csrf.CsrfViewMiddleware"</strong>. What else you need to do is, if you are using Django's templating system, use <strong>csrf_token</strong> (for Jinja2 it's <strong>csrf_input</strong>) tag inside the form.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="django" class="language-django">&lt;form method="post">
{% csrf_token %}
...
&lt;/form></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Additionally you can turn on below settings to protect CSRF cookies.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">CSRF_COOKIE_SECURE = True  # cookie will only be sent over an HTTPS connection
CSRF_COOKIE_HTTPONLY = True  # only accessible through http(s) request, JS not allowed to access csrf cookies</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To read more about CSRF protection in Ajax, exempting specific views from CSRF protection and other limitations, please visit <a href="https://docs.djangoproject.com/en/3.0/ref/csrf/" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">official csrf docs</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Note: Django updated the <a href="https://docs.djangoproject.com/en/3.0/releases/1.10/#csrf" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">CSRF token generation mechanism in version 1.10</a> to protect against the <a href="https://en.wikipedia.org/wiki/BREACH" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">BREACH attack</a>. If you are using an older version, I suggest upgrading to at least 1.10.</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="hsts">7. HTTP Strict Transport Security (HSTS)</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Always serve your site over a secure connection, Always use SSL!!!<br>Django provides a security middleware that can help you set a few things up quickly.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">MIDDLEWARE = (
    'django.middleware.security.SecurityMiddleware',
    # ...
)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We are going to discuss particularly 3 important settings this middleware offer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>a) SECURE_SSL_REDIRECT<br></strong>If True, the&nbsp;SecurityMiddleware&nbsp;redirects&nbsp;all non-HTTPS requests to HTTPS. Default is False.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">SECURE_SSL_REDIRECT = True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But the problem is, the user had already initiated the insecure request(HTTP) that we redirected to HTTPS. If an attacker managed to intercept that insecure request, things can go wrong.  How can we prevent that request from happening altogether? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>HSTS is the way to go!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>b) SECURE_HSTS_SECONDS</strong><br>Whenever a user makes an HTTP request to your site, HSTS send a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">header</a> in the response that tells the browsers to always use an HTTPS connection to your site. Although as a prerequisite for this, It requires all your statics, scripts, media, fonts, everything to be served over HTTPS, otherwise users won't be able to connect to the site. The default value of this setting is Zero. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">SECURE_HSTS_SECONDS = 31536000  # seconds in a year:  365*24*60*60</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Ideally, you should set a large value such as 31536000 seconds which is equal to 1 year. But if you already don't have its recommended to start with a low value e.g 86400 because if something is not right with your sites, browsers won't be able to connect to your site for this long. You can always update this number once you are sure everything is fine. Before making any changes go through the <a href="https://docs.djangoproject.com/en/3.0/ref/settings/#secure-hsts-seconds" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">documentation</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>c) SECURE_HSTS_INCLUDE_SUBDOMAINS</strong><br>Setting it to True will ensure that all subdomains, not just top-level domain, can only be accessed over a secure connection. Default is False.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">SECURE_HSTS_INCLUDE_SUBDOMAINS = True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>What we learn from these vulnerabilities is, always validate and sanitize the user-provided data, such as URL parameters, POST data payloads, headers or cookies. Thumb rule of the security is user-provided data should always be considered untrusted and sanitized/escaped accordingly. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I hope you enjoyed the post. In the future post, I'll talk about more security features that Django provides. If you think this can be useful to others, Don't forget to share with them. Write a comment if you want to see Django in action for a specific web vulnerability. <a href=""></a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[In this post we'll go through top web security vulnerabilities and learn to prevent them in a Django app. ]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date><![CDATA[2020-05-28 14:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-28 14:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[security-in-the-django-application]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="clickjacking-attack"><![CDATA[Clickjacking Attack]]></category>
		<category domain="post_tag" nicename="crlf-injection"><![CDATA[CRLF Injection]]></category>
		<category domain="post_tag" nicename="cross-site-request-forgery"><![CDATA[Cross Site Request Forgery]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[Cross Site Scripting]]></category>
		<category domain="post_tag" nicename="csrf"><![CDATA[CSRF]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[Security]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="timing-attack"><![CDATA[Timing Attack]]></category>
		<category domain="post_tag" nicename="web-security"><![CDATA[Web Security]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[XSS]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[shareaholic_disable_open_graph_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590344783;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:90;}i:1;a:1:{s:2:"id";i:80;}i:2;a:1:{s:2:"id";i:75;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[324]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[54]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-05-29]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Michał Karwowski]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[prog32@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://starthere.pl</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[37.47.42.137]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-26 08:35:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-26 08:35:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow. Thank you for detailed Django security hints. It't realy helpfull :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1593161483.6799089908599853515625;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"gauravjain";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Michał Karwowski]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[prog32@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://starthere.pl</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[37.47.42.137]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-26 08:48:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-26 08:48:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This Django command might be helpfull
https://docs.djangoproject.com/en/3.0/ref/checks/#security
./manage.py check --deploy]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1593161505.3120839595794677734375;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"gauravjain";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Security in the Django Application - Part 2</title>
		<link>https://www.pyscoop.com/?p=307</link>
		<pubDate>Sun, 17 May 2020 18:44:27 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/?p=307</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:list -->
<ul><li>content sniffing 1:02:22</li><li>session Hijacking (session_cookie_secure)</li><li>Unvalidated Redirects and Forwards 55:01</li><li>Security Misconfiguration. admin + manage.py check (44:12)</li><li>Sensitive Data Exposure. (logging) (Sensitive data should be encrypted at all times) 44:52</li><li>core headers (1:30)</li><li></li><li>Man-in-the-Middle</li><li>Content Spoofing</li><li>Host header validation</li><li>Broken Authentication and Session Management and Broken Access Control.</li><li>XML External Entities (XXE).</li><li>Denial of Service (DoS)</li><li>Directory traversal (<a href="https://www.slideshare.net/levigross/django-web-application-security">https://www.slideshare.net/levigross/django-web-application-security</a>)</li><li>Insecure Cryptographic Storage</li><li>Uncontrolled Memory Consumption</li><li>Failure to restrict URL Access</li><li>Insufficient Logging &amp; Monitoring. (no monitoring for detecting security incident and might happen again)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>OTHER</strong>.<br><a href="https://docs.djangoproject.com/en/3.0/ref/settings/#session-cookie-secure">https://docs.djangoproject.com/en/3.0/ref/settings/#session-cookie-secure</a><br>Paul McMillan's security talk at DjangoCon 2011.<br>Django should never server static files, instead, the webserver should<br>Session Hijacking -&gt; session_cookie_secure=True, session_cookie_httponly=True<br>never store private data in plain text in the session, never display session data without escaping it</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>python manage.py check --tag security</strong></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date><![CDATA[2020-05-17 18:44:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-17 18:44:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[security-in-the-django-application-part-2]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="django"><![CDATA[Django]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1589783992;s:7:"payload";a:2:{i:0;a:1:{s:2:"id";i:90;}i:1;a:1:{s:2:"id";i:75;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Fun with Python - 1</title>
		<link>https://www.pyscoop.com/?p=383</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://pyscoop.com/?p=383</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I'm going to start a series of posts for some fun stuff you can do with python. This is the first post of the series.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is a small piece of code which is a translation of a popular <strong>obfuscated code</strong> written in C language. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">STRING = "TFy!QJu ROo TNn(ROo)SLq SLq ULo+UHs UJq TNn*RPn/QPbEWS_JSWQAIJO^NBELPeHBFHT}TnALVlBLOFAkHFOuFETpHCStHAUFAgcEAelclcn^r^r\\tZvYxXyT|S~Pn SPm SOn TNn ULo0ULo#ULo-WHq!WFs XDt!"
b = 1
for i, a in enumerate(STRING):
    asc = ord(a)
    while asc > 64:
        if b == 80:
            b = 0
            print()
        else:
            print("!" if i % 2 else " ", end='')
        b += 1
        asc -= 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Can you guess what does this program do?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This generate a map of India using exclamation marks(!) and spaces.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>383</wp:post_id>
		<wp:post_date><![CDATA[2020-06-19 11:43:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_40a99e38ce59f2f906f15c5248e3791a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1590310441;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:23;}i:1;a:1:{s:2:"id";i:86;}i:2;a:1:{s:2:"id";i:219;}}}s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1590310568;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:23;}i:1;a:1:{s:2:"id";i:86;}i:2;a:1:{s:2:"id";i:219;}i:3;a:1:{s:2:"id";i:106;}i:4;a:1:{s:2:"id";i:111;}i:5;a:1:{s:2:"id";i:75;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Saving GeoPoints Using Django Form</title>
		<link>https://www.pyscoop.com/saving-geopoints-using-django-form/</link>
		<pubDate>Tue, 26 May 2020 10:30:20 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/?p=394</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A while ago I was working on a project where I had a map which was part of a simple form. User can select a point on the map and submit. Form's responsibility was to get the submitted data, validate it and save into database if everything is fine. I was using MySQL with GIS support. During the development I faced a couple of issues that I'd be addressing here and how did I fix them. Let's begin!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Consider the below example </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="models.py" class="wp-block-code"><code lang="python" class="language-python">from django.contrib.gis.db import models

class Location(models.Model):
    coordinate = models.PointField(blank=True, null=True)
    # many more fields</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you see the Django generated migration file for this model, you will notice that the default value of <strong>srid</strong> parameter is 4326 although we never provided that explicitly in the model definition. <br>This is how migration will look like.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">operations = [
    migrations.CreateModel(
        name='Location',
        fields=[
            ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ('coordinate', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
        ],
    ),
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The default value of <strong>srid</strong> is being propagated from a base class <strong><a href="https://github.com/django/django/blob/33c365781abbcc1b21a31b31d95d344a174df0d5/django/contrib/gis/db/models/fields.py#L56">BaseSpatialField</a></strong>, the PointField has been inherited from. We can always change this value as per requirements but in most cases default value would be sufficient.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's try to save some Geo coordinates through the shell. First, we need to import Point class so that we can directly assign the value to the model field. Go ahead and hit the <code><strong>python manage.py shell</strong></code></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> from django.contrib.gis.geos import Point
>>> Point(75.778885, 26.922070)  # Latitude=26.922070 &amp; longitude=75.778885
&lt;Point object at 0x11a282c70>
>>> # save into database
>>> Location.objects.create(coordinate=Point(75.778885, 26.922070))
&lt;Location: Location object (1)></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Lets see how it's been stored in the database.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> Location.objects.last().coordinate.coords
(75.778885, 26.92207)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Looks good. Thats what we saved. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lets do the same exercise using Django form. Create a <strong>forms.py</strong> file as below </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.contrib.gis import forms  
# Note: forms is being imported from gis module instead of: `from django import forms`

class LocationForm(forms.ModelForm):
    class Meta:
        model = Location
        fields = ('coordinate',)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now, pass the same data to this form and see how it responds.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> data = {'coordinate': '75.778885, 26.92207'}
>>> form = LocationForm(data=data)
>>> form
&lt;LocationForm bound=True, valid=Unknown, fields=(coordinate)>
>>>
>>> form.is_valid()  # check if the provided payload is valid 
Error creating geometry from value '75.778885, 26.92207' (String input unrecognized as WKT EWKT, and HEXEWKB.)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Oops! We got an error- <strong>Error creating geometry from value '75.778885, 26.92207' (String input unrecognized as WKT EWKT, and HEXEWKB.)</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It seems the data we provided is not in one of the acceptable format. After a bit of searching, I found, I need to provide a proper geometry type with the data.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> data = {'coordinate': 'POINT(75.778885 26.92207)'}  # Note that points are separated by a space
>>> form = LocationForm(data=data)
>>> form.is_valid()
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Nice, It worked! Wait... Did it actually? Too soon to celebrate 😏. Let's save this form and verify the data in the database.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> form.save()
&lt;Location: Location object (2)>
>>>
>>> # Now Lets see how it was stored in the database
>>> Location.objects.last().coordinate.coords
(0.0006807333060903553, 0.0002418450696118364)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Whaaaat? <br><img class="wp-image-407" style="width: 400px;" src="https://www.pyscoop.com/wp-content/uploads/2020/05/Screen-Shot-2020-05-26-at-11.51.05-AM.png" alt=""> <br>This is not what we provided.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What went wrong! Again Django form needs <strong>srid</strong> value explicitly.  Let's modify the data a little bit and follow the same steps.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> data = {'coordinate': 'SRID=4326;POINT(75.778885 26.92207)'}
>>> form = LocationForm(data=data)
>>> form.is_valid()
True
>>> form.save()
&lt;Location: Location object (3)></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Verify the database.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> Location.objects.last().coordinate.coords
(75.778885, 26.92207)
>>></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Awesome. finally we can see the data that we inserted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now the question is how and where should we make this change in the codebase?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We have two options -<br>1) We can modify the payload before passing it to the form. But that won't be a good place to do. moreover, we might be using this form in multiple places, in that case, we have to make changes at all those places. That leaves us with 2nd option.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2) We override <strong>__init__</strong> method inside the Form class so that all the logic would be at one place.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class LocationForm(forms.ModelForm):
    class Meta:
        model = Location
        fields = ('coordinate',)

    def __init__(self, *args, **kwargs):
        coordinate = kwargs['data'].pop('coordinate', None)
        if coordinate:
            coordinate = coordinate.replace(',', '')  # remove comma, as we need single space between two numbers.
            kwargs['data']['coordinate'] = f'SRID=4326;POINT({coordinate})'

        super(LocationForm, self).__init__(*args, **kwargs)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now we don't need to pass GEOM_TYPE in the data. we can simply pass the raw point data as we did in the very first step.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> data = {'coordinate': '75.778885, 26.92207'}
>>> form = LocationForm(data=data)
>>> form.save()
&lt;Location: Location object (4)></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Verify the database.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">>>> Location.objects.last().coordinate.coords
(75.778885, 26.92207)
>>></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>👏👏👏 Sweet!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Additionally, if your business logic required some other conditional checks, then you can override <strong>clean_&lt;field_name></strong> or/and <strong>clean</strong> method, write all the logic there and raise relevant exceptions/validation errors if needed. Also, If you have multiple Point fields in your model, it would make sense to create a method inside the class and reuse that in the <strong>__init__</strong> method. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Solved: Saving GeoPoints using Django Form without ruining the data format.]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date><![CDATA[2020-05-26 10:30:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-26 10:30:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[saving-geopoints-using-django-form]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="djangoform"><![CDATA[DjangoForm]]></category>
		<category domain="post_tag" nicename="geopoint"><![CDATA[GeoPoint]]></category>
		<category domain="post_tag" nicename="gis"><![CDATA[GIS]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[414]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[54]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Write JSON APIs In Pure Django For Beginners</title>
		<link>https://www.pyscoop.com/write-json-apis-in-pure-django-for-beginners/</link>
		<pubDate>Fri, 12 Jun 2020 02:18:01 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/?p=433</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this tutorial, we are going to build a few JSON based CRUD(Create, Read, Update, Delete) APIs in Django without using any additional library such as Django Rest Framework (DRF) or Tastypie. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Install &amp; Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>1.  Install Django</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>This tutorial is based on Python3.7 and Django 3.0. So please make sure you have Python3.7 or later and Django 3.0 or later installed in your system</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Install pip <a rel="noreferrer noopener" href="https://pip.pypa.io/en/stable/installing/" target="_blank">from here</a> if you haven't already, skip otherwise. Once pip installed, you can install Django using pip. (you might need to run the command with sudo if you are not using virtualenv)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code class="">gaurav@gaurav$ pip install django==3.0</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can also <em><a rel="noreferrer noopener" href="https://docs.djangoproject.com/en/dev/topics/install/" target="_blank">Follow the detailed installation instructions here</a></em> if you face any issue.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>2. Create and setup the project</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, we need to set up the project. For that, you can simply follow the below instructions to get everything ready. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">gaurav@gaurav$ django-admin startproject pyscoop
gaurav@gaurav$ cd pyscoop
gaurav@gaurav$ python manage.py startapp myapp
gaurav@gaurav$ python manage.py migrate</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying sessions.0001_initial... OK</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">gaurav@gaurav$ pyscoop python manage.py createsuperuser
Username (leave blank to use 'gaurav.jain'):
Email address:
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
This password is too common.
This password is entirely numeric.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">gaurav@gaurav$ python manage.py runserver</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">Watching for file changes with StatReloader
Performing system checks…

System check identified no issues (0 silenced).
June 12, 2020 - 06:51:26
Django version 3.0.6, using settings 'pyscoop.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Visit: <a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noreferrer noopener">http://127.0.0.1:8000/admin/</a> and login with the superuser credentials that you created above. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":437,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-12-at-10.53.07-AM-1024x354.png" alt="" class="wp-image-437"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If you are able to see this page that means the initial setup is successfully completed. Now, we can jump straight on writing APIs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Take a moment to understand couple of things we did here.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Created a basic Django project structure using standard commands provided by Django</li><li>Created Table in the database for existing migrations that comes with Django. This will create <strong>user</strong>, <strong>auth</strong>, <strong>session</strong>, <strong>admin</strong> and <strong>contenttypes</strong> table in the database. Note that we never provided the database information in the project. in that case, Django by default creates an SQLite database file in the project root directory with the name <strong>db.sqlite3</strong>. In a real-world application, you would be using MySQL, PostgreSQL or other production-grade SQL database. for the sake of this tutorial and to keep it simple, we'll use SQLite DB. If you want to change the database, you can do so by updating the <strong>DATABASES</strong> variable in <strong>pyscoop/settings.py</strong> file. <a href="https://docs.djangoproject.com/en/dev/ref/settings/#databases" target="_blank" rel="noreferrer noopener">Read more about DB settings here</a>.</li><li>Then Created a superuser to access the Admin page to see the inserted data in the database. you can also use other SQL GUI clients to see the data. </li><li>Finally started the local server on a default port 8000 and accessed admin page to verify the setup.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>2. Writing a simple API</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Lets first write a simple API that gives us a hardcoded JSON response. Once we are familiar with that, we'll write API that actually gets the data from the DataBase. Further, we'll write API to update/delete the data in the database as well. Let's begin!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Go ahead and open the <strong>mpapp/views.py</strong> file and copy the below code.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.http import JsonResponse

def my_api_view(request):
    data = {
        'name': request.user.username,  # username of current logged-in user, otherwise Anonymous
        'url': 'https://www.pyscoop.com/',
        'skills': ['Python', 'Django'],
    }
    return JsonResponse(data)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We created a view(function) which accept the request parameter and return the response. Inside the view, we created a dictionary object that we want to return and passed this dictionary to JsonResponse class provided by Django. <br>Next step is to create a URL/endpoint that we can use to access this view. To do that we create a new file called <strong>urls.py</strong> inside the <strong>myapp</strong> directory. Copy the below code in the file <strong>myapp/urls.py</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre title="" class="wp-block-code"><code lang="python" class="language-python">from django.urls import path

from .views import my_api_view

urlpatterns = [
    path('awesome-api/', my_api_view),
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We imported the view created in the first step. We also created a URL path and pointed to the view we just imported. Simply this means whenever someone visit <strong>/awesome-api/</strong> it will execute the <strong>my_api_view</strong> function. However, as you get an in-depth understanding of the Django you will find out that there are number of middlewares gets hit before the view when you hit the URL but we don't have to worry about that in this tutorial.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The last thing that we want to do that is to tell Django to register the URL we just created and for that we need to include the URL file that we just created above. Open the file pyscoop/urls.py and you will see there are already admin URLs imported. Remove all the lines and copy the below code.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls'))
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We added 1 line <strong>path('', include('myapp.urls'))</strong> in the urlpatterns list after the admin url.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now visit the URL <a href="http://127.0.0.1:8000/awesome_api/" target="_blank" rel="noreferrer noopener">http://127.0.0.1:8000/awesome_api/</a> in your browser, you should be able to see the content similar to below.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="json" class="language-json">{
  "name": "gaurav.jain",
  "url": "https://www.pyscoop.com/",
  "skills": [
    "Python",
    "Django"
  ]
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you are not logged in then you will see empty value in the name field. You can use curl to identify the request headers. open and new tab on the terminal and execute <strong>curl -i http://127.0.0.1:8000/awesome_api/</strong>, you should be able to see similar content as below.  </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="bash" class="language-bash">gaurav@gaurav$ curl -i http://127.0.0.1:8000/awesome_api/
HTTP/1.1 200 OK
Date: Fri, 12 Jun 2020 08:00:29 GMT
Server: WSGIServer/0.2 CPython/3.7.4
Content-Type: application/json
X-Frame-Options: DENY
Content-Length: 79
Vary: Cookie
X-Content-Type-Options: nosniff

{"name": "gaurav.jain", "url": "https://www.pyscoop.com/", "skills": ["Python", "Django"]}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>if you look closely you will see the value of <strong>Content-Type</strong> header which is <strong>application/json</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Congratulations! You just created your first JSON API using Django.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is the simplest approach you can take to build an API using a function. This makes sense when you have APIs with minimal logic but in reality, APIs are much more complex and writing all the logic in the view function become cumbersome. To overcome, to a certain extent, we can use <a rel="noreferrer noopener" href="https://docs.djangoproject.com/en/dev/topics/class-based-views/intro/" target="_blank">Class based View</a>. For example, if we want to write the same API using Class based view, we can write - </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.views import View

class MyAPIView(View):
    def get(self, request):
        data = {
            'name': request.user.username,  # username of current logged-in user, otherwise Anonymous
            'url': 'https://www.pyscoop.com/',
            'skills': ['Python', 'Django'],
        }

        return JsonResponse(data)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And in the <strong>myapp/urls.py</strong>, we'll use </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.urls import path

from .views import MyAPIView

urlpatterns = [
    path('awesome_api/', MyAPIView.as_view()),
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You might be saying "<em><span class="has-inline-color has-primary-color">but this is more complicated than the one we created earlier</span>"</em>. I agree, Surely it looks, but don't forget, that was just a dumb API which always returns the almost same response. In a real application using class based view can save you much more time and headache. A class based view has some advantages over a function-based view. We won't go into those details, you can see the pros/cons <a rel="noreferrer noopener" href="https://stackoverflow.com/questions/14788181/class-based-views-vs-function-based-views" target="_blank">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's move ahead and build a dynamic API to get a more clear picture.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>3. Writing a dynamic API</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's create a simple table for Book with three columns- title, author &amp; price. In Django, this is done in 3 steps.<br>1. Create/Update models.<br>2. Create migration file for created/updated model in the above line<br>3. Apply the migration to reflect changes at the database level.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's go through each step one by one. <br>1) Copy the below content in the <strong>myapp/models.py</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=255)
    author = models.CharField(max_length=127)
    price = models.IntegerField()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In <strong>pyscoop/settings.py</strong> file, find the variable <strong>INSTALLED_APPS</strong> and append <strong>myapp</strong> to the list as below. This is required for migration.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python"># Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>2) Create a migration file for newly created Book model.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">gaurav@gaurav$ python manage.py makemigrations myapp</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This will create a file <strong>myapp/migrations/0001_initial.py</strong> which Django use to create or update database.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3) Apply the migration</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">gaurav@gaurav$ python manage.py migrate</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>4) This step is not necessary but to manage book data from the admin page, we need to register the Book model with the admin. Add below code in the <strong>myapp/admin.py</strong> file.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.contrib import admin
from .models import Book

admin.site.register(Book)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now, if start the server again using <strong>python manage.py runserver</strong> and visit the admin page <a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noreferrer noopener">http://127.0.0.1:8000/admin/</a>. You should be able to see the Books section. If you click on this, you will find 0 books there, thats because we haven't created any book yet so let's do that first. Add a new book by clicking <strong>ADD BOOK</strong> button, Fill in the details and Save it.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":448,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-12-at-2.57.22-PM-1024x302.png" alt="" class="wp-image-448"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Similarly, add another book from the Admin page. At this point we should have 2 book objects in the database, we can verify this by visiting <a rel="noreferrer noopener" href="http://127.0.0.1:8000/admin/myapp/book/" target="_blank">http://127.0.0.1:8000/admin/myapp/book/</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Time to write an API which returns all the book from the database.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>GET API</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Add below code in the <strong>myapp/views.py </strong>file just below the code you have written previously.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"lineNumbers":true} -->
<pre class="wp-block-code"><code lang="python" class="language-python line-numbers">from .models import Book

class BookView(View):
    def get(self, request):
        books_count = Book.objects.count()  # TOTAL books in the database
        books = Book.objects.all()  # Get all book objects from the database

        data = {
            'books': books,
            'count': books_count,
        }
        return JsonResponse(data)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And as you remember, earlier in this tutorial, we created a URL path to attach with a view. We are going to do the same with the new view <strong>BookView</strong>. Open the <strong>myapp/urls.py</strong> file and replace the previous code with below code.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.urls import path

from .views import MyAPIView, BookView  # Note the import of `BookView` view

urlpatterns = [
    path('awesome_api/', MyAPIView.as_view()),
    path('books/', BookView.as_view()),
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you call the API <a rel="noreferrer noopener" href="http://127.0.0.1:8000/books/" target="_blank">http://127.0.0.1:8000/books/</a>, you will get an Error saying <em><span class="has-inline-color has-dark-gray-color">Object of type QuerySet is not JSON serializable</span></em>. That's because we are trying to send the book objects directly without serializing them. There are many ways to serialize Django object or a queryset. Some of them are -</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Manually serialize the object fields individually and prepare the response data.</li><li>Use inbuilt serializer to serialize the object.</li><li>Use third-party libraries such as <a rel="noreferrer noopener" href="https://www.django-rest-framework.org/" target="_blank">DjangoRestFramework</a>.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Since we want to do everything in Pure Django, we'll not talk about the 3rd option.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Manually Serialize the object.</strong></li></ol>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class BookView(View):
    def get(self, request):
        books_count = Book.objects.count()  # TOTAL books in the database
        books = Book.objects.all()  # Get all book objects from the database

        books_serialized_data = []  # to store serialized data
        for book in books:
            books_serialized_data.append({
                'book_title': book.title,
                'author_name': book.author,
                'book_price': book.price,
            })

        data = {
            'books': books_serialized_data,
            'count': books_count,
        }
        return JsonResponse(data)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Add this code to your view and visit the URL (<a rel="noreferrer noopener" href="http://127.0.0.1:8000/books/" target="_blank">http://127.0.0.1:8000/books/</a>) again, you should be able to see the below response.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="json" class="language-json">{
    "books": [
        {
            "book_title": "Book title 1",
            "author_name": "Book author",
            "book_price": 100
        },
        {
            "book_title": "Book title 2",
            "author_name": "Book author 2",
            "book_price": 120
        }
    ],
    "count": 2
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This can be tedious if you have large tables and your views can get messy. You can also use <strong>value_list</strong> method on the queryset to get rid of manually serializing data but that may not be sufficient for the applications which have complex relations between tables.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>2. Using inbuilt serializer</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from django.core.serializers import serialize  # import serializer from django 

class BookView(View):
    def get(self, request):
        books_count = Book.objects.count()  # TOTAL books in the database
        books = Book.objects.all()  # Get all book objects from the database

        # Provide the serialize type such as python, json, xml, yaml, etc.
        # Here we are using 'python' because JsonResponse will automatically convert it to 'json'
        books_serialized_data = serialize('python', books)

        data = {
            'books': books_serialized_data,
            'count': books_count,
        }
        return JsonResponse(data)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And that's it! Visit the API(<a rel="noreferrer noopener" href="http://127.0.0.1:8000/books/" target="_blank">http://127.0.0.1:8000/books/</a>) again.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="json" class="language-json">{
    "books": [
        {
            "model": "myapp.book",
            "pk": 1,
            "fields": {
                "title": "Book title 1",
                "author": "Book author",
                "price": 100
            }
        },
        {
            "model": "myapp.book",
            "pk": 2,
            "fields": {
                "title": "Book title 2",
                "author": "Book author 2",
                "price": 120
            }
        }
    ],
    "count": 2
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But the problem is it comes with extra fields that we might not want to expose to users. You can definitely customize the serialized data by removing those fields. I encourage you to play with this and customize the data as per your wish. This can be a good exercise for you to get familiar with Django.<br>You can read more about this <a rel="noreferrer noopener" href="https://docs.djangoproject.com/en/3.0/topics/serialization/" target="_blank">here</a> and <a rel="noreferrer noopener" href="https://stackoverflow.com/questions/9403120/getting-django-to-serialize-objects-without-the-fields-field" target="_blank">here.</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Great! At this point we have our GET api ready which returns all the book data. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Note that in a production application you have to take care of <a rel="noreferrer noopener" href="https://docs.djangoproject.com/en/dev/topics/pagination/" target="_blank">pagination</a>, <a rel="noreferrer noopener" href="https://docs.djangoproject.com/en/dev/topics/auth/default/#authentication-in-web-requests" target="_blank">authentication</a>, <a href="https://docs.djangoproject.com/en/3.0/topics/pagination/"></a><a rel="noreferrer noopener" href="https://docs.djangoproject.com/en/dev/topics/auth/default/#permissions-and-authorization" target="_blank">permissions-and-authorization</a>, etc. This tutorial is for an absolute beginner, so you don't need to worry about these.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To continue with the tutorial, we need to install an API client such as <a rel="noreferrer noopener" href="https://www.postman.com/downloads/" target="_blank">Postman</a>. This makes our life easier while developing APIs. After installation, try to execute the <strong><a rel="noreferrer noopener" href="http://127.0.0.1:8000/books/" target="_blank">get all books</a></strong> API we created earlier.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":474,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-12-at-6.50.43-PM-1024x553.png" alt="" class="wp-image-474"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can see the response we observed previously. For <strong>GET</strong> APIs it doesn't make much difference but for POST, PUT, DELETE APIs it's quite convenient to use Postman. We are going to build these APIs and will be using Postman for debugging and testing purpose.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>If  you are not familiar with these HTTP verbs, I strongly advise you to read about these <a href="https://www.w3schools.com/tags/ref_httpmethods.asp">here</a> or <a rel="noreferrer noopener" href="https://www.restapitutorial.com/lessons/httpmethods.html" target="_blank">here</a></em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Alright, let's begin with POST API.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Currently, our view just supports the GET method. To support the POST method, we have to add another method called post in this View.  We also have to apply CSRF exempt decorator on the class. This is not recommended on a production application. I have explained about CSRF in <a rel="noreferrer noopener" href="https://www.pyscoop.com/security-in-the-django-application/#csrf" target="_blank">this post</a>. Copy the below code in your class. I have removed the lines from <strong>get</strong> method to keep this class short but you can simply copy other changes.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2> POST API</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code class="">from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt

@method_decorator(csrf_exempt, name='dispatch')
class BookView(View):
    def get(self, request):
        ...

    def post(self, request):
        data = {'message': 'This is a POST request'}
        return JsonResponse(data)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This time no need to change in the <strong>urls.py</strong> file. Open Postman and hit the API using the POST type as shown in the below image.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":485,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-13-at-5.51.04-PM-1024x359.png" alt="" class="wp-image-485"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Great! This means the setup works. Now we can modify the post method to accept book data from the user and create book objects.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">import json

@method_decorator(csrf_exempt, name='dispatch')
class BookView(View):

    ...

    def post(self, request):
        post_body = json.loads(request.body)   # don't forget to import json

        book_title = post_body.get('title')
        book_author = post_body.get('author')
        price = post_body.get('price')

        book_data = {
            'title': book_title,
            'author': book_author,
            'price': price,
        }

        book_obj = Book.objects.create(**book_data)
        data = {
            'message': f'New book object has been created with id {book_obj.id}'
        }
        return JsonResponse(data, status=201)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This view accepts 3 fields in the JSON body, those are- title, author and price and then save into database using <strong>Book.objects.create</strong>. Go ahead and hit the API using Postman.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><span style="color:#0d709a" class="has-inline-color">Select <strong>raw</strong> option in <strong>body</strong> tab on Postman. and from the dropdown select <strong>JSON</strong> (right to GraphQL).</span></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":492,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-14-at-11.30.56-AM-1024x556.png" alt="" class="wp-image-492"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now you can verify this by opening admin page <a rel="noreferrer noopener" href="http://127.0.0.1:8000/admin/myapp/book/" target="_blank">http://127.0.0.1:8000/admin/myapp/book/</a>. you should be able to see the newly created book object. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is a naive implementation. ideally, you should be handling all the fields and return the response accordingly.<br>for e.g if the user doesn't provide any of these 3 fields, you should return <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#400" target="_blank">400 <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#400" target="_blank">BAD REQUEST</a></a> with the appropriate message.  Also, if you see the above image carefully, you'll see the status is <span class="has-inline-color has-black-color"><a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#201" target="_blank">201 Created</a></span> because we passed that explicitly in the <strong>JsonResponse</strong>, Default is <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#200" target="_blank">200 OK</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>PUT API</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Imagine a scenario when you have to update the price of a book that already exists in your database. How would you do that? Commonly, PUT APIs are used in such a scenario where you have to update existing data. Let's implement PUT API and try to update a price for a book. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We need to create a new view as well as a new URL pattern. Unlike GET or POST we simply used <strong>/books/</strong>. But now we are going to work on an existing data, so we need to provide a unique identifier in the request to identify those objects and Update or delete them accordingly. In our example, a unique identifier would be <strong><a rel="noreferrer noopener" href="https://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields" target="_blank">id</a></strong>.<br>Copy the below code in <strong>myapp/views.py</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">@method_decorator(csrf_exempt, name='dispatch')
class BookUpdateDeleteView(View):

    def put(self, request, book_id):  # extra url parameter book_id is manadaotry
        book = Book.objects.get(id=book_id)

        put_body = json.loads(request.body)
        book.price = put_body.get('price')
        book.save()

        data = {
            'message': f'Price of the book {book_id} has been updated'
        }
        return JsonResponse(data)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>and in the <strong>myapp/urls.py</strong>, add a path for this view. After adding this, you should have 3 path objects in the urlpatterns list. Don't forget to import <strong>BookUpdateDeleteView</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">from .views import MyAPIView, BookView, BookUpdateDeleteView  

urlpatterns = [
    path('awesome_api/', MyAPIView.as_view()),
    path('books/', BookView.as_view()),
    path('books/&lt;int:book_id>/', BookUpdateDeleteView.as_view()),
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's understand what is happening here. We create a new view class <strong>BookUpdateDeleteView</strong> and created a method called <strong>put</strong> inside the class. An important thing to note here is, <strong>put</strong> method is expecting one more parameter which is <strong>book_id</strong>. This parameter should exactly be the same as we specified in the path<br>e.g. <strong>path('books/&lt;int:book_id&gt;/', BookUpdateDeleteView.as_view())</strong>. This path translate to <br><strong>/books/1/</strong>, <strong>/books/37/</strong>, etc. Alright, Let's try it out in the Postman. We want to change the price of the first book which is currently 100. New price should be, let' say, 83.  Select the PUT method type as we did for POST, use the URL <strong>http://127.0.0.1:8000/books/2/</strong> and then provide the price in JSON body.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":494,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-14-at-11.55.11-AM-1024x551.png" alt="" class="wp-image-494"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If you open admin page <a href="http://127.0.0.1:8000/admin/myapp/book/1/change/">http://127.0.0.1:8000/admin/myapp/book/1/change/</a>, you should be able to see the new price. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>DELETE API</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Delete API is similar to PUT API. We create a method called <strong>delete</strong> in the view class. This method expects two parameters(<strong>request</strong> and <strong>book_id) </strong>similar to the<strong> put</strong> method. We simply get the book object from the database based on the provided book_id in the URL. and delete the object.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">@method_decorator(csrf_exempt, name='dispatch')
class BookUpdateDeleteView(View):

    def put(self, request, book_id):
        ...

    def delete(self, request, book_id):
        book = Book.objects.get(id=book_id) # get the object from DB
        book.delete()  # delete the entry
        # you can also combine these 2 statements: Book.objects.get(id=book_id).delete()

        data = {
            'message': f'Book object with id {book_id} has been deleted'
        }
        return JsonResponse(data)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's delete the 2nd book object from the database Open the Postman, select DELETE method from the dropdown, use URL <strong>http://127.0.0.1:8000/books/2/</strong>, hit Send button. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":499,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-14-at-12.06.00-PM-1024x489.png" alt="" class="wp-image-499"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Visit the GET API <a rel="noreferrer noopener" href="http://127.0.0.1:8000/books/" target="_blank">http://127.0.0.1:8000/books/</a> again, and you should not be able to see the deleted entry. You can also visit the <a rel="noreferrer noopener" href="http://127.0.0.1:8000/admin/myapp/book/" target="_blank">admin page</a> to see available entries.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In a sizable application, it makes more sense to use DRF. It eases the task of serializing or deserializing the data, abstract out a lot of boilerplate code for APIs and developing APIs is just a matter of minutes. However, You are now equipped with all basic knowledge required for API building and ready to take on the world. 😎<br>You can find the code for views and URLs <a rel="noreferrer noopener" href="https://gist.github.com/gjain0/70419bcdad6950565ad71dd2839d12c1" target="_blank">here</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Learn how to build JSON based RESTful APIs using Django without using DjangoRestFramework.]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date><![CDATA[2020-06-12 02:18:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-12 02:18:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[write-json-apis-in-pure-django-for-beginners]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="beginner"><![CDATA[Beginner]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[54]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[507]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-06-14]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Django JSONField attributes in admin filter</title>
		<link>https://www.pyscoop.com/django-jsonfield-attributes-in-admin-filter/</link>
		<pubDate>Thu, 25 Jun 2020 12:25:37 +0000</pubDate>
		<dc:creator><![CDATA[gauravjain]]></dc:creator>
		<guid isPermaLink="false">https://www.pyscoop.com/?p=522</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Django provides a&nbsp;JSONField&nbsp;which is useful to store JSON data and query on it. However, this is supported by PostgreSQL only. If you want to use JSONField with MySQL or MariaDB, you can use <a aria-label="undefined (opens in a new tab)" href="https://django-mysql.readthedocs.io/en/latest/model_fields/json_field.html" target="_blank" rel="noreferrer noopener nofollow">django-mysql-json-field</a>. But in this post, we'll be using inbuilt JSONField.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Django provides us with a way to query on JSONfield but you can't directly use JSONField's attributes on admin as filters. In this post, I'll be creating a Filter class for JSONField that can be used to create filters on the admin page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's start with a simple model that has 1 JSONField.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class MyModel(models.Model):
    jsonfield = JSONField()
    # few more fields...</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Populate this field with below data, we'll use this data throughout the post as a reference.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="json" class="language-json">{
    "name": "Gaurav",
    "company": "pyscoop",
    "address": {
        "city": "Jaipur",
        "country": {"name": "India", "code": "IN"}
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now suppose you want to create filters for JSONField properties/keys, for e.g. consider the above data, we want to show filters for company and city, something like below-</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class MyModelAdmin(admin.ModelAdmin):
    list_filter = ["jsonfield__company", "jsonfield__address__city"]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But as expected, this will raise an error, we can't use JSON field attributes for filtering like this. To support that we need to extend the inbuilt filter class.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class JSONFieldFilter(SimpleListFilter):
    """
    Base JSONFilter class to use by individual attribute filter classes.
    """

    model_json_field_name = None  # name of the json field column in the model
    json_data_property_name = None  # name of one attribute from json data

    def lookups(self, request, model_admin):
        """
        Returns a list of tuples.
        The 1st element in each tuple is the coded value for the option that 
        will appear in the URL query.
        The 2nd element is the human-readable name for the option that will appear 
        in the right sidebar.
        """
        field_value_set = set()
        model = model_admin.model

        for json_field_data in model.objects.values_list(self.model_json_field_name, flat=True):
            field_value_set.add(self.get_child_value_from_json_field_data(json_field_data))

        return [(v, v) for v in field_value_set]

    def queryset(self, request, queryset):
        """
        Returns the filtered queryset based on the value provided in 
        the query string &amp; retrievable via `self.value()`
        """
        if self.value():
            json_field_query = {f'{self.model_json_field_name}__{self.json_data_property_name}': self.value()}
            return queryset.filter(**json_field_query)
        else:
            return queryset</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We are overriding two methods here, <strong>lookups</strong> and <strong>queryset</strong>. <br>Method <strong>lookups</strong> will give us a list of tuples that will be used in filtering. <br>Method <strong>queryset</strong> will return the filtered queryset based on the chosen filter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we can extend this class to create custom admin filter classes for individual JSON field properties.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class CompanyFilter(JSONFieldFilter):
    model_json_field_name = 'jsonfield'  # Name of the column in the model
    json_data_property_name = 'company' # property/field name in json data
    title = 'Company'  # A label for this filter for admin sidebar
    parameter_name = 'js_company'  # Parameter for the filter that will be used in the URL query</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>All 4 properties are mandatory. We created the first 2 properties(<span style="color:#cb1111" class="has-inline-color">model_json_field_name</span>, <span style="color:#cb1111" class="has-inline-color">json_data_property_name</span>) which are required by the base JSONFieldFilter class and the last 2 properties(<span style="color:#cb1111" class="has-inline-color">title</span>, <span style="color:#cb1111" class="has-inline-color">parameter_name</span>) are managed by Django itself. You can read about it <a aria-label="undefined (opens in a new tab)" href="https://docs.djangoproject.com/en/3.0/ref/contrib/admin/" target="_blank" rel="noreferrer noopener nofollow">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First 3 properties are self-explanatory, last property <strong>parameter_name</strong> will be used in URL query parameter<br>e.g. <strong>/admin/myapp/mymodel/?js_company=Pyscoop</strong>. Here I called it <strong>js_company</strong>, but the value could be anything, e.g <strong>json_company</strong> but it should be unique and shouldn't conflict with other column names. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And then finally append this class to <strong>list_filter</strong> list.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class MyModelAdmin(admin.ModelAdmin):
    list_filter = [CompanyFilter]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now visit the admin page and you should be able to see filters for the company in the sidebar. <br>Let's add a filter for the <strong>name</strong> as well.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class NameFilter(JSONFieldFilter):
    model_json_field_name = 'jsonfield'  # Name of the column in the model
    json_data_property_name = 'name' # property/field name in json data
    title = 'Name'  # A label for this filter for admin sidebar
    parameter_name = 'js_name'  # Parameter for the filter that will be used in the URL query</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class MyModelAdmin(admin.ModelAdmin):
    list_filter = [CompanyFilter, NameFilter]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Visit the admin page and you should be able to see filters for the company and name both in the sidebar.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Great! It's working as expected.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This works for only root level properties, So what If you want to add a filter for <strong>address__city</strong>? </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class CityFilter(JSONFieldFilter):
    model_json_field_name = 'jsonfield'
    json_data_property_name = 'address__city'  # This is how you can query the DB on JSONField properties
    title = 'City'
    parameter_name = 'js_addr_city'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you append <strong>CityFilter</strong> to <strong>list_filter</strong>, it won't work and you will see an error. For that, you have to modify the <strong>lookups</strong> method in the base class and add support for child property (in this case country is a child of address property).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def lookups(self, request, model_admin):
    if '__' in self.json_field_property_name:  # Support for child property
        keys = self.json_field_property_name.split('__')
        field_value_set = set(
            data[keys[0]][keys[1]] for data in 
            model_admin.model.objects.values_list(self.model_json_field_name, flat=True)
        )
    else:
        field_value_set = set(
            data[self.json_field_property_name] for data in 
            model_admin.model.objects.values_list(self.model_json_field_name, flat=True)
        )

    return [(v, v) for v in field_value_set]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We are checking here if we have double underscore in the <strong>json_field_property_name</strong>, if yes, that means its a child property query. We split it and get the value of the child property by looking in the data. Now if you add <strong>CityFilter</strong> to model admin class, you should be able to see the country filter on the admin page.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class MyModelAdmin(admin.ModelAdmin):
    list_filter = [CompanyFilter, NameFilter, CityFilter]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now suppose you want to add a filter for a child of a child(3 level nesting), how would you do that? You can have another <strong>if</strong> <strong>condition</strong> that checks the count of double_underscore and based on that determine whether it's a child or child of a child. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">if json_field_property_name.count('__') == 2:...</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But again, that's very tedious and ugly, we can do better. We need to generalize this so no matter how many nesting we want we should be able to create a filter for that easily. For that, we'd create a helper method that will give us the final value from the data based on the <strong>json_field_property_name</strong> value.  Add below method to the JSONFieldFilter class</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def get_child_value_from_json_field_data(self, json_field_data):
    key_list = self.json_data_property_name.split('__')
    for key in key_list:
        if isinstance(json_field_data, dict):
            json_field_data = json_field_data[key]
    return json_field_data  </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And call this method inside <strong>lookups</strong> method.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">def lookups(self, request, model_admin):
    field_value_set = set()

    for json_field_data in model_admin.model.objects.values_list(self.model_json_field_name, flat=True):
        field_value_set.add(self.get_child_value_from_json_field_data(json_field_data))

    return [(v, v) for v in field_value_set]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>That's better! Now we can create filters for any child at any nested level. Let's try to create filter for the country name.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code lang="python" class="language-python">class CountryFilter(JSONFieldFilter):
    model_json_field_name = 'jsonfield'
    json_data_property_name = 'address__country__name'
    title = 'Country Name'
    parameter_name = 'js_addr_country_name'


class MyModelAdmin(admin.ModelAdmin):
    list_filter = [CompanyFilter, NameFilter, CityFilter, CountryFilter]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Open up the admin page and you should be able to see all 4 filters in the sidebar.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":546,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://www.pyscoop.com/wp-content/uploads/2020/06/Screen-Shot-2020-06-24-at-4.23.59-PM-1024x366.png" alt="" class="wp-image-546"/></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Improvements</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Although this is quite useful in most of the cases but there are few things that we can improve.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Create a factory that generates and return the filter classes for all child automatically instead of manually creating all filter classes.</li><li>Have a default value for some of the parameters in case developer doesn't provide them, for e.g. if the developer doesn't provide <strong>parameter_name</strong>, filter class generates a default value based on the available information. <strong>parameter_name = f'js_{json_data_property_name}'</strong>. </li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>I'll leave those for readers to exercise. <em>I've also Create a <a href="https://gist.github.com/gjain0/b264562ba66067f85da7a55063cbfa64" target="_blank" rel="noreferrer noopener">Github gist</a> for the the final version.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Create filters on the Django Admin page for a JSONField data.]]></excerpt:encoded>
		<wp:post_id>522</wp:post_id>
		<wp:post_date><![CDATA[2020-06-25 12:25:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-25 12:25:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[django-jsonfield-attributes-in-admin-filter]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="djangoadmin"><![CDATA[DjangoAdmin]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[54]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[564]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	